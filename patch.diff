From 9254b621b38d8fb762934df9ee4460abca7b0fbd Mon Sep 17 00:00:00 2001
From: y00466157 <yaozhaoxu@huawei.com>
Date: Mon, 22 Jul 2024 22:10:33 +0800
Subject: [PATCH] =?UTF-8?q?TicketNo:=20DTS2024071304038=20Description:=20?=
 =?UTF-8?q?=E4=BF=AE=E5=A4=8D=E6=97=8B=E8=BD=AC=E9=97=AE=E9=A2=98?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Team: OHTERS
Feature or Bugfix: Bugfix
Binary Source: No
PrivateCode(Yes/No): No

Change-Id: I447643277df059e92f0626e22e9c10dc8ffdcb52
---
 frameworks/native/camera/src/session/capture_session.cpp   | 4 ++--
 .../native/camera/include/session/capture_session.h        | 2 +-
 .../camera_service/binder/base/include/icapture_session.h  | 2 +-
 .../binder/client/include/hcapture_session_proxy.h         | 2 +-
 .../binder/client/src/hcapture_session_proxy.cpp           | 3 ++-
 .../binder/server/src/hcapture_session_stub.cpp            | 5 ++++-
 services/camera_service/include/camera_util.h              | 3 ++-
 services/camera_service/include/hcapture_session.h         | 4 ++--
 services/camera_service/include/hstream_repeat.h           | 3 ++-
 services/camera_service/src/camera_util.cpp                | 7 +++++--
 services/camera_service/src/hcapture_session.cpp           | 7 ++++---
 services/camera_service/src/hstream_repeat.cpp             | 7 ++++---
 12 files changed, 30 insertions(+), 19 deletions(-)

diff --git a/frameworks/native/camera/src/session/capture_session.cpp b/frameworks/native/camera/src/session/capture_session.cpp
index 2bf549a7d..55e0c4fee 100644
--- a/frameworks/native/camera/src/session/capture_session.cpp
+++ b/frameworks/native/camera/src/session/capture_session.cpp
@@ -1072,12 +1072,12 @@ void CaptureSession::CreateMediaLibrary(sptr<CameraPhotoProxy> photoProxy, std::
     }
 }
 
-int32_t CaptureSession::SetPreviewRotation()
+int32_t CaptureSession::SetPreviewRotation(std::string &deviceClass)
 {
     int32_t errorCode = CAMERA_OK;
     auto captureSession = GetCaptureSession();
     if (captureSession) {
-        errorCode = captureSession->SetPreviewRotation();
+        errorCode = captureSession->SetPreviewRotation(deviceClass);
         if (errorCode != CAMERA_OK) {
             MEDIA_ERR_LOG("SetPreviewRotation is failed errorCode: %{public}d", errorCode);
         }
diff --git a/interfaces/inner_api/native/camera/include/session/capture_session.h b/interfaces/inner_api/native/camera/include/session/capture_session.h
index 3f810a278..773b3900b 100644
--- a/interfaces/inner_api/native/camera/include/session/capture_session.h
+++ b/interfaces/inner_api/native/camera/include/session/capture_session.h
@@ -1349,7 +1349,7 @@ public:
         return innerInputDevice_;
     }
 
-    int32_t SetPreviewRotation();
+    int32_t SetPreviewRotation(std::string &deviceClass);
     
     inline sptr<ICaptureSession> GetCaptureSession()
     {
diff --git a/services/camera_service/binder/base/include/icapture_session.h b/services/camera_service/binder/base/include/icapture_session.h
index 17d59b806..993362f7a 100644
--- a/services/camera_service/binder/base/include/icapture_session.h
+++ b/services/camera_service/binder/base/include/icapture_session.h
@@ -94,7 +94,7 @@ public:
     virtual int32_t CreateMediaLibrary(sptr<CameraPhotoProxy> &photoProxy,
         std::string &uri, int32_t &cameraShotType, int64_t timestamp) = 0;
 
-    virtual int32_t SetPreviewRotation() = 0;
+    virtual int32_t SetPreviewRotation(std::string &deviceClass) = 0;
 
     DECLARE_INTERFACE_DESCRIPTOR(u"ICaptureSession");
 };
diff --git a/services/camera_service/binder/client/include/hcapture_session_proxy.h b/services/camera_service/binder/client/include/hcapture_session_proxy.h
index ba105a54e..b394aa15b 100644
--- a/services/camera_service/binder/client/include/hcapture_session_proxy.h
+++ b/services/camera_service/binder/client/include/hcapture_session_proxy.h
@@ -68,7 +68,7 @@ public:
     int32_t CreateMediaLibrary(sptr<CameraPhotoProxy> &photoProxy, std::string &uri, int32_t &cameraShotType,
         int64_t timestamp) override;
 
-    int32_t SetPreviewRotation() override;
+    int32_t SetPreviewRotation(std::string &deviceClass) override;
 private:
     static inline BrokerDelegator<HCaptureSessionProxy> delegator_;
 };
diff --git a/services/camera_service/binder/client/src/hcapture_session_proxy.cpp b/services/camera_service/binder/client/src/hcapture_session_proxy.cpp
index c11864baa..482904cee 100644
--- a/services/camera_service/binder/client/src/hcapture_session_proxy.cpp
+++ b/services/camera_service/binder/client/src/hcapture_session_proxy.cpp
@@ -395,13 +395,14 @@ int32_t HCaptureSessionProxy::CreateMediaLibrary(sptr<CameraPhotoProxy> &photoPr
     return error;
 }
 
-int32_t HCaptureSessionProxy::SetPreviewRotation()
+int32_t HCaptureSessionProxy::SetPreviewRotation(std::string &deviceClass)
 {
     MessageParcel data;
     MessageParcel reply;
     MessageOption option;
 
     data.WriteInterfaceToken(GetDescriptor());
+    data.WriteString(deviceClass);
     int error = Remote()->SendRequest(
         static_cast<uint32_t>(CaptureSessionInterfaceCode::CAMERA_CAPTURE_SESSION_SET_PREVIEW_ROTATE),
         data, reply, option);
diff --git a/services/camera_service/binder/server/src/hcapture_session_stub.cpp b/services/camera_service/binder/server/src/hcapture_session_stub.cpp
index 0213f47c6..a527b4c13 100644
--- a/services/camera_service/binder/server/src/hcapture_session_stub.cpp
+++ b/services/camera_service/binder/server/src/hcapture_session_stub.cpp
@@ -95,7 +95,10 @@ int HCaptureSessionStub::OnRemoteRequest(
             errCode = HandleCreateMediaLibrary(data, reply);
             break;
         case static_cast<uint32_t>(CaptureSessionInterfaceCode::CAMERA_CAPTURE_SESSION_SET_PREVIEW_ROTATE):
-            errCode = SetPreviewRotation();
+            {
+                std::string deviceClass = data.ReadString();
+                errCode = SetPreviewRotation(deviceClass);
+            }
             break;
         default:
             MEDIA_ERR_LOG("HCaptureSessionStub request code %{public}u not handled", code);
diff --git a/services/camera_service/include/camera_util.h b/services/camera_service/include/camera_util.h
index 4f6d97e58..541f3ec86 100644
--- a/services/camera_service/include/camera_util.h
+++ b/services/camera_service/include/camera_util.h
@@ -171,7 +171,8 @@ int32_t CheckPermission(std::string permissionName, uint32_t callerToken);
 
 void AddCameraPermissionUsedRecord(const uint32_t callingTokenId, const std::string permissionName);
 
-int32_t GetStreamRotation(int32_t& sensorOrientation, camera_position_enum_t& cameraPosition, int& disPlayRotation);
+int32_t GetStreamRotation(int32_t& sensorOrientation, camera_position_enum_t& cameraPosition, int& disPlayRotation,
+    std::string& deviceClass);
 
 inline bool IsCameraDebugOn()
 {
diff --git a/services/camera_service/include/hcapture_session.h b/services/camera_service/include/hcapture_session.h
index 03952fa22..b46507012 100644
--- a/services/camera_service/include/hcapture_session.h
+++ b/services/camera_service/include/hcapture_session.h
@@ -222,7 +222,7 @@ public:
     const sptr<HStreamCommon> GetHdiStreamByStreamID(int32_t streamId) override;
     void StartMovingPhotoEncode(int32_t rotation, uint64_t timestamp) override;
     void StartRecord(uint64_t timestamp, int32_t rotation);
-    int32_t SetPreviewRotation() override;
+    int32_t SetPreviewRotation(std::string &deviceClass) override;
 
     void DumpSessionInfo(CameraInfoDumper& infoDumper);
     static void DumpSessions(CameraInfoDumper& infoDumper);
@@ -300,7 +300,7 @@ private:
     ColorSpace currCaptureColorSpace_ = ColorSpace::COLOR_SPACE_UNKNOWN;
     bool isSessionStarted_ = false;
     bool enableStreamRotate_ = false;
-
+    std::string deviceClass_ = "phone";
     std::mutex movingPhotoStatusLock_; // Guard movingPhotoStatus
     sptr<Surface> surface_;
     sptr<MovingPhotoListener> livephotoListener_;
diff --git a/services/camera_service/include/hstream_repeat.h b/services/camera_service/include/hstream_repeat.h
index f7b98c3bf..8abef2f79 100644
--- a/services/camera_service/include/hstream_repeat.h
+++ b/services/camera_service/include/hstream_repeat.h
@@ -74,7 +74,7 @@ public:
     int32_t OperatePermissionCheck(uint32_t interfaceCode) override;
     int32_t SetFrameRate(int32_t minFrameRate, int32_t maxFrameRate) override;
     int32_t SetMirror(bool isEnable) override;
-    int32_t SetPreviewRotation();
+    int32_t SetPreviewRotation(std::string &deviceClass);
     void SetMirrorForLivePhoto(bool isEnable, int32_t mode);
     void SetStreamTransform(int disPlayRotation = -1);
 
@@ -101,6 +101,7 @@ private:
     bool mEnableSecure = false;
     bool enableMirror_ = false;
     bool enableStreamRotate_ = false;
+    std::string deviceClass_ = "phone";
     sptr<OHOS::IBufferProducer> metaProducer_;
     std::mutex movingPhotoCallbackLock_;
     std::function<void()> startMovingPhotoCallback_;
diff --git a/services/camera_service/src/camera_util.cpp b/services/camera_service/src/camera_util.cpp
index 0425ac046..89740c794 100644
--- a/services/camera_service/src/camera_util.cpp
+++ b/services/camera_service/src/camera_util.cpp
@@ -32,7 +32,7 @@
 namespace OHOS {
 namespace CameraStandard {
 using namespace OHOS::HDI::Display::Composer::V1_1;
-static bool g_tablet = system::GetParameter("const.product.devicetype", "unknow") == "tablet";
+static bool g_tablet = true;
 std::unordered_map<int32_t, int32_t> g_cameraToPixelFormat = {
     {OHOS_CAMERA_FORMAT_RGBA_8888, GRAPHIC_PIXEL_FMT_RGBA_8888},
     {OHOS_CAMERA_FORMAT_YCBCR_420_888, GRAPHIC_PIXEL_FMT_YCBCR_420_SP},
@@ -482,7 +482,8 @@ bool IsVerticalDevice()
     return isVerticalDevice;
 }
 
-int32_t GetStreamRotation(int32_t& sensorOrientation, camera_position_enum_t& cameraPosition, int& disPlayRotation)
+int32_t GetStreamRotation(int32_t& sensorOrientation, camera_position_enum_t& cameraPosition, int& disPlayRotation,
+    std::string& deviceClass)
 {
     int32_t streamRotation = sensorOrientation;
     int degrees = 0;
@@ -493,6 +494,8 @@ int32_t GetStreamRotation(int32_t& sensorOrientation, camera_position_enum_t& ca
         case DISPALY_ROTATE_2: degrees = STREAM_ROTATE_180; break;
         case DISPALY_ROTATE_3: degrees = STREAM_ROTATE_270; break; // 逆时针转90
     }
+
+    g_tablet = (deviceClass == "tablet");
     if (cameraPosition == OHOS_CAMERA_POSITION_FRONT) {
         sensorOrientation = g_tablet ? sensorOrientation + STREAM_ROTATE_90 : sensorOrientation;
         streamRotation = (STREAM_ROTATE_360 + sensorOrientation - degrees) % STREAM_ROTATE_360;
diff --git a/services/camera_service/src/hcapture_session.cpp b/services/camera_service/src/hcapture_session.cpp
index 77d5750ea..d7fe182bb 100644
--- a/services/camera_service/src/hcapture_session.cpp
+++ b/services/camera_service/src/hcapture_session.cpp
@@ -436,9 +436,10 @@ void HCaptureSession::UnRegisterDisplayListener(sptr<HStreamRepeat> repeatStream
     }
 }
 
-int32_t HCaptureSession::SetPreviewRotation()
+int32_t HCaptureSession::SetPreviewRotation(std::string &deviceClass)
 {
-    enableStreamRotate_ = false;
+    enableStreamRotate_ = true;
+    deviceClass_ = deviceClass;
     return CAMERA_OK;
 }
 
@@ -466,7 +467,7 @@ int32_t HCaptureSession::AddOutput(StreamType streamType, sptr<IStreamCommon> st
             if (enableStreamRotate_ && repeatSteam != nullptr &&
                 repeatSteam->GetRepeatStreamType() == RepeatStreamType::PREVIEW) {
                 RegisterDisplayListener(repeatSteam);
-                repeatSteam->SetPreviewRotation();
+                repeatSteam->SetPreviewRotation(deviceClass_);
             }
             errorCode = AddOutputStream(repeatSteam);
         } else if (streamType == StreamType::METADATA) {
diff --git a/services/camera_service/src/hstream_repeat.cpp b/services/camera_service/src/hstream_repeat.cpp
index aa2aa548e..07a456632 100644
--- a/services/camera_service/src/hstream_repeat.cpp
+++ b/services/camera_service/src/hstream_repeat.cpp
@@ -527,9 +527,10 @@ int32_t HStreamRepeat::SetMirror(bool isEnable)
     return CAMERA_OK;
 }
 
-int32_t HStreamRepeat::SetPreviewRotation()
+int32_t HStreamRepeat::SetPreviewRotation(std::string &deviceClass)
 {
-    enableStreamRotate_ = false;
+    enableStreamRotate_ = true;
+    deviceClass_ = deviceClass;
     return CAMERA_OK;
 }
  
@@ -637,7 +638,7 @@ void HStreamRepeat::SetStreamTransform(int disPlayRotation)
             }
             mOritation = static_cast<int>(display->GetRotation());
         }
-        int32_t streamRotation = GetStreamRotation(sensorOrientation, cameraPosition, mOritation);
+        int32_t streamRotation = GetStreamRotation(sensorOrientation, cameraPosition, mOritation, deviceClass_);
         ProcessCameraPosition(streamRotation, cameraPosition);
     } else {
         ProcessFixedTransform(sensorOrientation, cameraPosition);
-- 
2.40.1.huawei.4

