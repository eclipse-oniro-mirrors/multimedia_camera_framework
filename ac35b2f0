From ac35b2f08e402d70ad1e3e95d495351c9d73e781 Mon Sep 17 00:00:00 2001
From: z30014341 <zhoujing96@huawei.com>
Date: Wed, 17 Jul 2024 20:39:43 +0800
Subject: [PATCH] TicketNo:DTS2024062823376 Description: update mst Team:gitee
 Feature or Bugfix:Bugfix Binary Source: sync from gitee
 PrivateCode(Yes/No):No ------ DO NOT MODIFY, AUTO-GENERATED! ------
 Gitee-Issue: #IA95P3 Time: 2024-06-28T18:47:09.128Z PR-Num:1527 Gitee-PR:
 https://openharmony.gitee.com/openharmony/multimedia_camera_framework/pulls/1527

Change-Id: Iba8974e22d6f3cb3537a5772001fc6476f88d2c1
---
 bundle.json                                   |  1 +
 .../camera/src/output/metadata_output.cpp     | 14 ++---
 .../native/camera/src/output/photo_output.cpp | 56 ++++++++-----------
 .../camera/src/output/preview_output.cpp      | 36 +++++-------
 .../native/camera/src/output/video_output.cpp | 14 ++---
 services/camera_service/include/camera_log.h  | 27 ++++++++-
 6 files changed, 77 insertions(+), 71 deletions(-)

diff --git a/bundle.json b/bundle.json
index e405c567c..3a1da70c8 100644
--- a/bundle.json
+++ b/bundle.json
@@ -149,6 +149,7 @@
             "//foundation/multimedia/camera_framework/frameworks/native/camera/test/moduletest:camera_framework_moduletest",
             "//foundation/multimedia/camera_framework/frameworks/native/camera/test/unittest:camera_framework_unittest_v1_1",
             "//foundation/multimedia/camera_framework/frameworks/native/camera/test/unittest:camera_ndk_unittest_v1_1",
+            "//foundation/multimedia/camera_framework/frameworks/native/camera/test/unittest:camera_deferred_unittest",
             "//foundation/multimedia/camera_framework/test:camera_fuzz_test"
           ]
         }
diff --git a/frameworks/native/camera/src/output/metadata_output.cpp b/frameworks/native/camera/src/output/metadata_output.cpp
index 230f4a87c..595421923 100644
--- a/frameworks/native/camera/src/output/metadata_output.cpp
+++ b/frameworks/native/camera/src/output/metadata_output.cpp
@@ -148,15 +148,13 @@ int32_t MetadataOutput::CreateStream()
 int32_t MetadataOutput::Start()
 {
     auto captureSession = GetSession();
-    if (captureSession == nullptr || !captureSession->IsSessionCommited()) {
-        MEDIA_ERR_LOG("MetadataOutput Failed to Start!, session not config");
-        return CameraErrorCode::SESSION_NOT_CONFIG;
-    }
+    CHECK_ERROR_RETURN_RET_LOG(captureSession == nullptr || !captureSession->IsSessionCommited(),
+        CameraErrorCode::SESSION_NOT_CONFIG,
+        "MetadataOutput Failed to Start!, session not commited");
     auto stream = GetStream();
-    if (stream == nullptr) {
-        MEDIA_ERR_LOG("MetadataOutput Failed to Start!, GetStream is nullptr");
-        return CameraErrorCode::SERVICE_FATL_ERROR;
-    }
+    CHECK_ERROR_RETURN_RET_LOG(stream == nullptr,
+        CameraErrorCode::SERVICE_FATL_ERROR,
+        "MetadataOutput Failed to Start!, GetStream is nullptr");
     int32_t errCode = static_cast<IStreamMetadata*>(stream.GetRefPtr())->Start();
     if (errCode != CAMERA_OK) {
         MEDIA_ERR_LOG("Failed to Start MetadataOutput!, errCode: %{public}d", errCode);
diff --git a/frameworks/native/camera/src/output/photo_output.cpp b/frameworks/native/camera/src/output/photo_output.cpp
index c7bc43d2f..e016f454a 100644
--- a/frameworks/native/camera/src/output/photo_output.cpp
+++ b/frameworks/native/camera/src/output/photo_output.cpp
@@ -496,14 +496,12 @@ int32_t PhotoOutput::Capture(std::shared_ptr<PhotoCaptureSetting> photoCaptureSe
 {
     std::lock_guard<std::mutex> lock(asyncOpMutex_);
     auto captureSession = GetSession();
-    if (captureSession == nullptr || !captureSession->IsSessionCommited()) {
-        MEDIA_ERR_LOG("PhotoOutput Failed to Capture!, session not runing");
-        return CameraErrorCode::SESSION_NOT_RUNNING;
-    }
-    if (GetStream() == nullptr) {
-        MEDIA_ERR_LOG("PhotoOutput Failed to Capture!, GetStream is nullptr");
-        return CameraErrorCode::SERVICE_FATL_ERROR;
-    }
+    CHECK_ERROR_RETURN_RET_LOG(captureSession == nullptr || !captureSession->IsSessionCommited(),
+        CameraErrorCode::SESSION_NOT_CONFIG,
+        "PhotoOutput Failed to Capture with setting, session not commited");
+    CHECK_ERROR_RETURN_RET_LOG(GetStream() == nullptr,
+        CameraErrorCode::SERVICE_FATL_ERROR,
+        "PhotoOutput Failed to Capture! with setting, GetStream is nullptr");
     defaultCaptureSetting_ = photoCaptureSettings;
     auto itemStream = static_cast<IStreamCapture*>(GetStream().GetRefPtr());
     int32_t errCode = CAMERA_UNKNOWN_ERROR;
@@ -526,14 +524,12 @@ int32_t PhotoOutput::Capture()
 {
     std::lock_guard<std::mutex> lock(asyncOpMutex_);
     auto captureSession = GetSession();
-    if (captureSession == nullptr || !captureSession->IsSessionCommited()) {
-        MEDIA_ERR_LOG("PhotoOutput Failed to Capture!, session not runing");
-        return CameraErrorCode::SESSION_NOT_RUNNING;
-    }
-    if (GetStream() == nullptr) {
-        MEDIA_ERR_LOG("PhotoOutput Failed to Capture!, GetStream is nullptr");
-        return CameraErrorCode::SERVICE_FATL_ERROR;
-    }
+    CHECK_ERROR_RETURN_RET_LOG(captureSession == nullptr || !captureSession->IsSessionCommited(),
+        CameraErrorCode::SESSION_NOT_CONFIG,
+        "PhotoOutput Failed to Capture, session not commited");
+    CHECK_ERROR_RETURN_RET_LOG(GetStream() == nullptr,
+        CameraErrorCode::SERVICE_FATL_ERROR,
+        "PhotoOutput Failed to Capture, GetStream is nullptr");
     int32_t items = 0;
     int32_t dataLength = 0;
     std::shared_ptr<Camera::CameraMetadata> captureMetadataSetting =
@@ -558,14 +554,12 @@ int32_t PhotoOutput::CancelCapture()
 {
     std::lock_guard<std::mutex> lock(asyncOpMutex_);
     auto captureSession = GetSession();
-    if (captureSession == nullptr || !captureSession->IsSessionCommited()) {
-        MEDIA_ERR_LOG("PhotoOutput Failed to Capture!, session not runing");
-        return CameraErrorCode::SESSION_NOT_RUNNING;
-    }
-    if (GetStream() == nullptr) {
-        MEDIA_ERR_LOG("PhotoOutput Failed to CancelCapture!, GetStream is nullptr");
-        return CameraErrorCode::SERVICE_FATL_ERROR;
-    }
+    CHECK_ERROR_RETURN_RET_LOG(captureSession == nullptr || !captureSession->IsSessionCommited(),
+        CameraErrorCode::SESSION_NOT_CONFIG,
+        "PhotoOutput Failed to CancelCapture, session not commited");
+    CHECK_ERROR_RETURN_RET_LOG(GetStream() == nullptr,
+        CameraErrorCode::SERVICE_FATL_ERROR,
+        "PhotoOutput Failed to CancelCapture, GetStream is nullptr");
     auto itemStream = static_cast<IStreamCapture*>(GetStream().GetRefPtr());
     int32_t errCode = CAMERA_UNKNOWN_ERROR;
     if (itemStream) {
@@ -583,14 +577,12 @@ int32_t PhotoOutput::ConfirmCapture()
 {
     std::lock_guard<std::mutex> lock(asyncOpMutex_);
     auto captureSession = GetSession();
-    if (captureSession == nullptr || !captureSession->IsSessionCommited()) {
-        MEDIA_ERR_LOG("PhotoOutput Failed to ConfirmCapture!, session not runing");
-        return CameraErrorCode::SESSION_NOT_RUNNING;
-    }
-    if (GetStream() == nullptr) {
-        MEDIA_ERR_LOG("PhotoOutput Failed to ConfirmCapture!, GetStream is nullptr");
-        return CameraErrorCode::SERVICE_FATL_ERROR;
-    }
+    CHECK_ERROR_RETURN_RET_LOG(captureSession == nullptr || !captureSession->IsSessionCommited(),
+        CameraErrorCode::SESSION_NOT_CONFIG,
+        "PhotoOutput Failed to ConfirmCapture, session not commited");
+    CHECK_ERROR_RETURN_RET_LOG(GetStream() == nullptr,
+        CameraErrorCode::SERVICE_FATL_ERROR,
+        "PhotoOutput Failed to ConfirmCapture, GetStream is nullptr");
     auto itemStream = static_cast<IStreamCapture*>(GetStream().GetRefPtr());
     int32_t errCode = CAMERA_UNKNOWN_ERROR;
     if (itemStream) {
diff --git a/frameworks/native/camera/src/output/preview_output.cpp b/frameworks/native/camera/src/output/preview_output.cpp
index c6a4c1b97..e245628a7 100644
--- a/frameworks/native/camera/src/output/preview_output.cpp
+++ b/frameworks/native/camera/src/output/preview_output.cpp
@@ -202,14 +202,12 @@ int32_t PreviewOutput::Start()
     std::lock_guard<std::mutex> lock(asyncOpMutex_);
     MEDIA_DEBUG_LOG("Enter Into PreviewOutput::Start");
     auto captureSession = GetSession();
-    if (captureSession == nullptr || !captureSession->IsSessionCommited()) {
-        MEDIA_ERR_LOG("PreviewOutput Failed to Start!, session not config");
-        return CameraErrorCode::SESSION_NOT_CONFIG;
-    }
-    if (GetStream() == nullptr) {
-        MEDIA_ERR_LOG("PreviewOutput Failed to Start!, GetStream is nullptr");
-        return CameraErrorCode::SERVICE_FATL_ERROR;
-    }
+    CHECK_ERROR_RETURN_RET_LOG(captureSession == nullptr || !captureSession->IsSessionCommited(),
+        CameraErrorCode::SESSION_NOT_CONFIG,
+        "PreviewOutput Failed to Start, session not commited");
+    CHECK_ERROR_RETURN_RET_LOG(GetStream() == nullptr,
+        CameraErrorCode::SERVICE_FATL_ERROR,
+        "PreviewOutput Failed to Start, GetStream is nullptr");
     auto itemStream = static_cast<IStreamRepeat*>(GetStream().GetRefPtr());
     int32_t errCode = CAMERA_UNKNOWN_ERROR;
     if (itemStream) {
@@ -356,10 +354,9 @@ int32_t PreviewOutput::EnableSketch(bool isEnable)
 int32_t PreviewOutput::AttachSketchSurface(sptr<Surface> sketchSurface)
 {
     auto captureSession = GetSession();
-    if (captureSession == nullptr || !captureSession->IsSessionCommited()) {
-        MEDIA_ERR_LOG("PreviewOutput AttachSketchSurface!, session not commited");
-        return CameraErrorCode::SESSION_NOT_CONFIG;
-    }
+    CHECK_ERROR_RETURN_RET_LOG(captureSession == nullptr || !captureSession->IsSessionCommited(),
+        CameraErrorCode::SESSION_NOT_CONFIG,
+        "PreviewOutput Failed to AttachSketchSurface, session not commited");
     if (sketchWrapper_ == nullptr) {
         return CameraErrorCode::INVALID_ARGUMENT;
     }
@@ -482,10 +479,9 @@ int32_t PreviewOutput::StartSketch()
     int32_t errCode = CAMERA_UNKNOWN_ERROR;
 
     auto captureSession = GetSession();
-    if (captureSession == nullptr || !captureSession->IsSessionCommited()) {
-        MEDIA_ERR_LOG("PreviewOutput Failed StartSketch!, session not commited");
-        return CameraErrorCode::SESSION_NOT_CONFIG;
-    }
+    CHECK_ERROR_RETURN_RET_LOG(captureSession == nullptr || !captureSession->IsSessionCommited(),
+        CameraErrorCode::SESSION_NOT_CONFIG,
+        "PreviewOutput Failed to StartSketch, session not commited");
     if (sketchWrapper_ != nullptr) {
         errCode = sketchWrapper_->StartSketchStream();
     }
@@ -497,11 +493,9 @@ int32_t PreviewOutput::StopSketch()
     int32_t errCode = CAMERA_UNKNOWN_ERROR;
 
     auto captureSession = GetSession();
-    if (captureSession == nullptr || !captureSession->IsSessionCommited()) {
-        MEDIA_ERR_LOG("PreviewOutput Failed StopSketch!, session not commited");
-        return CameraErrorCode::SESSION_NOT_CONFIG;
-    }
-
+    CHECK_ERROR_RETURN_RET_LOG(captureSession == nullptr || !captureSession->IsSessionCommited(),
+        CameraErrorCode::SESSION_NOT_CONFIG,
+        "PreviewOutput Failed to StopSketch, session not commited");
     if (sketchWrapper_ != nullptr) {
         errCode = sketchWrapper_->StopSketchStream();
     }
diff --git a/frameworks/native/camera/src/output/video_output.cpp b/frameworks/native/camera/src/output/video_output.cpp
index 43415f214..a2967264a 100644
--- a/frameworks/native/camera/src/output/video_output.cpp
+++ b/frameworks/native/camera/src/output/video_output.cpp
@@ -116,14 +116,12 @@ int32_t VideoOutput::Start()
     std::lock_guard<std::mutex> lock(asyncOpMutex_);
     MEDIA_DEBUG_LOG("Enter Into VideoOutput::Start");
     auto captureSession = GetSession();
-    if (captureSession == nullptr || !captureSession->IsSessionCommited()) {
-        MEDIA_ERR_LOG("VideoOutput Failed to Start!, session not config");
-        return CameraErrorCode::SESSION_NOT_CONFIG;
-    }
-    if (GetStream() == nullptr) {
-        MEDIA_ERR_LOG("VideoOutput Failed to Start!, GetStream is nullptr");
-        return CameraErrorCode::SERVICE_FATL_ERROR;
-    }
+    CHECK_ERROR_RETURN_RET_LOG(captureSession == nullptr || !captureSession->IsSessionCommited(),
+        CameraErrorCode::SESSION_NOT_CONFIG,
+        "VideoOutput Failed to Start, session not commited");
+    CHECK_ERROR_RETURN_RET_LOG(GetStream() == nullptr,
+        CameraErrorCode::SERVICE_FATL_ERROR,
+        "VideoOutput Failed to Start!, GetStream is nullptr");
     auto itemStream = static_cast<IStreamRepeat*>(GetStream().GetRefPtr());
     int32_t errCode = CAMERA_UNKNOWN_ERROR;
     if (itemStream) {
diff --git a/services/camera_service/include/camera_log.h b/services/camera_service/include/camera_log.h
index bcfd78d2f..98e0580fe 100644
--- a/services/camera_service/include/camera_log.h
+++ b/services/camera_service/include/camera_log.h
@@ -55,6 +55,14 @@
         }                                              \
     } while (0)
 
+#define CHECK_ERROR_RETURN_RET_LOG(cond, ret, fmt, ...)  \
+    do {                                                 \
+        if (cond) {                                      \
+            MEDIA_ERR_LOG(fmt, ##__VA_ARGS__);           \
+            return ret;                                  \
+        }                                                \
+    } while (0)
+
 #define CHECK_AND_RETURN_LOG(cond, fmt, ...)           \
     do {                                               \
         if (!(cond)) {                                 \
@@ -63,6 +71,14 @@
         }                                              \
     } while (0)
 
+#define CHECK_ERROR_RETURN_LOG(cond, fmt, ...)         \
+    do {                                               \
+        if (cond) {                                    \
+            MEDIA_ERR_LOG(fmt, ##__VA_ARGS__);         \
+            return;                                    \
+        }                                              \
+    } while (0)
+
 #define CHECK_AND_PRINT_LOG(cond, fmt, ...)            \
     do {                                               \
         if (!(cond)) {                                 \
@@ -70,6 +86,13 @@
         }                                              \
     } while (0)
 
+#define CHECK_ERROR_PRINT_LOG(cond, fmt, ...)          \
+    do {                                               \
+        if (cond) {                                 \
+            MEDIA_ERR_LOG(fmt, ##__VA_ARGS__);         \
+        }                                              \
+    } while (0)
+
 #define CHECK_AND_RETURN_RET(cond, ret)                \
     do {                                               \
         if (!(cond)) {                                 \
@@ -80,7 +103,7 @@
 #define CHECK_AND_BREAK_LOG(cond, fmt, ...)                                 \
     if (1) {                                                                \
         if (!(cond)) {                                                      \
-            MEDIA_WARNING_LOG(fmt, ##__VA_ARGS__);                               \
+            MEDIA_WARNING_LOG(fmt, ##__VA_ARGS__);                          \
             break;                                                          \
         }                                                                   \
     } else void (0)
@@ -88,7 +111,7 @@
 #define CHECK_AND_CONTINUE_LOG(cond, fmt, ...)                              \
     if (1) {                                                                \
         if (!(cond)) {                                                      \
-            MEDIA_WARNING_LOG(fmt, ##__VA_ARGS__);                               \
+            MEDIA_WARNING_LOG(fmt, ##__VA_ARGS__);                          \
             continue;                                                       \
         }                                                                   \
     } else void (0)
-- 
2.40.1.huawei.3

