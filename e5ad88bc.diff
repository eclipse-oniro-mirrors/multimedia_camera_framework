From e5ad88bcbd251f350301e57cddd0c2d7437297c7 Mon Sep 17 00:00:00 2001
From: z30014341 <zhoujing96@huawei.com>
Date: Fri, 13 Jun 2025 19:33:44 +0800
Subject: [PATCH] TicketNo:DTS2025060936373 Description: touch event reqMem
 when prelaunch Team:OTHERS Feature or Bugfix:Bugfix Binary Source: NA
 PrivateCode(Yes/No):No cherry picked from commit
 2c4056ab3652fd0ec0ee76600325407320379c51

Change-Id: Ifc4ba3a99d252450d8cc0bc1a845545e8f0252e1
---
 .../src/input/camera_manager_napi.cpp         | 18 ++++++++-
 .../camera/src/input/camera_manager.cpp       |  4 +-
 .../camera/include/input/camera_manager.h     |  2 +-
 .../binder/base/include/icamera_service.h     |  2 +-
 .../client/include/hcamera_service_proxy.h    |  2 +-
 .../client/src/hcamera_service_proxy.cpp      |  3 +-
 .../server/src/hcamera_service_stub.cpp       |  5 ++-
 .../camera_service/include/hcamera_service.h  |  4 +-
 .../camera_service/src/hcamera_service.cpp    | 37 ++++++++++++++++---
 9 files changed, 60 insertions(+), 17 deletions(-)

diff --git a/frameworks/js/camera_napi/src/input/camera_manager_napi.cpp b/frameworks/js/camera_napi/src/input/camera_manager_napi.cpp
index 0595032be1..cc61366995 100644
--- a/frameworks/js/camera_napi/src/input/camera_manager_napi.cpp
+++ b/frameworks/js/camera_napi/src/input/camera_manager_napi.cpp
@@ -1645,7 +1645,23 @@ napi_value CameraManagerNapi::PrelaunchCamera(napi_env env, napi_callback_info i
         return nullptr;
     }
     napi_value result = nullptr;
-    int32_t retCode = CameraManager::GetInstance()->PrelaunchCamera();
+    int32_t retCode = 0;
+    size_t napiArgsSize = CameraNapiUtils::GetNapiArgs(env, info);
+    if (napiArgsSize == 1) {
+        MEDIA_INFO_LOG("PrelaunchCamera arg 1");
+        size_t argc = ARGS_ONE;
+        napi_value argv[ARGS_ONE] = {0};
+        napi_value thisVar = nullptr;
+        CAMERA_NAPI_GET_JS_ARGS(env, info, argc, argv, thisVar);
+        int32_t value = 0;
+        napi_get_value_int32(env, argv[PARAM0], &value);
+        MEDIA_INFO_LOG("PrelaunchCamera value:%{public}d", value);
+        retCode = CameraManager::GetInstance()->PrelaunchCamera(value);
+    } else if (napiArgsSize == 0) {
+        MEDIA_INFO_LOG("PrelaunchCamera arg 0");
+        retCode = CameraManager::GetInstance()->PrelaunchCamera();
+    }
+    
     if (!CameraNapiUtils::CheckError(env, retCode)) {
         return result;
     }
diff --git a/frameworks/native/camera/src/input/camera_manager.cpp b/frameworks/native/camera/src/input/camera_manager.cpp
index ac5b0356ca..088c11d22d 100644
--- a/frameworks/native/camera/src/input/camera_manager.cpp
+++ b/frameworks/native/camera/src/input/camera_manager.cpp
@@ -2766,11 +2766,11 @@ int32_t CameraManager::MuteCameraPersist(PolicyType policyType, bool muteMode)
     return ServiceToCameraError(retCode);
 }
 
-int32_t CameraManager::PrelaunchCamera()
+int32_t CameraManager::PrelaunchCamera(int32_t flag)
 {
     auto serviceProxy = GetServiceProxy();
     CHECK_ERROR_RETURN_RET_LOG(serviceProxy == nullptr, SERVICE_FATL_ERROR, "PrelaunchCamera serviceProxy is null");
-    int32_t retCode = serviceProxy->PrelaunchCamera();
+    int32_t retCode = serviceProxy->PrelaunchCamera(flag);
     CHECK_ERROR_PRINT_LOG(retCode != CAMERA_OK, "PrelaunchCamera call failed, retCode: %{public}d", retCode);
     return ServiceToCameraError(retCode);
 }
diff --git a/interfaces/inner_api/native/camera/include/input/camera_manager.h b/interfaces/inner_api/native/camera/include/input/camera_manager.h
index 905ff7f430..2ff1acb84d 100644
--- a/interfaces/inner_api/native/camera/include/input/camera_manager.h
+++ b/interfaces/inner_api/native/camera/include/input/camera_manager.h
@@ -619,7 +619,7 @@ public:
      *
      * @return Server error code.
      */
-    int32_t PrelaunchCamera();
+    int32_t PrelaunchCamera(int32_t flag = -1);
 
     /**
      * @brief reset rss priority
diff --git a/services/camera_service/binder/base/include/icamera_service.h b/services/camera_service/binder/base/include/icamera_service.h
index b5d7c55e7c..fe643efedc 100644
--- a/services/camera_service/binder/base/include/icamera_service.h
+++ b/services/camera_service/binder/base/include/icamera_service.h
@@ -128,7 +128,7 @@ public:
 
     virtual int32_t MuteCameraPersist(PolicyType policyType, bool isMute) = 0;
 
-    virtual int32_t PrelaunchCamera() = 0;
+    virtual int32_t PrelaunchCamera(int32_t flag) = 0;
 
     virtual int32_t ResetRssPriority() = 0;
 
diff --git a/services/camera_service/binder/client/include/hcamera_service_proxy.h b/services/camera_service/binder/client/include/hcamera_service_proxy.h
index 4426af9029..22e64c1925 100644
--- a/services/camera_service/binder/client/include/hcamera_service_proxy.h
+++ b/services/camera_service/binder/client/include/hcamera_service_proxy.h
@@ -96,7 +96,7 @@ public:
 
     int32_t MuteCameraPersist(PolicyType policyType, bool isMute) override;
 
-    int32_t PrelaunchCamera() override;
+    int32_t PrelaunchCamera(int32_t flag) override;
 
     int32_t ResetRssPriority() override;
 
diff --git a/services/camera_service/binder/client/src/hcamera_service_proxy.cpp b/services/camera_service/binder/client/src/hcamera_service_proxy.cpp
index 3b1370c5b6..9c0c6873ce 100644
--- a/services/camera_service/binder/client/src/hcamera_service_proxy.cpp
+++ b/services/camera_service/binder/client/src/hcamera_service_proxy.cpp
@@ -583,13 +583,14 @@ int32_t HCameraServiceProxy::MuteCameraPersist(PolicyType policyType, bool muteM
     return error;
 }
 
-int32_t HCameraServiceProxy::PrelaunchCamera()
+int32_t HCameraServiceProxy::PrelaunchCamera(int32_t flag)
 {
     MessageParcel data;
     MessageParcel reply;
     MessageOption option;
 
     data.WriteInterfaceToken(GetDescriptor());
+    (void)data.WriteInt32(static_cast<int32_t>(flag));
     int error = Remote()->SendRequest(
         static_cast<uint32_t>(CameraServiceInterfaceCode::CAMERA_SERVICE_PRE_LAUNCH_CAMERA), data, reply, option);
     CHECK_ERROR_PRINT_LOG(error != ERR_NONE, "HCameraServiceProxy::PrelaunchCamera failed, error: %{public}d", error);
diff --git a/services/camera_service/binder/server/src/hcamera_service_stub.cpp b/services/camera_service/binder/server/src/hcamera_service_stub.cpp
index 9e6f19bfcb..d3b5202eb6 100644
--- a/services/camera_service/binder/server/src/hcamera_service_stub.cpp
+++ b/services/camera_service/binder/server/src/hcamera_service_stub.cpp
@@ -354,8 +354,9 @@ int HCameraServiceStub::HandlePrelaunchCamera(MessageParcel& data, MessageParcel
 {
     MEDIA_DEBUG_LOG("HCameraServiceStub HandlePrelaunchCamera enter");
     CHECK_ERROR_RETURN_RET(!CheckSystemApp(), CAMERA_NO_PERMISSION);
-
-    int32_t ret = PrelaunchCamera();
+    int32_t flag = data.ReadInt32();
+    MEDIA_INFO_LOG("HCameraServiceStub HandlePrelaunchCamera flag:%{public}d", flag);
+    int32_t ret = PrelaunchCamera(flag);
     MEDIA_INFO_LOG("HCameraServiceStub HandlePrelaunchCamera result: %{public}d", ret);
 
     return ret;
diff --git a/services/camera_service/include/hcamera_service.h b/services/camera_service/include/hcamera_service.h
index a53e61c2c0..1f8fda961f 100644
--- a/services/camera_service/include/hcamera_service.h
+++ b/services/camera_service/include/hcamera_service.h
@@ -131,7 +131,7 @@ public:
     int32_t UnSetFoldStatusCallback() override;
     int32_t MuteCamera(bool muteMode) override;
     int32_t MuteCameraPersist(PolicyType policyType, bool isMute) override;
-    int32_t PrelaunchCamera() override;
+    int32_t PrelaunchCamera(int32_t flag) override;
     int32_t ResetRssPriority() override;
     int32_t PreSwitchCamera(const std::string cameraId) override;
     int32_t SetPrelaunchConfig(string cameraId, RestoreParamTypeOhos restoreParamType, int activeTime,
@@ -192,7 +192,7 @@ private:
 #endif
 
 #ifdef MEMMGR_OVERRID
-    void RequireMemory();
+    void PrelaunchRequireMemory(int32_t flag);
 #endif
 
 #ifdef DEVICE_MANAGER
diff --git a/services/camera_service/src/hcamera_service.cpp b/services/camera_service/src/hcamera_service.cpp
index a0d37e7e37..e8d08af9b4 100644
--- a/services/camera_service/src/hcamera_service.cpp
+++ b/services/camera_service/src/hcamera_service.cpp
@@ -75,6 +75,10 @@ constexpr uint8_t POSITION_FOLD_INNER = 3;
 constexpr uint32_t ROOT_UID = 0;
 constexpr uint32_t FACE_CLIENT_UID = 1088;
 constexpr uint32_t RSS_UID = 1096;
+constexpr int32_t OLD_LAUNCH = -1;
+constexpr int32_t TOUCH_DOWN = 0;
+constexpr int32_t TOUCH_UP = 1;
+constexpr int32_t TOUCH_CANCEL = 2;
 static sptr<HCameraService> g_cameraServiceHolder = nullptr;
 static bool g_isFoldScreen = system::GetParameter("const.window.foldscreen.type", "") != "";
 
@@ -1340,10 +1344,18 @@ int32_t HCameraService::MuteCameraPersist(PolicyType policyType, bool isMute)
     return MuteCameraFunc(targetMuteMode);
 }
 
-int32_t HCameraService::PrelaunchCamera()
+int32_t HCameraService::PrelaunchCamera(int32_t flag)
 {
     CAMERA_SYNC_TRACE;
     MEDIA_INFO_LOG("HCameraService::PrelaunchCamera");
+    #ifdef MEMMGR_OVERRID
+        PrelaunchRequireMemory(flag);
+    #endif
+    // only touch up and no flag enable prelaunch
+    if ((flag != 1) && (flag != -1)) {
+        return CAMERA_OK;
+    }
+    MEDIA_INFO_LOG("HCameraService::PrelaunchCamera E");
     CHECK_ERROR_RETURN_RET_LOG(HCameraDeviceManager::GetInstance()->GetCameraStateOfASide().Size() != 0,
         CAMERA_DEVICE_CONFLICT, "HCameraService::PrelaunchCamera there is a device active in A side, abort!");
     if (preCameraId_.empty()) {
@@ -1374,9 +1386,6 @@ int32_t HCameraService::PrelaunchCamera()
     CameraReportUtils::GetInstance().SetOpenCamPerfPreInfo(preCameraId_.c_str(), CameraReportUtils::GetCallerInfo());
     int32_t ret = cameraHostManager_->Prelaunch(preCameraId_, preCameraClient_);
     CHECK_ERROR_PRINT_LOG(ret != CAMERA_OK, "HCameraService::Prelaunch failed");
-#ifdef MEMMGR_OVERRID
-    RequireMemory();
-#endif
     return ret;
 }
 
@@ -2298,12 +2307,28 @@ int32_t HCameraService::RequireMemorySize(int32_t requiredMemSizeKB)
 }
 
 #ifdef MEMMGR_OVERRID
-void HCameraService::RequireMemory()
+void HCameraService::PrelaunchRequireMemory(int32_t flag)
 {
     CAMERA_SYNC_TRACE;
     int32_t pid = getpid();
     int32_t requiredMemSizeKB = 0;
-    Memory::MemMgrClient::GetInstance().RequireBigMem(pid, Memory::CAMERA_PRELAUNCH, requiredMemSizeKB, SYSTEM_CAMERA);
+
+    if (flag == TOUCH_DOWN) {
+        // touch down
+        MEDIA_INFO_LOG("PrelaunchRequireMemory touch down");
+        Memory::MemMgrClient::GetInstance().RequireBigMem(
+            pid, Memory::CAMERA_TOUCH_DOWN, requiredMemSizeKB, SYSTEM_CAMERA);
+    } else if (flag == TOUCH_UP || flag == OLD_LAUNCH) {
+        // touch up
+        MEDIA_INFO_LOG("PrelaunchRequireMemory touch up");
+        Memory::MemMgrClient::GetInstance().RequireBigMem(
+            pid, Memory::CAMERA_PRELAUNCH, requiredMemSizeKB, SYSTEM_CAMERA);
+    } else if (flag == TOUCH_CANCEL) {
+        // touch cancel
+        MEDIA_INFO_LOG("PrelaunchRequireMemory touch cancel");
+        Memory::MemMgrClient::GetInstance().RequireBigMem(
+            pid, Memory::CAMERA_LAUNCH_CANCEL, requiredMemSizeKB, SYSTEM_CAMERA);
+    }
 }
 #endif
 
-- 
2.45.2.huawei.8

