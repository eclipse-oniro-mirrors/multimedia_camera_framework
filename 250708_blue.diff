diff --git a/bundle.json b/bundle.json
index ee32da83f..ef87cc803 100644
--- a/bundle.json
+++ b/bundle.json
@@ -180,6 +180,7 @@
             "//foundation/multimedia/camera_framework/frameworks/native/camera/test/moduletest:camera_deferred_photo_moduletest",
             "//foundation/multimedia/camera_framework/frameworks/native/camera/test/moduletest:camera_deferred_video_moduletest",
             "//foundation/multimedia/camera_framework/frameworks/native/camera/test/moduletest:camera_format_YUV_moduletest",
+            "//foundation/multimedia/camera_framework/frameworks/native/camera/test/moduletest:camera_photo_moduletest",
             "//foundation/multimedia/camera_framework/frameworks/native/camera/test/moduletest:camera_moving_photo_moduletest",
             "//foundation/multimedia/camera_framework/frameworks/native/camera/test/moduletest:camera_session_moduletest",
             "//foundation/multimedia/camera_framework/frameworks/native/camera/test/unittest/camera_deferred_unittest:camera_deferred_unittest",
diff --git a/frameworks/native/camera/test/BUILD.gn b/frameworks/native/camera/test/BUILD.gn
index 2ba3b33f3..032dbd32d 100644
--- a/frameworks/native/camera/test/BUILD.gn
+++ b/frameworks/native/camera/test/BUILD.gn
@@ -18,6 +18,7 @@ group("cameraframeworktest") {
     "moduletest:camera_deferred_photo_moduletest",
     "moduletest:camera_deferred_video_moduletest",
     "moduletest:camera_format_YUV_moduletest",
+    "moduletest:camera_photo_moduletest",
     "moduletest:camera_moving_photo_moduletest",
     "moduletest:camera_session_moduletest",
     "unittest/camera_common_utils_test",
diff --git a/frameworks/native/camera/test/moduletest/BUILD.gn b/frameworks/native/camera/test/moduletest/BUILD.gn
index 5ff5c570f..8ed1e6ef2 100644
--- a/frameworks/native/camera/test/moduletest/BUILD.gn
+++ b/frameworks/native/camera/test/moduletest/BUILD.gn
@@ -347,3 +347,58 @@ ohos_moduletest("camera_session_moduletest") {
     blocklist = "${multimedia_camera_framework_path}/cfi_blocklist.txt"
   }
 }
+
+ohos_moduletest("camera_photo_moduletest") {
+  module_out_path = module_output_path
+
+  include_dirs = [
+    "./camera_photo/include",
+    "${multimedia_camera_framework_path}/interfaces/inner_api/native/camera/include",
+    "${multimedia_camera_framework_path}/interfaces/inner_api/native/test",
+  ]
+
+  sources = [ "camera_photo/src/camera_photo_moduletest.cpp" ]
+
+  deps = [
+    "${multimedia_camera_framework_path}/frameworks/native/camera:camera_framework",
+    "${multimedia_camera_framework_path}/test/test_common:test_common",
+  ]
+
+  external_deps = [
+    "access_token:libaccesstoken_sdk",
+    "access_token:libnativetoken",
+    "access_token:libtoken_setproc",
+    "c_utils:utils",
+    "data_share:datashare_common",
+    "data_share:datashare_consumer",
+    "drivers_interface_camera:libcamera_proxy_1.0",
+    "drivers_interface_camera:libcamera_proxy_1.1",
+    "graphic_surface:surface",
+    "hilog:libhilog",
+    "hisysevent:libhisysevent",
+    "hitrace:hitrace_meter",
+    "image_framework:image",
+    "image_framework:image_native",
+    "image_framework:image_source",
+    "image_framework:ohimage",
+    "ipc:ipc_core",
+    "media_library:media_library",
+    "media_library:media_library_asset_manager",
+    "media_library:media_library_manager",
+    "media_library:native_media_asset_manager",
+    "napi:ace_napi",
+    "os_account:libaccountkits",
+    "os_account:os_account_innerkits",
+    "resource_management:librawfile",
+    "safwk:system_ability_fwk",
+  ]
+
+  cflags = [ "-fPIC" ]
+  cflags_cc = cflags
+  sanitize = {
+    cfi = true
+    cfi_cross_dso = true
+    debug = false
+    blocklist = "${multimedia_camera_framework_path}/cfi_blocklist.txt"
+  }
+}
diff --git a/frameworks/native/camera/test/moduletest/camera_photo/include/camera_photo_moduletest.h b/frameworks/native/camera/test/moduletest/camera_photo/include/camera_photo_moduletest.h
new file mode 100644
index 000000000..7b6b41cff
--- /dev/null
+++ b/frameworks/native/camera/test/moduletest/camera_photo/include/camera_photo_moduletest.h
@@ -0,0 +1,65 @@
+/*
+ * Copyright (c) 2025 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef CAMERA_PHOTO_MODULETEST_H
+#define CAMERA_PHOTO_MODULETEST_H
+
+#include <vector>
+
+#include "gtest/gtest.h"
+#include "input/camera_manager.h"
+
+
+namespace OHOS {
+namespace CameraStandard {
+const int32_t WAIT_TIME_AFTER_CAPTURE = 1;
+const int32_t WAIT_TIME_AFTER_START = 1;
+const int32_t WAIT_TIME_CALLBACK = 2;
+
+class CameraPhotoModuleTest : public testing::Test {
+public:
+    /* SetUpTestCase:The preset action of the test suite is executed before the first TestCase */
+    static void SetUpTestCase(void);
+
+    /* TearDownTestCase:The test suite cleanup action is executed after the last TestCase */
+    static void TearDownTestCase(void);
+
+    /* SetUp:Execute before each test case */
+    void SetUp();
+
+    /* TearDown:Execute after each test case */
+    void TearDown();
+
+protected:
+    void UpdataCameraOutputCapability(int32_t modeName = 0);
+    int32_t CreatePreviewOutput(Profile &profile, sptr<PreviewOutput> &previewOutput);
+    int32_t CreatePhotoOutputWithoutSurface(Profile &profile, sptr<PhotoOutput> &photoOutput);
+
+    uint8_t callbackFlag_ = 0;
+
+    sptr<CameraInput> input_;
+    std::vector<sptr<CameraDevice>> cameras_;
+    sptr<CameraManager> manager_;
+    sptr<CaptureSession> session_;
+
+    sptr<PreviewOutput> previewOutput_;
+    sptr<PhotoOutput> photoOutput_;
+    std::vector<Profile> previewProfile_ = {};
+    std::vector<Profile> photoProfile_ = {};
+};
+} // namespace CameraStandard
+} // namespace OHOS
+
+#endif // CAMERA_PHOTO_MODULETEST_H
diff --git a/frameworks/native/camera/test/moduletest/camera_photo/src/camera_photo_moduletest.cpp b/frameworks/native/camera/test/moduletest/camera_photo/src/camera_photo_moduletest.cpp
new file mode 100644
index 000000000..0cc49f337
--- /dev/null
+++ b/frameworks/native/camera/test/moduletest/camera_photo/src/camera_photo_moduletest.cpp
@@ -0,0 +1,151 @@
+/*
+ * Copyright (c) 2025 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "camera_photo_moduletest.h"
+#include "test_token.h"
+#include "camera_log.h"
+
+
+using namespace testing::ext;
+
+namespace OHOS {
+namespace CameraStandard {
+static std::mutex g_mutex;
+
+void CameraPhotoModuleTest::SetUpTestCase(void)
+{
+    MEDIA_DEBUG_LOG("CameraPhotoModuleTest::SetUpTestCase started!");
+    ASSERT_TRUE(TestToken::GetAllCameraPermission());
+}
+
+void CameraPhotoModuleTest::TearDownTestCase(void)
+{
+    MEDIA_DEBUG_LOG("CameraPhotoModuleTest::TearDownTestCase started!");
+}
+
+void CameraPhotoModuleTest::SetUp()
+{
+    MEDIA_INFO_LOG("CameraPhotoModuleTest::SetUp start!");
+
+    manager_ = CameraManager::GetInstance();
+    ASSERT_NE(manager_, nullptr);
+    cameras_ = manager_->GetSupportedCameras();
+    ASSERT_FALSE(cameras_.empty());
+    session_ = manager_->CreateCaptureSession(SceneMode::CAPTURE);
+    ASSERT_NE(session_, nullptr);
+    input_ = manager_->CreateCameraInput(cameras_[0]);
+    ASSERT_NE(input_, nullptr);
+    EXPECT_EQ(input_->Open(), SUCCESS);
+
+    UpdataCameraOutputCapability();
+    EXPECT_EQ(CreatePreviewOutput(previewProfile_[0], previewOutput_), SUCCESS);
+    EXPECT_EQ(CreatePhotoOutputWithoutSurface(photoProfile_[0], photoOutput_), SUCCESS);
+
+    MEDIA_INFO_LOG("CameraPhotoModuleTest::SetUp end!");
+}
+
+void CameraPhotoModuleTest::TearDown()
+{
+    MEDIA_INFO_LOG("CameraPhotoModuleTest::TearDown start!");
+
+    cameras_.clear();
+    photoProfile_.clear();
+    previewProfile_.clear();
+
+    photoOutput_->Release();
+    previewOutput_->Release();
+
+    manager_ = nullptr;
+    input_->Release();
+    session_->Release();
+
+    MEDIA_INFO_LOG("CameraPhotoModuleTest::TearDown end!");
+}
+
+void CameraPhotoModuleTest::UpdataCameraOutputCapability(int32_t modeName)
+{
+    if (!manager_ || cameras_.empty()) {
+        return;
+    }
+    auto outputCapability = manager_->GetSupportedOutputCapability(cameras_[0], modeName);
+    ASSERT_NE(outputCapability, nullptr);
+
+    previewProfile_ = outputCapability->GetPreviewProfiles();
+    ASSERT_FALSE(previewProfile_.empty());
+
+    photoProfile_ = outputCapability->GetPhotoProfiles();
+    ASSERT_FALSE(photoProfile_.empty());
+}
+
+int32_t CameraPhotoModuleTest::CreatePreviewOutput(Profile &profile, sptr<PreviewOutput> &previewOutput)
+{
+    sptr<Surface> surface = Surface::CreateSurfaceAsConsumer();
+    if (surface == nullptr) {
+        MEDIA_ERR_LOG("Failed to get previewOutput surface");
+        return INVALID_ARGUMENT;
+    }
+    surface->SetUserData(CameraManager::surfaceFormat, std::to_string(profile.GetCameraFormat()));
+    int32_t retCode = manager_->CreatePreviewOutput(profile, surface, &previewOutput);
+    if (retCode != CameraErrorCode::SUCCESS) {
+        return SERVICE_FATL_ERROR;
+    }
+    return SUCCESS;
+}
+
+int32_t CameraPhotoModuleTest::CreatePhotoOutputWithoutSurface(Profile &profile,
+    sptr<PhotoOutput> &photoOutput)
+{
+    int32_t retCode = manager_->CreatePhotoOutput(profile, &photoOutput_);
+    CHECK_ERROR_RETURN_RET_LOG((retCode != CameraErrorCode::SUCCESS || photoOutput_ == nullptr),
+        SERVICE_FATL_ERROR, "Create photo output failed");
+
+    photoOutput_->SetNativeSurface(true);
+    return SUCCESS;
+}
+
+/*
+ * Feature: Framework
+ * Function: Test create photo output without surface.
+ * SubFunction: NA
+ * FunctionPoints: NA
+ * EnvConditions: NA
+ * CaseDescription: Test create photo output without surface
+ * after submitting the camera settings,and expect the movingphoto feature can be turned on successfully.
+ */
+HWTEST_F(CameraPhotoModuleTest, camera_photo_moduletest_001, TestSize.Level0)
+{
+    EXPECT_EQ(session_->BeginConfig(), SUCCESS);
+    EXPECT_EQ(session_->AddInput((sptr<CaptureInput>&)input_), SUCCESS);
+    EXPECT_EQ(session_->AddOutput((sptr<CaptureOutput>&)previewOutput_), SUCCESS);
+    EXPECT_EQ(session_->AddOutput((sptr<CaptureOutput>&)photoOutput_), SUCCESS);
+    callbackFlag_ = 0;
+    if (photoOutput_->IsQuickThumbnailSupported()) {
+        std::cout << "support thumbnail!" << std::endl;
+        EXPECT_EQ(photoOutput_->SetThumbnail(true), SUCCESS);
+    } else {
+        std::cout << "not support thumbnail!" << std::endl;
+    }
+
+    EXPECT_EQ(session_->CommitConfig(), SUCCESS);
+    EXPECT_EQ(session_->Start(), SUCCESS);
+    sleep(WAIT_TIME_AFTER_START);
+
+    EXPECT_EQ(photoOutput_->Capture(), SUCCESS);
+    sleep(WAIT_TIME_AFTER_CAPTURE);
+
+    EXPECT_EQ(session_->Stop(), SUCCESS);
+}
+}  // namespace CameraStandard
+}  // namespace OHOS
diff --git a/test/fuzztest/hstreamcapturestub_fuzzer/hstream_capture_stub_fuzzer.h b/test/fuzztest/hstreamcapturestub_fuzzer/hstream_capture_stub_fuzzer.h
index ac60a0dd6..8ca0fdf20 100644
--- a/test/fuzztest/hstreamcapturestub_fuzzer/hstream_capture_stub_fuzzer.h
+++ b/test/fuzztest/hstreamcapturestub_fuzzer/hstream_capture_stub_fuzzer.h
@@ -107,6 +107,18 @@ public:
     {
         return 0;
     }
+    int32_t UnSetPhotoAvailableCallback() override
+    {
+        return 0;
+    }
+    int32_t UnSetPhotoAssetAvailableCallback() override
+    {
+        return 0;
+    }
+    int32_t UnSetThumbnailCallback() override
+    {
+        return 0;
+    }
 };
 class HStreamCaptureStubFuzzer {
 public:
