diff --git a/bundle.json b/bundle.json
index 79cedd39..4e57855b 100644
--- a/bundle.json
+++ b/bundle.json
@@ -44,6 +44,7 @@
               "safwk",
               "samgr",
               "sensor",
+              "thermal_manager",
               "window_manager",
               "memmgr",
               "memmgr_plugin"
diff --git a/services/camera_service/src/hcamera_service.cpp b/services/camera_service/src/hcamera_service.cpp
index 0e59e080..d84e5f0d 100644
--- a/services/camera_service/src/hcamera_service.cpp
+++ b/services/camera_service/src/hcamera_service.cpp
@@ -1254,7 +1254,6 @@ int32_t HCameraService::SaveCurrentParamForRestore(std::string cameraId, Restore
 std::shared_ptr<OHOS::Camera::CameraMetadata> HCameraService::CreateDefaultSettingForRestore(
     sptr<HCameraDevice> activeDevice)
 {
-    MEDIA_DEBUG_LOG("HCameraService::CreateDefaultSettingForRestore enter");
     constexpr int32_t DEFAULT_ITEMS = 1;
     constexpr int32_t DEFAULT_DATA_LENGTH = 1;
     auto defaultSettings = std::make_shared<OHOS::Camera::CameraMetadata>(DEFAULT_ITEMS, DEFAULT_DATA_LENGTH);
@@ -1284,7 +1283,6 @@ std::shared_ptr<OHOS::Camera::CameraMetadata> HCameraService::CreateDefaultSetti
     }
     
     ret = OHOS::Camera::FindCameraMetadataItem(currentSetting->get(), OHOS_CONTROL_DEFERRED_IMAGE_DELIVERY, &item);
-    MEDIA_DEBUG_LOG("CreateDefaultSettingForRestore ret: %{public}d", ret);
     if (ret == CAM_META_SUCCESS) {
         uint8_t deferredType = item.data.u8[0];
         defaultSettings->addEntry(OHOS_CONTROL_DEFERRED_IMAGE_DELIVERY, &deferredType, count);
@@ -1301,6 +1299,12 @@ std::shared_ptr<OHOS::Camera::CameraMetadata> HCameraService::CreateDefaultSetti
         uint8_t effect = item.data.u8[0];
         defaultSettings->addEntry(OHOS_CONTROL_PORTRAIT_EFFECT_TYPE, &effect, count);
     }
+
+    ret = OHOS::Camera::FindCameraMetadataItem(currentSetting->get(), OHOS_CONTROL_FILTER_TYPE, &item);
+    if (ret == CAM_META_SUCCESS) {
+        uint8_t filterValue = item.data.u8[0];
+        defaultSettings->addEntry(OHOS_CONTROL_FILTER_TYPE, &filterValue, count);
+    }
     return defaultSettings;
 }
 
diff --git a/services/deferred_processing_service/BUILD.gn b/services/deferred_processing_service/BUILD.gn
index b27e8812..6df7eb6a 100644
--- a/services/deferred_processing_service/BUILD.gn
+++ b/services/deferred_processing_service/BUILD.gn
@@ -9,7 +9,7 @@
 # distributed under the License is distributed on an "AS IS" BASIS,
 # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 # See the License for the specific language governing permissions and
-# limitations under the License.
+# limitations under the License.
 
 import("//build/ohos.gni")
 import("./../../multimedia_camera_framework.gni")
@@ -114,6 +114,7 @@ ohos_shared_library("deferred_processing_service") {
     "ipc:ipc_single",
     "safwk:system_ability_fwk",
     "samgr:samgr_proxy",
+    "thermal_manager:thermalsrv_client",
     "window_manager:libdm",
   ]
 
diff --git a/services/deferred_processing_service/include/dfx/dps_event_report.h b/services/deferred_processing_service/include/dfx/dps_event_report.h
index 637153e3..45fb1eec 100644
--- a/services/deferred_processing_service/include/dfx/dps_event_report.h
+++ b/services/deferred_processing_service/include/dfx/dps_event_report.h
@@ -101,85 +101,20 @@ public:
     void SetTemperatureLevel(int temperatureLevel);
     void SetExecutionMode(ExecutionMode executionMode);
     void SetEventType(EventType eventType_);
+    void UpdateEventInfo(DPSEventInfo& dpsEventInfo);
+    void UpdateProcessDoneTime(const std::string& imageId, int32_t userId);
+    void UpdateRemoveTime(const std::string& imageId, int32_t userId);
 
 private:
     DPSEventInfo GetEventInfo(const std::string& imageId, int32_t userId);
-    static void UpdateOperatorStage(DPSEventInfo& dpsEventInfo, std::any value);
-    static void UpdateDiscardable(DPSEventInfo& dpsEventInfo, std::any value);
-    static void UpdateTriggerMode(DPSEventInfo& dpsEventInfo, std::any value);
-    static void UpdateHighJobNum(DPSEventInfo& dpsEventInfo, std::any value);
-    static void UpdateNormalJobNum(DPSEventInfo& dpsEventInfo, std::any value);
-    static void UpdateLowJobNum(DPSEventInfo& dpsEventInfo, std::any value);
-    static void UpdateTemperatureLevel(DPSEventInfo& dpsEventInfo, std::any value);
-    static void UpdateSynchronizeTime(DPSEventInfo& dpsEventInfo, std::any value);
-    static void UpdateDispatchTime(DPSEventInfo& dpsEventInfo, std::any value);
-    static void UpdateProcessTime(DPSEventInfo& dpsEventInfo, std::any value);
-    static void UpdateImageDoneTime(DPSEventInfo& dpsEventInfo, std::any value);
-    static void UpdateRestoreTime(DPSEventInfo& dpsEventInfo, std::any value);
-    static void UpdateRemoveTime(DPSEventInfo& dpsEventInfo, std::any value);
-    static void UpdateTrailingTime(DPSEventInfo& dpsEventInfo, std::any value);
-    static void UpdatePhotoJobType(DPSEventInfo& dpsEventInfo, std::any value);
-    static void UpdateExcutionMode(DPSEventInfo& dpsEventInfo, std::any value);
-    static void UpdateChangeReason(DPSEventInfo& dpsEventInfo, std::any value);
-    static void UpdateExceptionSource(DPSEventInfo& dpsEventInfo, std::any value);
-    static void UpdateExceptionCause(DPSEventInfo& dpsEventInfo, std::any value);
-    std::unordered_map<std::string,
-    void (*)(DPSEventInfo& dpsEventInfo, std::any value)> sysEventFuncMap_ = {
-        {EVENT_KEY_DEFEVENTTYPE, [](DPSEventInfo& dpsEventInfo, std::any value) {
-            UpdateOperatorStage(dpsEventInfo, value);
-        }},
-        {EVENT_KEY_DISCARDABLE, [](DPSEventInfo& dpsEventInfo, std::any value) {
-            UpdateDiscardable(dpsEventInfo, value);
-        }},
-        {EVENT_KEY_TRIGGERMODE, [](DPSEventInfo& dpsEventInfo, std::any value) {
-            UpdateTriggerMode(dpsEventInfo, value);
-        }},
-        {EVENT_KEY_NORMALJOBNUM, [](DPSEventInfo& dpsEventInfo, std::any value) {
-            UpdateNormalJobNum(dpsEventInfo, value);
-        }},
-        {EVENT_KEY_LOWJOBNUM, [](DPSEventInfo& dpsEventInfo, std::any value) {
-            UpdateLowJobNum(dpsEventInfo, value);
-        }},
-        {EVENT_KEY_TEMPERATURELEVEL, [](DPSEventInfo& dpsEventInfo, std::any value) {
-            UpdateTemperatureLevel(dpsEventInfo, value);
-        }},
-        {EVENT_KEY_SYNCHRONIZETIME, [](DPSEventInfo& dpsEventInfo, std::any value) {
-            UpdateSynchronizeTime(dpsEventInfo, value);
-        }},
-        {EVENT_KEY_DISPATCHTIME, [](DPSEventInfo& dpsEventInfo, std::any value) {
-            UpdateDispatchTime(dpsEventInfo, value);
-        }},
-        {EVENT_KEY_PROCESSTIME, [](DPSEventInfo& dpsEventInfo, std::any value) {
-            UpdateProcessTime(dpsEventInfo, value);
-        }},
-        {EVENT_KEY_IMAGEDONETIME, [](DPSEventInfo& dpsEventInfo, std::any value) {
-            UpdateImageDoneTime(dpsEventInfo, value);
-        }},
-        {EVENT_KEY_RESTORETIME, [](DPSEventInfo& dpsEventInfo, std::any value) {
-            UpdateRestoreTime(dpsEventInfo, value);
-        }},
-        {EVENT_KEY_REMOVETIME, [](DPSEventInfo& dpsEventInfo, std::any value) {
-            UpdateRemoveTime(dpsEventInfo, value);
-        }},
-        {EVENT_KEY_TRAILINGTIME, [](DPSEventInfo& dpsEventInfo, std::any value) {
-            UpdateTrailingTime(dpsEventInfo, value);
-        }},
-        {EVENT_KEY_PHOTOJOBTYPE, [](DPSEventInfo& dpsEventInfo, std::any value) {
-            UpdatePhotoJobType(dpsEventInfo, value);
-        }},
-        {EVENT_KEY_EXCUTIONMODE,  [](DPSEventInfo& dpsEventInfo, std::any value) {
-            UpdateExcutionMode(dpsEventInfo, value);
-        }},
-        {EVENT_KEY_CHANGEREASON, [](DPSEventInfo& dpsEventInfo, std::any value) {
-            UpdateChangeReason(dpsEventInfo, value);
-        }},
-        {EVENT_KEY_EXCEPTIONSOURCE, [](DPSEventInfo& dpsEventInfo, std::any value) {
-            UpdateExceptionSource(dpsEventInfo, value);
-        }},
-        {EVENT_KEY_EXCEPTIONCAUSE, [](DPSEventInfo& dpsEventInfo, std::any value) {
-            UpdateExceptionCause(dpsEventInfo, value);
-        }},
-    };
+    void UpdateSynchronizeTime(DPSEventInfo& dpsEventInfo, DPSEventInfo& dpsEventInfoSrc);
+    void UpdateDispatchTime(DPSEventInfo& dpsEventInfo, DPSEventInfo& dpsEventInfoSrc);
+    void UpdateProcessTime(DPSEventInfo& dpsEventInfo, DPSEventInfo& dpsEventInfoSrc);
+    void UpdateImageDoneTime(DPSEventInfo& dpsEventInfo, DPSEventInfo& dpsEventInfoSrc);
+    void UpdateRestoreTime(DPSEventInfo& dpsEventInfo, DPSEventInfo& dpsEventInfoSrc);
+    void UpdateRemoveTime(DPSEventInfo& dpsEventInfo, DPSEventInfo& dpsEventInfoSrc);
+    void UpdateTrailingTime(DPSEventInfo& dpsEventInfo, DPSEventInfo& dpsEventInfoSrc);
+    int GetTotalTime (uint64_t beginTime, uint64_t endTime);
     std::mutex mutex_;
     std::map<int32_t, std::map<std::string, DPSEventInfo>> userIdToImageIdEventInfo; //userid--imageid--eventinfo
     ExecutionMode executionMode_;
diff --git a/services/deferred_processing_service/include/event_monitor/events_monitor.h b/services/deferred_processing_service/include/event_monitor/events_monitor.h
index 98ee607c..f13f9f31 100644
--- a/services/deferred_processing_service/include/event_monitor/events_monitor.h
+++ b/services/deferred_processing_service/include/event_monitor/events_monitor.h
@@ -24,6 +24,7 @@
 #include "task_manager.h"
 #include "common_event_manager.h"
 #include "common_event_support.h"
+#include "ithermal_srv.h"
 
 namespace OHOS {
 namespace CameraStandard {
@@ -72,6 +73,7 @@ private:
     sptr<IRemoteObject::DeathRecipient> deathRecipient_ {nullptr};
     std::shared_ptr<ThermalLevelSubscriber> thermalLevelSubscriber_ = nullptr;
     std::mutex thermalEventMutex;
+    sptr<OHOS::PowerMgr::IThermalSrv> thermalSrv_ {nullptr};
 };
 }
 } // namespace CameraStandard
diff --git a/services/deferred_processing_service/src/dfx/dps_event_report.cpp b/services/deferred_processing_service/src/dfx/dps_event_report.cpp
index 1a115723..2a043fb7 100644
--- a/services/deferred_processing_service/src/dfx/dps_event_report.cpp
+++ b/services/deferred_processing_service/src/dfx/dps_event_report.cpp
@@ -16,6 +16,7 @@
 #include "dps_event_report.h"
 #include "hisysevent.h"
 #include "dp_log.h"
+#include "steady_clock.h"
 
 namespace OHOS {
 namespace CameraStandard {
@@ -24,7 +25,7 @@ static constexpr char CAMERA_FWK_UE[] = "CAMERA_FWK_UE";
 void DPSEventReport::ReportOperateImage(const std::string& imageId, int32_t userId, DPSEventInfo& dpsEventInfo)
 {
     DP_DEBUG_LOG("ReportOperateImage enter.");
-    SetEventInfo(dpsEventInfo);
+    UpdateEventInfo(dpsEventInfo);
     HiSysEventWrite(
         CAMERA_FWK_UE,
         "DPS_IMAGE_OPERATE",
@@ -44,7 +45,7 @@ void DPSEventReport::ReportImageProcessResult(const std::string& imageId, int32_
 {
     DP_DEBUG_LOG("ReportImageProcessResult enter.");
     DPSEventInfo dpsEventInfo = GetEventInfo(imageId, userId);
-    if (endTime != 0) {
+    if (endTime > 0) {
         dpsEventInfo.imageDoneTimeEndTime = endTime;
     }
     HiSysEventWrite(
@@ -53,13 +54,14 @@ void DPSEventReport::ReportImageProcessResult(const std::string& imageId, int32_
         HiviewDFX::HiSysEvent::EventType::BEHAVIOR,
         EVENT_KEY_IMAGEID, dpsEventInfo.imageId,
         EVENT_KEY_USERID, dpsEventInfo.userId,
-        EVENT_KEY_SYNCHRONIZETIME, (dpsEventInfo.synchronizeTimeEndTime - dpsEventInfo.synchronizeTimeBeginTime),
-        EVENT_KEY_DISPATCHTIME, (dpsEventInfo.dispatchTimeEndTime - dpsEventInfo.dispatchTimeBeginTime),
-        EVENT_KEY_PROCESSTIME, (dpsEventInfo.processTimeEndTime - dpsEventInfo.processTimeBeginTime),
-        EVENT_KEY_IMAGEDONETIME, (dpsEventInfo.imageDoneTimeEndTime - dpsEventInfo.imageDoneTimeBeginTime),
-        EVENT_KEY_RESTORETIME, (dpsEventInfo.restoreTimeEndTime - dpsEventInfo.restoreTimeBeginTime),
-        EVENT_KEY_REMOVETIME, (dpsEventInfo.removeTimeEndTime - dpsEventInfo.removeTimeBeginTime),
-        EVENT_KEY_TRAILINGTIME, (dpsEventInfo.trailingTimeEndTime - dpsEventInfo.trailingTimeBeginTime),
+        EVENT_KEY_SYNCHRONIZETIME, GetTotalTime(dpsEventInfo.synchronizeTimeBeginTime,
+            dpsEventInfo.synchronizeTimeEndTime),
+        EVENT_KEY_DISPATCHTIME, GetTotalTime(dpsEventInfo.dispatchTimeBeginTime, dpsEventInfo.dispatchTimeEndTime),
+        EVENT_KEY_PROCESSTIME, GetTotalTime(dpsEventInfo.processTimeBeginTime, dpsEventInfo.processTimeEndTime),
+        EVENT_KEY_IMAGEDONETIME, GetTotalTime(dpsEventInfo.imageDoneTimeBeginTime, dpsEventInfo.imageDoneTimeEndTime),
+        EVENT_KEY_RESTORETIME, GetTotalTime(dpsEventInfo.restoreTimeBeginTime, dpsEventInfo.restoreTimeEndTime),
+        EVENT_KEY_REMOVETIME, GetTotalTime(dpsEventInfo.removeTimeBeginTime, dpsEventInfo.removeTimeEndTime),
+        EVENT_KEY_TRAILINGTIME, GetTotalTime(dpsEventInfo.trailingTimeBeginTime, dpsEventInfo.trailingTimeEndTime),
         EVENT_KEY_PHOTOJOBTYPE, static_cast<int32_t>(dpsEventInfo.photoJobType),
         EVENT_KEY_HIGHJOBNUM, dpsEventInfo.highJobNum,
         EVENT_KEY_NORMALJOBNUM, dpsEventInfo.normalJobNum,
@@ -68,6 +70,15 @@ void DPSEventReport::ReportImageProcessResult(const std::string& imageId, int32_
     RemoveEventInfo(imageId, userId);
 }
 
+int DPSEventReport::GetTotalTime (uint64_t beginTime, uint64_t endTime)
+{
+    if (beginTime < endTime)
+    {
+        return endTime - beginTime;
+    }
+    return 0;
+}
+
 void DPSEventReport::ReportImageModeChange(ExecutionMode executionMode)
 {
     DP_INFO_LOG("ReportImageModeChange enter.");
@@ -149,23 +160,29 @@ void DPSEventReport::SetEventInfo(DPSEventInfo& dpsEventInfo)
     }
 }
 
-void DPSEventReport::UpdateJobProperty(const std::string& imageId, int32_t userId, bool discardable,
-    PhotoJobType photoJobType, TrigerMode triggermode)
+void DPSEventReport::UpdateEventInfo(DPSEventInfo& dpsEventInfo)
 {
     std::unique_lock<std::mutex> lock(mutex_);
-    auto imageIdToEventInfo = userIdToImageIdEventInfo.find(userId);
-    if (imageIdToEventInfo != userIdToImageIdEventInfo.end()) {
-        std::map<std::string, DPSEventInfo>::iterator iter = (userIdToImageIdEventInfo[userId]).begin();
-        while (iter != (userIdToImageIdEventInfo[userId]).end()) {
-            if ((iter->second).imageId == imageId) {
-                UpdateDiscardable(iter->second, discardable);
-                UpdatePhotoJobType(iter->second, discardable);
-                UpdateTriggerMode(iter->second, discardable);
-                break;
-            }
-            iter++;
-        }
+    auto imageIdToEventInfoTemp = userIdToImageIdEventInfo.find(dpsEventInfo.userId);
+    DP_INFO_LOG("dpsEventInfo.dispatchTime befor begin %d, end %d userId %d",
+                static_cast<int>(dpsEventInfo.processTimeBeginTime), static_cast<int>(dpsEventInfo.processTimeEndTime), dpsEventInfo.userId);
+    if (imageIdToEventInfoTemp == userIdToImageIdEventInfo.end()) {
+        std::map<std::string, DPSEventInfo> imageIdToEventInfo;
+        imageIdToEventInfo[dpsEventInfo.imageId] = dpsEventInfo;
+        userIdToImageIdEventInfo[dpsEventInfo.userId] = imageIdToEventInfo;
+        return;
     }
+    DPSEventInfo dpsEventInfoTemp = (imageIdToEventInfoTemp->second)[dpsEventInfo.imageId];
+    UpdateDispatchTime(dpsEventInfo, dpsEventInfoTemp);
+    UpdateProcessTime(dpsEventInfo, dpsEventInfoTemp);
+    UpdateRestoreTime(dpsEventInfo, dpsEventInfoTemp);
+    UpdateImageDoneTime(dpsEventInfo, dpsEventInfoTemp);
+    UpdateRemoveTime(dpsEventInfo, dpsEventInfoTemp);
+    UpdateTrailingTime(dpsEventInfo, dpsEventInfoTemp);
+    UpdateSynchronizeTime(dpsEventInfo, dpsEventInfoTemp);
+    DP_INFO_LOG("dpsEventInfo.dispatchTime after begin %d, end %d",
+                static_cast<int>(dpsEventInfo.processTimeBeginTime), static_cast<int>(dpsEventInfo.processTimeEndTime));
+    (imageIdToEventInfoTemp->second)[dpsEventInfo.imageId] = dpsEventInfo;
 }
 
 void DPSEventReport::SetTemperatureLevel(int temperatureLevel)
@@ -219,99 +236,95 @@ void DPSEventReport::RemoveEventInfo(const std::string& imageId, int32_t userId)
     return;
 }
 
-void DPSEventReport::UpdateOperatorStage(DPSEventInfo& dpsEventInfo, std::any value)
-{
-    dpsEventInfo.operatorStage = std::any_cast<DeferredProcessingServiceInterfaceCode>(value);
-}
-
-void DPSEventReport::UpdateDiscardable(DPSEventInfo& dpsEventInfo, std::any value)
-{
-    dpsEventInfo.discardable = std::any_cast<bool>(value);
-}
-
-void DPSEventReport::UpdateTriggerMode(DPSEventInfo& dpsEventInfo, std::any value)
-{
-    dpsEventInfo.triggerMode = std::any_cast<TrigerMode>(value);
-}
-
-void DPSEventReport::UpdateHighJobNum(DPSEventInfo& dpsEventInfo, std::any value)
-{
-    dpsEventInfo.highJobNum = std::any_cast<int>(value);
-}
-
-void DPSEventReport::UpdateNormalJobNum(DPSEventInfo& dpsEventInfo, std::any value)
-{
-    dpsEventInfo.normalJobNum = std::any_cast<int>(value);
-}
-
-void DPSEventReport::UpdateLowJobNum(DPSEventInfo& dpsEventInfo, std::any value)
-{
-    dpsEventInfo.lowJobNum = std::any_cast<int>(value);
-}
-
-void DPSEventReport::UpdateTemperatureLevel(DPSEventInfo& dpsEventInfo, std::any value)
+void DPSEventReport::UpdateProcessDoneTime(const std::string& imageId, int32_t userId)
 {
-    dpsEventInfo.temperatureLevel = std::any_cast<int>(value);
-}
-
-void DPSEventReport::UpdateSynchronizeTime(DPSEventInfo& dpsEventInfo, std::any value)
-{
-    dpsEventInfo.synchronizeTimeEndTime = std::any_cast<int64_t>(value);
-}
-
-void DPSEventReport::UpdateDispatchTime(DPSEventInfo& dpsEventInfo, std::any value)
-{
-    dpsEventInfo.dispatchTimeEndTime  = std::any_cast<int64_t>(value);
-}
-
-void DPSEventReport::UpdateProcessTime(DPSEventInfo& dpsEventInfo, std::any value)
-{
-    dpsEventInfo.processTimeEndTime = std::any_cast<int64_t>(value);
-}
-
-void DPSEventReport::UpdateImageDoneTime(DPSEventInfo& dpsEventInfo, std::any value)
-{
-    dpsEventInfo.imageDoneTimeEndTime = std::any_cast<int64_t>(value);
+    std::unique_lock<std::mutex> lock(mutex_);
+    auto imageIdToEventInfoTemp = userIdToImageIdEventInfo.find(userId);
+    if (imageIdToEventInfoTemp != userIdToImageIdEventInfo.end()) {
+        uint64_t currentTime = SteadyClock::GetTimestampMilli();
+        (imageIdToEventInfoTemp->second)[imageId].imageDoneTimeBeginTime = currentTime;
+        (imageIdToEventInfoTemp->second)[imageId].processTimeEndTime = currentTime;
+    }
 }
 
-void DPSEventReport::UpdateRestoreTime(DPSEventInfo& dpsEventInfo, std::any value)
+void DPSEventReport::UpdateSynchronizeTime(DPSEventInfo& dpsEventInfo, DPSEventInfo& dpsEventInfoSrc)
 {
-    dpsEventInfo.restoreTimeEndTime = std::any_cast<int64_t>(value);
+    if (dpsEventInfoSrc.synchronizeTimeEndTime > 0) {
+        dpsEventInfo.synchronizeTimeEndTime = dpsEventInfoSrc.synchronizeTimeEndTime;
+    }
+    if (dpsEventInfoSrc.synchronizeTimeBeginTime > 0) {
+        dpsEventInfo.synchronizeTimeBeginTime = dpsEventInfoSrc.synchronizeTimeBeginTime;
+    }
 }
 
-void DPSEventReport::UpdateRemoveTime(DPSEventInfo& dpsEventInfo, std::any value)
+void DPSEventReport::UpdateDispatchTime(DPSEventInfo& dpsEventInfo, DPSEventInfo& dpsEventInfoSrc)
 {
-    dpsEventInfo.removeTimeEndTime = std::any_cast<int64_t>(value);
+    if (dpsEventInfoSrc.dispatchTimeBeginTime > 0) {
+        dpsEventInfo.dispatchTimeBeginTime = dpsEventInfoSrc.dispatchTimeBeginTime;
+    }
+    if (dpsEventInfoSrc.dispatchTimeEndTime > 0) {
+        dpsEventInfo.dispatchTimeEndTime = dpsEventInfoSrc.dispatchTimeEndTime;
+    }
 }
 
-void DPSEventReport::UpdateTrailingTime(DPSEventInfo& dpsEventInfo, std::any value)
+void DPSEventReport::UpdateProcessTime(DPSEventInfo& dpsEventInfo, DPSEventInfo& dpsEventInfoSrc)
 {
-    dpsEventInfo.trailingTimeEndTime = std::any_cast<int64_t>(value);
+    if (dpsEventInfoSrc.processTimeBeginTime > 0) {
+        dpsEventInfo.processTimeBeginTime = dpsEventInfoSrc.processTimeBeginTime;
+    }
+    if (dpsEventInfoSrc.processTimeEndTime > 0) {
+        dpsEventInfo.processTimeEndTime = dpsEventInfoSrc.processTimeEndTime;
+    }
 }
 
-void DPSEventReport::UpdatePhotoJobType(DPSEventInfo& dpsEventInfo, std::any value)
+void DPSEventReport::UpdateImageDoneTime(DPSEventInfo& dpsEventInfo, DPSEventInfo& dpsEventInfoSrc)
 {
-    dpsEventInfo.photoJobType = std::any_cast<PhotoJobType>(value);
+    if (dpsEventInfoSrc.imageDoneTimeBeginTime > 0) {
+        dpsEventInfo.imageDoneTimeBeginTime = dpsEventInfoSrc.imageDoneTimeBeginTime;
+    }
+    if (dpsEventInfoSrc.imageDoneTimeEndTime > 0) {
+        dpsEventInfo.imageDoneTimeEndTime = dpsEventInfoSrc.imageDoneTimeEndTime;
+    }
 }
 
-void DPSEventReport::UpdateExcutionMode(DPSEventInfo& dpsEventInfo, std::any value)
+void DPSEventReport::UpdateRestoreTime(DPSEventInfo& dpsEventInfo, DPSEventInfo& dpsEventInfoSrc)
 {
-    dpsEventInfo.executionMode = std::any_cast<ExecutionMode>(value);
+    if (dpsEventInfoSrc.restoreTimeBeginTime > 0) {
+        dpsEventInfo.restoreTimeBeginTime = dpsEventInfoSrc.restoreTimeBeginTime;
+    }
+    if (dpsEventInfoSrc.restoreTimeEndTime > 0) {
+        dpsEventInfo.restoreTimeEndTime = dpsEventInfoSrc.restoreTimeEndTime;
+    }
 }
 
-void DPSEventReport::UpdateChangeReason(DPSEventInfo& dpsEventInfo, std::any value)
+void DPSEventReport::UpdateRemoveTime(const std::string& imageId, int32_t userId)
 {
-    dpsEventInfo.changeReason = std::any_cast<EventType>(value);
+    auto imageIdToEventInfoTemp = userIdToImageIdEventInfo.find(userId);
+    if (imageIdToEventInfoTemp != userIdToImageIdEventInfo.end()) {
+        uint64_t currentTime = SteadyClock::GetTimestampMilli();
+        (imageIdToEventInfoTemp->second)[imageId].removeTimeEndTime = currentTime;
+        ReportImageProcessResult(imageId, userId);
+    }
 }
 
-void DPSEventReport::UpdateExceptionSource(DPSEventInfo& dpsEventInfo, std::any value)
+void DPSEventReport::UpdateRemoveTime(DPSEventInfo& dpsEventInfo, DPSEventInfo& dpsEventInfoSrc)
 {
-    dpsEventInfo.exceptionSource = std::any_cast<ExceptionSource>(value);
+    if (dpsEventInfoSrc.removeTimeBeginTime > 0) {
+        dpsEventInfo.removeTimeBeginTime = dpsEventInfoSrc.removeTimeBeginTime;
+    }
+    if (dpsEventInfoSrc.removeTimeEndTime > 0) {
+        dpsEventInfo.removeTimeEndTime = dpsEventInfoSrc.removeTimeEndTime;
+    }
 }
 
-void DPSEventReport::UpdateExceptionCause(DPSEventInfo& dpsEventInfo, std::any value)
+void DPSEventReport::UpdateTrailingTime(DPSEventInfo& dpsEventInfo, DPSEventInfo& dpsEventInfoSrc)
 {
-    dpsEventInfo.exceptionCause = std::any_cast<ExceptionCause>(value);
+    if (dpsEventInfoSrc.trailingTimeBeginTime > 0) {
+        dpsEventInfo.trailingTimeBeginTime = dpsEventInfoSrc.trailingTimeBeginTime;
+    }
+    if (dpsEventInfoSrc.trailingTimeEndTime > 0) {
+        dpsEventInfo.trailingTimeEndTime = dpsEventInfoSrc.trailingTimeEndTime;
+    }
 }
 } // namsespace DeferredProcessingService
 } // namespace CameraStandard
diff --git a/services/deferred_processing_service/src/event_monitor/events_monitor.cpp b/services/deferred_processing_service/src/event_monitor/events_monitor.cpp
index 0e315dac..8679acbd 100644
--- a/services/deferred_processing_service/src/event_monitor/events_monitor.cpp
+++ b/services/deferred_processing_service/src/event_monitor/events_monitor.cpp
@@ -327,7 +327,13 @@ void EventsMonitor::ConnectThermalSvr()
         DP_INFO_LOG("Add death recipient to PowerMgr service failed.");
         return;
     }
-    DP_INFO_LOG("Connecting ThermalMgrService success.");
+    thermalSrv_ = iface_cast<OHOS::PowerMgr::IThermalSrv>(remoteObject_);
+    if (thermalSrv_ != nullptr) {
+        OHOS::PowerMgr::ThermalLevel level = OHOS::PowerMgr::ThermalLevel::COOL;
+        thermalSrv_->GetThermalLevel(level);
+        DPSEventReport::GetInstance().SetTemperatureLevel(static_cast<int>(level));
+        DP_INFO_LOG("Connecting ThermalMgrService success.");
+    }
 }
 
 ThermalLevelSubscriber::ThermalLevelSubscriber(const OHOS::EventFwk::CommonEventSubscribeInfo &subscriberInfo)
diff --git a/services/deferred_processing_service/src/post_processor/photo_post_processor.cpp b/services/deferred_processing_service/src/post_processor/photo_post_processor.cpp
index 4b26924b..09cc5b80 100644
--- a/services/deferred_processing_service/src/post_processor/photo_post_processor.cpp
+++ b/services/deferred_processing_service/src/post_processor/photo_post_processor.cpp
@@ -162,9 +162,8 @@ int32_t PhotoPostProcessor::PhotoProcessListener::OnProcessDone(const std::strin
 
 void PhotoPostProcessor::PhotoProcessListener::ReportEvent(const std::string& imageId)
 {
-    uint64_t endTime = SteadyClock::GetTimestampMilli();
     DPSEventReport::GetInstance()
-        .ReportImageProcessResult(imageId, photoPostProcessor_->GetUserId(), endTime);
+        .UpdateProcessDoneTime(imageId, photoPostProcessor_->GetUserId());
 }
 
 
@@ -310,6 +309,7 @@ void PhotoPostProcessor::RemoveImage(std::string imageId)
     if (imageProcessSession_) {
         int32_t ret = imageProcessSession_->RemoveImage(imageId);
         DP_DEBUG_LOG("removeImage, imageId: %s, ret: %d", imageId.c_str(), ret);
+        DPSEventReport::GetInstance().UpdateRemoveTime(imageId, userId_);
     }
 }
 
diff --git a/services/deferred_processing_service/src/schedule/photo_processor/photo_job_repository/photo_job_repository.cpp b/services/deferred_processing_service/src/schedule/photo_processor/photo_job_repository/photo_job_repository.cpp
index e7f62562..982e8a6b 100644
--- a/services/deferred_processing_service/src/schedule/photo_processor/photo_job_repository/photo_job_repository.cpp
+++ b/services/deferred_processing_service/src/schedule/photo_processor/photo_job_repository/photo_job_repository.cpp
@@ -138,7 +138,6 @@ bool PhotoJobRepository::RequestJob(const std::string& imageId)
         statusChanged = jobPtr->SetJobStatus(PhotoJobStatus::PENDING);
     }
     NotifyJobChangedUnLocked(priorityChanged, statusChanged, jobPtr);
-    ReportEvent(jobPtr, DeferredProcessingServiceInterfaceCode::DPS_PROCESS_IMAGE);
     return true;
 }
 
@@ -212,6 +211,7 @@ void PhotoJobRepository::SetJobRunning(const std::string imageId)
     jobPtr->RecordJobRunningPriority();
     UpdateRunningCountUnLocked(statusChanged, jobPtr);
     NotifyJobChangedUnLocked(priorityChanged, statusChanged, jobPtr);
+    ReportEvent(jobPtr, DeferredProcessingServiceInterfaceCode::DPS_PROCESS_IMAGE);
 }
 
 void PhotoJobRepository::SetJobCompleted(const std::string imageId)
@@ -469,7 +469,6 @@ bool PhotoJobRepository::HasUnCompletedBackgroundJob()
     return it != backgroundJobMap_.end();
 }
 
-
 void PhotoJobRepository::ReportEvent(DeferredPhotoJobPtr jobPtr, DeferredProcessingServiceInterfaceCode event)
 {
     auto iter = priotyToNum.find(PhotoJobPriority::HIGH);
@@ -480,7 +479,7 @@ void PhotoJobRepository::ReportEvent(DeferredPhotoJobPtr jobPtr, DeferredProcess
     int lowJobNum = iter->second;
     std::string imageId = jobPtr->GetImageId();
     DPSEventInfo dpsEventInfo;
-    dpsEventInfo.imageId = jobPtr->GetImageId();
+    dpsEventInfo.imageId = imageId;
     dpsEventInfo.userId = userId_;
     dpsEventInfo.lowJobNum = lowJobNum;
     dpsEventInfo.normalJobNum = normalJobNum;
@@ -495,22 +494,19 @@ void PhotoJobRepository::ReportEvent(DeferredPhotoJobPtr jobPtr, DeferredProcess
             break;
         }
         case static_cast<int32_t>(DeferredProcessingServiceInterfaceCode::DPS_REMOVE_IMAGE): {
-            dpsEventInfo.removeTimeEndTime = endTime;
+            dpsEventInfo.removeTimeBeginTime = endTime;
             break;
         }
         case static_cast<int32_t>(DeferredProcessingServiceInterfaceCode::DPS_RESTORE_IMAGE): {
-            dpsEventInfo.restoreTimeEndTime = endTime;
+            dpsEventInfo.restoreTimeBeginTime = endTime;
             break;
         }
         case static_cast<int32_t>(DeferredProcessingServiceInterfaceCode::DPS_PROCESS_IMAGE): {
-            dpsEventInfo.processTimeEndTime = endTime;
+            dpsEventInfo.processTimeBeginTime = endTime;
             break;
         }
     }
     DPSEventReport::GetInstance().ReportOperateImage(imageId, userId_, dpsEventInfo);
-    if (event == DeferredProcessingServiceInterfaceCode::DPS_REMOVE_IMAGE) {
-        DPSEventReport::GetInstance().ReportImageProcessResult(imageId, userId_);
-    }
 }
 } // namespace DeferredProcessing
 } // namespace CameraStandard
diff --git a/services/deferred_processing_service/src/session/photo_session/deferred_photo_processing_session.cpp b/services/deferred_processing_service/src/session/photo_session/deferred_photo_processing_session.cpp
index 7f6984eb..3f724c73 100644
--- a/services/deferred_processing_service/src/session/photo_session/deferred_photo_processing_session.cpp
+++ b/services/deferred_processing_service/src/session/photo_session/deferred_photo_processing_session.cpp
@@ -69,6 +69,8 @@ int32_t DeferredPhotoProcessingSession::EndSynchronize()
             AddImage(it->first, it->second->metadata_, it->second->discardable_);
             it = imageIds_.erase(it);
         }
+        const std::string imageId = "default";
+        ReportEvent(imageId, DeferredProcessingServiceInterfaceCode::DPS_END_SYNCHRONIZE);
         return 0;
     }
     std::set<std::string> hdiImageIds(pendingImages.begin(), pendingImages.end());
@@ -217,8 +219,13 @@ void DeferredPhotoProcessingSession::ReportEvent(const std::string& imageId, int
             break;
         }
     }
-    if (event == DeferredProcessingServiceInterfaceCode::DPS_END_SYNCHRONIZE) {
+
+    if (event == DeferredProcessingServiceInterfaceCode::DPS_BEGIN_SYNCHRONIZE) {
+        return;
+    } else if (event == DeferredProcessingServiceInterfaceCode::DPS_END_SYNCHRONIZE) {
         DPSEventReport::GetInstance().ReportImageProcessResult(imageId, userId_);
+    } else {
+        DPSEventReport::GetInstance().SetEventInfo(dpsEventInfo);
     }
 }
 } // namespace DeferredProcessing
diff --git a/services/deferred_processing_service/src/session/session_coordinator.cpp b/services/deferred_processing_service/src/session/session_coordinator.cpp
index 9f754405..501ff92b 100644
--- a/services/deferred_processing_service/src/session/session_coordinator.cpp
+++ b/services/deferred_processing_service/src/session/session_coordinator.cpp
@@ -212,6 +212,9 @@ void SessionCoordinator::ProcessPendingResults(sptr<IDeferredPhotoProcessingSess
         auto result = pendingImageResults_.front();
         if (result.callbackType == CallbackType::ON_PROCESS_DONE) {
             callback->OnProcessImageDone(result.imageId, result.ipcFd, result.dataSize);
+            uint64_t endTime = SteadyClock::GetTimestampMilli();
+            DPSEventReport::GetInstance()
+                    .ReportImageProcessResult(result.imageId, result.userId, endTime);
         }
         if (result.callbackType == CallbackType::ON_ERROR) {
             callback->OnError(result.imageId, MapDpsErrorCode(result.errorCode));