diff --git a/services/camera_service/include/hcamera_restore_param.h b/services/camera_service/include/hcamera_restore_param.h
index 10269608..b3b3845a 100644
--- a/services/camera_service/include/hcamera_restore_param.h
+++ b/services/camera_service/include/hcamera_restore_param.h
@@ -23,6 +23,7 @@
 #include "camera/v1_2/types.h"
 #include "camera_metadata_info.h"
 #include "icamera_service.h"
+#include "camera_util.h"
 
 namespace OHOS {
 namespace CameraStandard {
@@ -47,6 +48,7 @@ public:
 
     void SetStreamInfo(std::vector<StreamInfo_V1_1> &streamInfos);
     void SetSetting(std::shared_ptr<OHOS::Camera::CameraMetadata>& settings);
+    void UpdateExposureSetting(long timeInterval);
     void SetRestoreParamType(RestoreParamTypeOhos restoreParamType);
     void SetStartActiveTime(int activeTime);
     void SetCloseCameraTime(timeval closeCameraTime);
@@ -55,6 +57,7 @@ public:
     void SetFoldStatus(int foldStaus);
 
 private:
+    std::mutex restoreParamMutex_;
     std::string mClientName;
     std::string mCameraId;
     std::vector<StreamInfo_V1_1> mStreamInfos;
diff --git a/services/camera_service/src/hcamera_host_manager.cpp b/services/camera_service/src/hcamera_host_manager.cpp
index c52ab3d5..a7fa3934 100644
--- a/services/camera_service/src/hcamera_host_manager.cpp
+++ b/services/camera_service/src/hcamera_host_manager.cpp
@@ -31,6 +31,7 @@ namespace CameraStandard {
 
 const std::string HCameraHostManager::LOCAL_SERVICE_NAME = "camera_service";
 const std::string HCameraHostManager::DISTRIBUTED_SERVICE_NAME = "distributed_camera_provider_service";
+constexpr uint32_t MILLISEC_TIME = 1000;
 
 using namespace OHOS::HDI::Camera::V1_0;
 struct HCameraHostManager::CameraDeviceInfo {
@@ -961,7 +962,7 @@ void HCameraHostManager::UpdateRestoreParamCloseTime(const std::string& clientNa
             auto cameraRestoreParam = iter->second;
             if (cameraId == cameraRestoreParam->GetCameraId()) {
                 cameraRestoreParam->SetCloseCameraTime(closeTime);
-                MEDIA_DEBUG_LOG("HCameraHostManager::Update persistent closeTime");
+                MEDIA_DEBUG_LOG("HCameraHostManager::Update persistent closeTime %{public}ld", closeTime.tv_sec);
             } else {
                 cameraRestoreParam->SetCloseCameraTime({0, 0});
             }
@@ -1028,15 +1029,16 @@ void HCameraHostManager::UpdateRestoreParam(sptr<HCameraRestoreParam> &cameraRes
         if (closeTime.tv_sec != 0 && CheckCameraId(restoreParam, cameraId)) {
             timeval openTime;
             gettimeofday(&openTime, nullptr);
-            long timeInterval = (openTime.tv_sec - closeTime.tv_sec)+
-                (openTime.tv_usec - closeTime.tv_usec) / 1000; // 1000 is Convert milliseconds to seconds
-            if ((long)(restoreParam->GetStartActiveTime() * 60) < timeInterval) { // 60 is 60 Seconds
+            long timeInterval = (openTime.tv_sec - closeTime.tv_sec) * MILLISEC_TIME +
+                (openTime.tv_usec - closeTime.tv_usec) / MILLISEC_TIME;
+            if ((long)(restoreParam->GetStartActiveTime() * 60 * MILLISEC_TIME) < timeInterval) { // 60 is 60 Seconds
                 MEDIA_DEBUG_LOG("HCameraHostManager::UpdateRestoreParam get persistent");
                 cameraRestoreParam = restoreParam;
             } else {
-                MEDIA_DEBUG_LOG("HCameraHostManager::UpdateRestoreParam get transistent ");
+                MEDIA_DEBUG_LOG("HCameraHostManager::UpdateRestoreParam get transistent %{public}ld", timeInterval);
                 cameraRestoreParam = GetTransitentParam(clientName, cameraId);
             }
+            cameraRestoreParam->UpdateExposureSetting(timeInterval);
             break;
         }
         ++iter;
diff --git a/services/camera_service/src/hcamera_restore_param.cpp b/services/camera_service/src/hcamera_restore_param.cpp
index 536f9e9b..07ab3938 100644
--- a/services/camera_service/src/hcamera_restore_param.cpp
+++ b/services/camera_service/src/hcamera_restore_param.cpp
@@ -19,6 +19,7 @@
 
 namespace OHOS {
 namespace CameraStandard {
+constexpr uint32_t DELETE_EXPOSURE_TIME = 30 * 1000;
 HCameraRestoreParam::HCameraRestoreParam(std::string clientName, std::string cameraId,
     std::vector<StreamInfo_V1_1> streamInfos,
     std::shared_ptr<OHOS::Camera::CameraMetadata> settings, RestoreParamTypeOhos restoreParamType,
@@ -100,9 +101,23 @@ void HCameraRestoreParam::SetStreamInfo(std::vector<StreamInfo_V1_1> &streamInfo
 
 void HCameraRestoreParam::SetSetting(std::shared_ptr<OHOS::Camera::CameraMetadata>& settings)
 {
+    std::lock_guard<std::mutex> lock(restoreParamMutex_);
     mSettings = settings;
 }
 
+void HCameraRestoreParam::UpdateExposureSetting(long timeInterval)
+{
+    std::lock_guard<std::mutex> lock(restoreParamMutex_);
+    if (timeInterval < DELETE_EXPOSURE_TIME){
+        return;
+    }
+    if (mOpMode == SceneMode::PROFESSIONAL_PHOTO || mOpMode == SceneMode::PROFESSIONAL_VIDEO
+        || mOpMode == SceneMode::TIMELAPSE_PHOTO) {
+        return;
+    }
+    OHOS::Camera::DeleteCameraMetadataItem(mSettings->get(), OHOS_CONTROL_AE_EXPOSURE_COMPENSATION);
+}
+
 void HCameraRestoreParam::SetRestoreParamType(RestoreParamTypeOhos restoreParamType)
 {
     mRestoreParamType = restoreParamType;
diff --git a/services/camera_service/src/hcamera_service.cpp b/services/camera_service/src/hcamera_service.cpp
index a907fb63..ffd21229 100644
--- a/services/camera_service/src/hcamera_service.cpp
+++ b/services/camera_service/src/hcamera_service.cpp
@@ -1745,6 +1745,12 @@ std::shared_ptr<OHOS::Camera::CameraMetadata> HCameraService::CreateDefaultSetti
         defaultSettings->addEntry(OHOS_CAMERA_USER_ID, &userId, count);
     }
 
+    ret = OHOS::Camera::FindCameraMetadataItem(currentSetting->get(), OHOS_CONTROL_AE_EXPOSURE_COMPENSATION, &item);
+    if (ret == CAM_META_SUCCESS) {
+        int32_t exporseValue = item.data.i32[0];
+        defaultSettings->addEntry(OHOS_CONTROL_AE_EXPOSURE_COMPENSATION, &exporseValue, count);
+    }
+
     uint8_t enableValue = true;
     defaultSettings->addEntry(OHOS_CONTROL_VIDEO_DEBUG_SWITCH, &enableValue, 1);
 
