# Copyright (c) 2021-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("./../../multimedia_camera_framework.gni")

ohos_shared_library("camera_service") {
  branch_protector_ret = "pac_ret"
  install_enable = true
  sources = [
    "${multimedia_camera_framework_path}/frameworks/native/camera/base/src/ability/camera_ability_parse_util.cpp",
    "${multimedia_camera_framework_path}/frameworks/native/camera/base/src/output/camera_photo_proxy.cpp",
    "${multimedia_camera_framework_path}/dynamic_libs/moving_photo/src/moving_photo_surface_wrapper.cpp",
    "${multimedia_camera_framework_path}/dynamic_libs/moving_photo/src/common/frame_record.cpp",
    "binder/client/src/hcamera_listener_proxy.cpp",
    "binder/client/src/window_manager_service_proxy_impl/hcamera_mock_session_manager_interface_proxy.cpp",
    "binder/client/src/window_manager_service_proxy_impl/hcamera_scene_session_manager_proxy.cpp",
    "binder/client/src/window_manager_service_proxy_impl/hcamera_window_session_manager_service_proxy.cpp",
    "binder/server/src/hcamera_broker_stub.cpp",
    "binder/server/src/window_manager_service_callback_stub_impl/hcamera_window_manager_callback_stub.cpp",
    "src/adapter/bms_adapter.cpp",
    "src/app_manager_utils/camera_app_manager_client.cpp",
    "src/app_manager_utils/camera_app_manager_utils.cpp",
    "src/camera_buffer_manager/photo_asset_auxiliary_consumer.cpp",
    "src/camera_buffer_manager/photo_asset_buffer_consumer.cpp",
    "src/camera_buffer_manager/photo_buffer_consumer.cpp",
    "src/camera_buffer_manager/picture_assembler.cpp",
    "src/camera_buffer_manager/thumbnail_buffer_consumer.cpp",
    "src/camera_common_event_manager.cpp",
    "src/camera_datashare_helper.cpp",
    "src/camera_fwk_metadata_utils.cpp",
    "src/camera_info_dumper.cpp",
    "src/camera_privacy.cpp",
    "src/camera_rotate_strategy_parser.cpp",
    "src/camera_sensor_plugin.cpp",
    "src/camera_util.cpp",
    "src/camera_xml_parser.cpp",
    "src/device_protection_ability_connection.cpp",
    "src/dfx/camera_report_dfx_uitls.cpp",
    "src/dfx/camera_report_uitls.cpp",
    "src/hcamera_device.cpp",
    "src/hcamera_device_manager.cpp",
    "src/hcamera_host_manager.cpp",
    "src/hcamera_preconfig.cpp",
    "src/hcamera_restore_param.cpp",
    "src/hcamera_service.cpp",
    "src/hcamera_session_manager.cpp",
    "src/hcapture_session.cpp",
    "src/hmech_session.cpp",
    "src/hstream_capture.cpp",
    "src/hstream_common.cpp",
    "src/hstream_depth_data.cpp",
    "src/hstream_metadata.cpp",
    "src/hstream_operator.cpp",
    "src/hstream_operator_manager.cpp",
    "src/hstream_repeat.cpp",
    "src/param_update/camera_rotate_param_manager.cpp",
    "src/param_update/camera_rotate_param_reader.cpp",
    "src/param_update/camera_rotate_param_sign_tools.cpp",
    "src/smooth_zoom/cubic_bezier.cpp",
    "src/smooth_zoom/smooth_zoom.cpp",
    "src/window_manager_utils/camera_window_manager_agent.cpp",
    "src/window_manager_utils/camera_window_manager_client.cpp",
  ]
  cflags = [
    "-fPIC",
    "-Wall",
    "-Os",
    "-fstack-protector-strong",
    "-fno-merge-all-constants",
    "-flto",
    "-ffunction-sections"
  ]

  ldflags = [
    "-Wl,-z,relro,-z,now",
    "-Wl,--gc-sections",
    "-fPIE",
  ]

  if (!use_clang_coverage && !use_libfuzzer && using_hb_new) {
    cflags += [ "-fvisibility=hidden" ]
  }

  stack_protector_ret = true

  sanitize = {
    boundary_sanitize = true  # Enable boundary san detection
    cfi = true  # Enable/disable control flow integrity detection
    cfi_cross_dso = true  # Cross-SO CFI Checks
    debug = false
    integer_overflow = true  # Enable integer overflow detection
    ubsan = true  # Enable some Ubsan
    blocklist = "./camera_cfi_blocklist.txt"
  }

  include_dirs = [
    "${multimedia_camera_framework_path}/services/camera_service/include",
    "${multimedia_camera_framework_path}/common/utils",
    "${multimedia_camera_framework_path}/dynamic_libs/moving_photo/include",
    "${multimedia_camera_framework_path}/dynamic_libs/moving_photo/include/avcodec",
    "${multimedia_camera_framework_path}/dynamic_libs/moving_photo/include/common",
    "${multimedia_camera_framework_path}/services/camera_service/binder/base/include/window_manager_service_utils",
    "${multimedia_camera_framework_path}/services/camera_service/binder/client/include/window_manager_service_proxy",
    "${multimedia_camera_framework_path}/services/camera_service/binder/server/include/window_manager_service_callback_stub",
    "${multimedia_camera_framework_path}/services/camera_service/include/adapter",
    "${multimedia_camera_framework_path}/services/camera_service/include/app_manager_utils",
    "${multimedia_camera_framework_path}/services/camera_service/include/camera_buffer_manager",
    "${multimedia_camera_framework_path}/services/camera_service/include/dfx",
    "${multimedia_camera_framework_path}/services/camera_service/include/smooth_zoom",
    "${multimedia_camera_framework_path}/services/camera_service/include/param_update",
    "${multimedia_camera_framework_path}/services/camera_service/include/window_manager_utils",
    "${multimedia_camera_framework_path}/services/camera_service/binder/base/include",
    "${multimedia_camera_framework_path}/services/camera_service/binder/client/include",
    "${multimedia_camera_framework_path}/services/camera_service/binder/server/include",
    "${multimedia_camera_framework_path}/interfaces/inner_api/native/camera/include",
    "${multimedia_camera_framework_path}/interfaces/inner_api/native/camera/include/utils/",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/base",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/base/task_manager",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/base/task_manager/task_group",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/binder/base/include",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/binder/client/include",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/binder/server/include",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/base/buffer_manager",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/dfx",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/event_monitor",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/post_processor",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/post_processor/command",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/schedule",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/schedule/base",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/schedule/state",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/schedule/photo_processor",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/schedule/photo_processor/photo_job_repository",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/schedule/photo_processor/strategy",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/schedule/video_processor",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/schedule/video_processor/strategy",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/schedule/video_processor/video_job_repository",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/session",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/session/photo_session",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/session/video_session",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/utils",
  ]

  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  if (build_variant == "user") {
    cflags += [ "-DIS_RELEASE_VERSION" ]
  }

  public_configs = [ "${multimedia_camera_framework_path}/services/camera_service/idls:camera_sa_idl_config" ]

  deps = [
    "${multimedia_camera_framework_path}/common:camera_utils",
    "${multimedia_camera_framework_path}/services/deferred_processing_service:deferred_processing_service",
    "${multimedia_camera_framework_path}/services/camera_service/idls:camera_idl_sa_stub"
  ]

  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_connect_callback_stub",
    "ability_runtime:app_manager",
    "ability_runtime:extension_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "av_codec:native_media_acodec",
    "av_codec:native_media_aenc",
    "av_codec:native_media_avcencinfo",
    "av_codec:native_media_avmuxer",
    "av_codec:native_media_codecbase",
    "av_codec:native_media_venc",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "drivers_interface_camera:libbuffer_handle_sequenceable_1.0",
    "drivers_interface_camera:libcamera_proxy_1.0",
    "drivers_interface_camera:libcamera_proxy_1.1",
    "drivers_interface_camera:libcamera_proxy_1.2",
    "drivers_interface_camera:libcamera_proxy_1.3",
    "drivers_interface_camera:libcamera_proxy_1.4",
    "drivers_interface_camera:libmap_data_sequenceable_1.0",
    "drivers_interface_camera:metadata",
    "drivers_interface_display:libdisplay_commontype_proxy_1.0",
    "drivers_interface_display:libdisplay_composer_hdi_impl_1.2",
    "e2fsprogs:libext2_uuid",
    "graphic_2d:librender_service_client",
    "graphic_surface:buffer_handle",
    "graphic_surface:surface",
    "graphic_surface:sync_fence",
    "hdf_core:libhdi",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "i18n:intl_util",
    "init:libbegetutil",
    "ipc:ipc_core",
    "ipc:ipc_single",
    "libxml2:libxml2",
    "media_foundation:native_media_core",
    "media_library:media_library",
    "memmgr:memmgrclient",
    "openssl:libcrypto_shared",
    "os_account:libaccountkits",
    "os_account:os_account_innerkits",
    "resource_schedule_service:ressched_client",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "window_manager:libdm",
    "window_manager:libwm",
  ]

  defines = []
  if (use_sensor) {
    external_deps += [ "sensor:sensor_interface_native" ]
    defines += [ "CAMERA_USE_SENSOR" ]
  }

  if (defined(global_parts_info) &&
      defined(global_parts_info.distributedhardware_device_manager)) {
    external_deps += [ "device_manager:devicemanagersdk" ]
    defines += [ "DEVICE_MANAGER" ]
  }

  if (defined(global_parts_info) &&
      defined(global_parts_info.resourceschedule_memmgr_override)) {
    defines += [ "MEMMGR_OVERRID" ]
  }

  if (hicollie_enable) {
    external_deps += [ "hicollie:libhicollie" ]
    defines += [ "HICOLLIE_ENABLE" ]
  }

  if (defined(global_parts_info) &&
      defined(
          global_parts_info.notification_distributed_notification_service)) {
    external_deps += [ "distributed_notification_service:ans_innerkits" ]
    defines += [ "NOTIFICATION_ENABLE" ]
    sources += [ "src/camera_beauty_notification.cpp" ]
  }

  if (config_policy_ext_enable) {
    defines += [ "CONFIG_POLICY_EXT_ENABLE" ]
  }

  defines += [ "MOVING_PHOTO_ADD_AUDIO" ]

  if (use_musl) {
    if (musl_use_jemalloc && musl_use_jemalloc_dfx_intf) {
      cflags += [ "-DCONFIG_USE_JEMALLOC_DFX_INTF" ]
    }
  }

  if (camera_framework_feature_camera_rotate_plugin) {
    defines += [ "HOOK_CAMERA_OPERATOR"]
    sources += [  "src/rotate_plugin/camera_rotate_plugin.cpp"]
    include_dirs += ["${multimedia_camera_framework_path}/services/camera_service/include/rotate_plugin"]
  }

  cflags_cc = cflags

  part_name = "camera_framework"
  subsystem_name = "multimedia"
}
