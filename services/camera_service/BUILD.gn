# Copyright (c) 2021-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("./../../multimedia_camera_framework.gni")

ohos_shared_library("camera_service") {
  branch_protector_ret = "pac_ret"
  install_enable = true
  sources = [
    "binder/client/src/hcamera_device_callback_proxy.cpp",
    "binder/client/src/hcamera_listener_proxy.cpp",
    "binder/client/src/hcamera_service_callback_proxy.cpp",
    "binder/client/src/hcamera_service_proxy.cpp",
    "binder/client/src/hcapture_session_callback_proxy.cpp",
    "binder/client/src/hstream_capture_callback_proxy.cpp",
    "binder/client/src/hstream_repeat_callback_proxy.cpp",
    "binder/server/src/hcamera_device_stub.cpp",
    "binder/server/src/hcamera_service_stub.cpp",
    "binder/server/src/hcapture_session_stub.cpp",
    "binder/server/src/hstream_capture_stub.cpp",
    "binder/server/src/hstream_metadata_stub.cpp",
    "binder/server/src/hstream_repeat_stub.cpp",
    "src/camera_fwk_metadata_utils.cpp",
    "src/camera_timer.cpp",
    "src/camera_util.cpp",
    "src/dfx/camera_report_uitls.cpp",
    "src/hcamera_device.cpp",
    "src/hcamera_device_manager.cpp",
    "src/hcamera_host_manager.cpp",
    "src/hcamera_restore_param.cpp",
    "src/hcamera_service.cpp",
    "src/hcapture_session.cpp",
    "src/hstream_capture.cpp",
    "src/hstream_common.cpp",
    "src/hstream_metadata.cpp",
    "src/hstream_repeat.cpp",
    "src/smooth_zoom/cubic_bezier.cpp",
    "src/smooth_zoom/smooth_zoom.cpp",
  ]
  cflags = [
    "-fPIC",
    "-Wall",
  ]
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  include_dirs = [
    "//drivers/peripheral/display/interfaces/include",
    "${graphic_surface_path}/surface/include",
    "//foundation/multimedia/camera_framework/services/camera_service/include",
    "${multimedia_camera_framework_path}/services/camera_service/include/dfx",
    "${multimedia_camera_framework_path}/services/camera_service/include/smooth_zoom",
    "//foundation/multimedia/camera_framework/services/camera_service/binder/base/include",
    "//foundation/multimedia/camera_framework/services/camera_service/binder/client/include",
    "//foundation/multimedia/camera_framework/services/camera_service/binder/server/include",
    "//foundation/multimedia/camera_framework/interfaces/inner_api/native/camera/include",
    "//foundation/window/window_manager/interfaces/innerkits/dm",
    "//base/security/access_token/interfaces/innerkits/accesstoken/include",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/base",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/binder/base/include",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/binder/client/include",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/binder/server/include",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/base/buffer_manager",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/base/task_manager",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/base/task_manager/task_group",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/base/timer",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/base/timer/core",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/dfx",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/event_monitor",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/post_processor",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/schedule",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/schedule/photo_processor",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/schedule/photo_processor/photo_job_repository",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/schedule/photo_processor/strategy",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/session",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/session/photo_session",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/utils",
  ]

  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [ "${multimedia_camera_framework_path}/services/deferred_processing_service:deferred_processing_service" ]

  external_deps = [
    "ability_base:want",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "drivers_interface_camera:libcamera_proxy_1.0",
    "drivers_interface_camera:libcamera_proxy_1.1",
    "drivers_interface_camera:libcamera_proxy_1.2",
    "drivers_interface_camera:libcamera_proxy_1.3",
    "drivers_interface_camera:metadata",
    "drivers_interface_display:display_commontype_idl_headers",
    "drivers_interface_display:libdisplay_composer_hdi_impl",
    "drivers_interface_display:libdisplay_composer_hdi_impl_1.1",
    "graphic_2d:librender_service_client",
    "graphic_surface:surface",
    "hdf_core:libhdi",
    "hicollie:libhicollie",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "ipc:ipc_core",
    "ipc:ipc_single",
    "os_account:libaccountkits",
    "os_account:os_account_innerkits",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "window_manager:libdm",
  ]

  defines = []
  if (use_sensor) {
    external_deps += [ "sensor:sensor_interface_native" ]
    defines += [ "CAMERA_USE_SENSOR" ]
  }

  if (use_memmgr_plugin) {
    external_deps += [ "memmgr_override:memmgrclient" ]
  } else if (use_memmgr) {
    external_deps += [ "memmgr:memmgrclient" ]
  }

  include_dirs += [
    "//drivers/peripheral/camera/interfaces/include",
    "//drivers/peripheral/camera/interfaces/hdi_ipc",
    "//drivers/peripheral/camera/interfaces/hdi_ipc/utils/include",
    "//drivers/peripheral/camera/interfaces/hdi_ipc/callback/device/include",
    "//drivers/peripheral/camera/interfaces/hdi_ipc/callback/operator/include",
    "//drivers/peripheral/camera/interfaces/hdi_ipc/callback/host/include",
  ]

  if (use_musl) {
    if (use_jemalloc && use_jemalloc_dfx_intf) {
      cflags += [ "-DCONFIG_USE_JEMALLOC_DFX_INTF" ]
    }
  }

  cflags_cc = cflags

  part_name = "camera_framework"
  subsystem_name = "multimedia"
}
