/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package OHOS.CameraStandard;
import CameraTypes;
import IStreamCaptureCallback;

interface IStreamCommon;
interface OHOS.IBufferProducer;
sequenceable CameraMetadataInfo..OHOS.Camera.CameraMetadata;
sequenceable CameraPhotoProxy..OHOS.CameraStandard.CameraPhotoProxy;
sequenceable PictureInterface..OHOS.CameraStandard.PictureIntf;
option_stub_hooks on;
option_parcel_hooks on;

interface IStreamCapture extends IStreamCommon {
  [ipccode 0] void Capture([in] sharedptr<CameraMetadata> captureSettings);
  [ipccode 1] void CancelCapture();
  [ipccode 2] void SetCallback([in] IStreamCaptureCallback callbackFunc);
  [ipccode 3] void Release();
  [ipccode 4] void SetThumbnail([in] boolean isEnabled, [in] IBufferProducer producer);
  [ipccode 5] void ConfirmCapture();
  [ipccode 6] void DeferImageDeliveryFor([in] int type);
  [ipccode 7] void IsDeferredPhotoEnabled();
  [ipccode 8] void IsDeferredVideoEnabled();
  [ipccode 9] void SetBufferProducerInfo([in] String bufName, [in] IBufferProducer producer);
  [ipccode 10] void SetMovingPhotoVideoCodecType([in] int videoCodecType);
  [ipccode 11] void EnableRawDelivery([in] boolean enabled);
  [ipccode 12] void SetCameraPhotoRotation([in] boolean isEnable);
  [ipccode 13] void EnableMovingPhoto([in] boolean enabled);
  [ipccode 14] void AcquireBufferToPrepareProxy([in] int captureId);
  [ipccode 15] void UpdateMediaLibraryPhotoAssetProxy([in] sptr<CameraPhotoProxy> photoProxy);
  [ipccode 16] void UnSetCallback();
  [ipccode 17] void EnableOfflinePhoto([in] boolean isEnable);
  [ipccode 18] void CreateMediaLibrary([in] sptr<CameraPhotoProxy> photoProxy, [out] String uri, [out] int cameraShotType, [out] String burstKey, [in] long timestamp);
  [ipccode 19] void CreateMediaLibrary([in] sharedptr<PictureIntf> pictureExt, [in] sptr<CameraPhotoProxy> photoProxy, [out] String uri, [out] int cameraShotType, [out] String burstKey, [in] long timestamp);
}