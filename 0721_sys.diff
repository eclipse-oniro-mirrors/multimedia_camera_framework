
diff --git a/services/camera_service/include/camera_util.h b/services/camera_service/include/camera_util.h
index ac76639b3..6bfaa2775 100644
--- a/services/camera_service/include/camera_util.h
+++ b/services/camera_service/include/camera_util.h
@@ -53,6 +53,7 @@ static const int32_t DISPALY_ROTATE_1 = 1;
 static const int32_t DISPALY_ROTATE_2 = 2;
 static const int32_t DISPALY_ROTATE_3 = 3;
 static const std::string OHOS_PERMISSION_CAMERA = "ohos.permission.CAMERA";
+static const std::string OHOS_PERMISSION_MICROPHONE = "ohos.permission.MICROPHONE";
 static const std::string OHOS_PERMISSION_MANAGE_CAMERA_CONFIG = "ohos.permission.MANAGE_CAMERA_CONFIG";
 static const std::string OHOS_PERMISSION_CAMERA_CONTROL = "ohos.permission.CAMERA_CONTROL";
 static const std::string SYSTEM_CAMERA = "com.huawei.hmos.camera";
diff --git a/services/camera_service/src/camera_fwk_metadata_utils.cpp b/services/camera_service/src/camera_fwk_metadata_utils.cpp
index 688a9f93b..751f83599 100644
--- a/services/camera_service/src/camera_fwk_metadata_utils.cpp
+++ b/services/camera_service/src/camera_fwk_metadata_utils.cpp
@@ -16,9 +16,11 @@
 #include "camera_fwk_metadata_utils.h"
 
 #include <cstdint>
+#include <unordered_set>
 
 #include "camera_log.h"
 #include "camera_metadata_operator.h"
+#include "camera_util.h"
 
 namespace OHOS {
 namespace CameraStandard {
@@ -45,9 +47,24 @@ void ForEach(uint32_t iteratorCount, std::function<void(uint32_t)> fun)
     }
 }
 } // namespace
+
+bool CheckSysMeta(uint32_t item)
+{
+    static const std::unordered_set<uint32_t> sysTags = {
+        OHOS_CONTROL_PREPARE_ZOOM,
+        OHOS_CONTROL_BEAUTY_TYPE,
+        OHOS_CONTROL_FOCUS_RANGE_TYPE,
+        OHOS_CONTROL_FOCUS_DRIVEN_TYPE,
+        OHOS_CONTROL_COLOR_RESERVATION_TYPE,
+        OHOS_CONTROL_CAMERA_PORTRAIT_THEME_TYPE,
+    };
+    return sysTags.find(item) != sysTags.end();
+}
+
 bool MergeMetadata(const std::shared_ptr<OHOS::Camera::CameraMetadata> srcMetadata,
     std::shared_ptr<OHOS::Camera::CameraMetadata> dstMetadata)
 {
+    bool isSysCall = CheckSystemApp();
     CHECK_RETURN_RET(srcMetadata == nullptr || dstMetadata == nullptr, false);
     auto srcHeader = srcMetadata->get();
     CHECK_RETURN_RET(srcHeader == nullptr, false);
@@ -61,6 +78,11 @@ bool MergeMetadata(const std::shared_ptr<OHOS::Camera::CameraMetadata> srcMetada
             ret != CAM_META_SUCCESS, false, "Failed to get metadata item at index: %{public}d", index);
         bool status = false;
         uint32_t currentIndex;
+        MEDIA_DEBUG_LOG("MergeMetadata src item:%{public}d", srcItem.item);
+        if (!isSysCall) {
+            CHECK_EXECUTE(CheckSysMeta(srcItem.item), continue);
+        }
+        MEDIA_DEBUG_LOG("MergeMetadata update item:%{public}d", srcItem.item);
         ret = OHOS::Camera::FindCameraMetadataItemIndex(dstMetadata->get(), srcItem.item, &currentIndex);
         if (ret == CAM_META_ITEM_NOT_FOUND) {
             status = dstMetadata->addEntry(srcItem.item, srcItem.data.u8, srcItem.count);
diff --git a/services/camera_service/src/hstream_capture.cpp b/services/camera_service/src/hstream_capture.cpp
index ba5f91bdf..6bd72a01a 100644
--- a/services/camera_service/src/hstream_capture.cpp
+++ b/services/camera_service/src/hstream_capture.cpp
@@ -1365,6 +1365,12 @@ int32_t HStreamCapture::CallbackEnter([[maybe_unused]] uint32_t code)
             CHECK_RETURN_RET_ELOG(!CheckSystemApp(), CAMERA_NO_PERMISSION, "HStreamCapture::CheckSystemApp fail");
             break;
         }
+        case IStreamCaptureIpcCode::COMMAND_ENABLE_MOVING_PHOTO: {
+            uint32_t callerToken = IPCSkeleton::GetCallingTokenID();
+            int32_t errCode = CheckPermission(OHOS_PERMISSION_MICROPHONE, callerToken);
+            CHECK_RETURN_RET_ELOG(errCode != CAMERA_OK, CAMERA_NO_PERMISSION, "check microphone permission failed.");
+            break;
+        }
         default:
             break;
     }
diff --git a/services/camera_service/src/hstream_metadata.cpp b/services/camera_service/src/hstream_metadata.cpp
index a081eb30b..3e2c456f0 100644
--- a/services/camera_service/src/hstream_metadata.cpp
+++ b/services/camera_service/src/hstream_metadata.cpp
@@ -111,6 +111,11 @@ int32_t HStreamMetadata::OperatePermissionCheck(uint32_t interfaceCode)
                 "HStreamMetadata::OperatePermissionCheck fail, callerToken not legal");
             break;
         }
+        case IStreamMetadataIpcCode::COMMAND_ENABLE_METADATA_TYPE:
+        case IStreamMetadataIpcCode::COMMAND_DISABLE_METADATA_TYPE: {
+            CHECK_RETURN_RET_ELOG(!CheckSystemApp(), CAMERA_NO_PERMISSION, "HStreamMetadata::CheckSystemApp fail");
+            break;
+        }
         default:
             break;
     }
@@ -141,8 +146,6 @@ int32_t HStreamMetadata::EnableMetadataType(const std::vector<int32_t>& metadata
 }
 int32_t HStreamMetadata::DisableMetadataType(const std::vector<int32_t>& metadataTypes)
 {
-    CHECK_RETURN_RET_ELOG(
-        !CheckSystemApp(), CAMERA_NO_PERMISSION, "HStreamMetadata::DisableMetadataType:SystemApi is called");
     int32_t rc = EnableOrDisableMetadataType(metadataTypes, false);
     CHECK_RETURN_RET_ELOG(rc != CAMERA_OK, rc, "HStreamMetadata::DisableMetadataType failed!");
     std::lock_guard<std::mutex> lock(metadataTypeMutex_);
@@ -186,16 +189,17 @@ int32_t HStreamMetadata::EnableOrDisableMetadataType(const std::vector<int32_t>&
         enable, metadataTypes.size());
     auto streamOperator = GetStreamOperator();
     CHECK_RETURN_RET_ELOG(streamOperator == nullptr, CAMERA_INVALID_STATE,
-        "HStreamMetadata::EnableMetadataType streamOperator is nullptr");
+        "HStreamMetadata::EnableOrDisableMetadataType streamOperator is nullptr");
     streamOperator->GetVersion(majorVer_, minorVer_);
     CHECK_RETURN_RET_DLOG(majorVer_ < HDI_VERSION_1 || minorVer_ < HDI_VERSION_3, CAMERA_OK,
         "EnableOrDisableMetadataType version: %{public}d.%{public}d", majorVer_, minorVer_);
     int32_t ret = PrepareCaptureId();
-    CHECK_RETURN_RET_ELOG(ret != CAMERA_OK, ret, "HStreamMetadata::EnableMetadataType Failed to allocate a captureId");
+    CHECK_RETURN_RET_ELOG(ret != CAMERA_OK, ret,
+        "HStreamMetadata::EnableOrDisableMetadataType Failed to allocate a captureId");
     sptr<OHOS::HDI::Camera::V1_3::IStreamOperator> streamOperatorV1_3 =
         OHOS::HDI::Camera::V1_3::IStreamOperator::CastFrom(streamOperator);
     CHECK_RETURN_RET_ELOG(streamOperatorV1_3 == nullptr, CAMERA_UNKNOWN_ERROR,
-        "HStreamMetadata::EnableMetadataType streamOperatorV1_3 castFrom failed!");
+        "HStreamMetadata::EnableOrDisableMetadataType streamOperatorV1_3 castFrom failed!");
     OHOS::HDI::Camera::V1_2::CamRetCode rc;
     std::vector<uint8_t> typeTagToHal;
     for (auto& type : metadataTypes) {
diff --git a/services/camera_service/src/hstream_operator.cpp b/services/camera_service/src/hstream_operator.cpp
index 9409a1257..0533c6555 100644
--- a/services/camera_service/src/hstream_operator.cpp
+++ b/services/camera_service/src/hstream_operator.cpp
@@ -968,7 +968,7 @@ int32_t HStreamOperator::StartPreviewStream(const std::shared_ptr<OHOS::Camera::
 int32_t HStreamOperator::UpdateSettingForFocusTrackingMech(bool isEnableMech)
 {
     CHECK_RETURN_RET_ELOG(streamOperator_ == nullptr, CAMERA_INVALID_STATE,
-        "HStreamMetadata::EnableMetadataType streamOperator is nullptr");
+        "HStreamMetadata::UpdateSettingForFocusTrackingMech streamOperator is nullptr");
     uint32_t majorVer = 0;
     uint32_t minorVer = 0;
     streamOperator_->GetVersion(majorVer, minorVer);
@@ -979,7 +979,7 @@ int32_t HStreamOperator::UpdateSettingForFocusTrackingMech(bool isEnableMech)
     sptr<OHOS::HDI::Camera::V1_3::IStreamOperator> streamOperatorV1_3 =
         OHOS::HDI::Camera::V1_3::IStreamOperator::CastFrom(streamOperator_);
     CHECK_RETURN_RET_ELOG(streamOperatorV1_3 == nullptr, CAMERA_UNKNOWN_ERROR,
-        "HStreamMetadata::EnableMetadataType streamOperatorV1_3 castFrom failed!");
+        "HStreamMetadata::UpdateSettingForFocusTrackingMech streamOperatorV1_3 castFrom failed!");
     const int32_t DEFAULT_ITEMS = 1;
     const int32_t DEFAULT_DATA_LENGTH = 10;
     const uint32_t count = 1;
