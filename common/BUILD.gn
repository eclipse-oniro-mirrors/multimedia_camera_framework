# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("../multimedia_camera_framework.gni")

config("camera_utils_config") {
  include_dirs = [
    "utils",
    "utils/av_codec/include",
    "utils/camera_notification/include",
    "utils/image_framework/include",
    "utils/media_manager/include",
    "utils/moving_photo/include",
    "utils/moving_photo/include/avcodec",
    "utils/moving_photo/include/common",
    "${multimedia_camera_framework_path}/common",
    "${multimedia_camera_framework_path}/dynamic_libs/moving_photo/include/common",
    "${multimedia_camera_framework_path}/interfaces/inner_api/native/camera/include",
    "${multimedia_camera_framework_path}/services/camera_service/include",
    "${multimedia_camera_framework_path}/services/camera_service/binder/base/include",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/base",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/utils",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/base/task_manager",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/base/task_manager/task_group",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/base/timer",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/base/timer/core",
  ]
}

ohos_shared_library("camera_utils") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  branch_protector_ret = "pac_ret"
  cflags = [
    "-Werror",
    "-Os",
  ]

  sources = [
    "${multimedia_camera_framework_path}/services/deferred_processing_service/src/base/task_manager/task_group/base_task_group.cpp",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/src/base/task_manager/task_group/delayed_task_group.cpp",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/src/base/task_manager/task_group/task_group.cpp",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/src/base/task_manager/task_manager.cpp",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/src/base/task_manager/task_registry.cpp",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/src/base/task_manager/thread_pool.cpp",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/src/base/task_manager/thread_utils.cpp",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/src/base/timer/core/timer_core.cpp",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/src/base/timer/steady_clock.cpp",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/src/base/timer/time_broker.cpp",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/src/base/timer/camera_deferred_timer.cpp",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/src/utils/dp_utils.cpp",
    "utils/anonymization.cpp",
    "utils/av_codec/src/av_codec_proxy.cpp",
    "utils/camera_dynamic_loader.cpp",
    "utils/camera_metadata.cpp",
    "utils/camera_notification/src/camera_notification_proxy.cpp",
    "utils/camera_simple_timer.cpp",
    "utils/camera_timer.cpp",
    "utils/camera_xcollie.cpp",
    "utils/image_framework/src/image_source_proxy.cpp",
    "utils/media_manager/src/media_manager_proxy.cpp",
    "utils/moving_photo/src/moving_photo_proxy.cpp",
    "utils/photo_asset_proxy.cpp",
    "utils/picture_proxy.cpp",
  ]

  deps = [ "${multimedia_camera_framework_path}/services/camera_service/idls:camera_idl_sa_proxy", ]

  external_deps = [
    "audio_framework:audio_capturer",
    "audio_framework:audio_client",
    "audio_framework:offline_audio_effect",
    "av_codec:av_codec_client",
    "av_codec:native_media_acodec",
    "av_codec:native_media_codecbase",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "drivers_interface_camera:libbuffer_handle_sequenceable_1.0",
    "drivers_interface_camera:libmap_data_sequenceable_1.0",
    "drivers_interface_camera:metadata",    
    "graphic_surface:surface",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "image_framework:image_native",
    "ipc:ipc_core",
    "media_foundation:media_foundation",
    "media_foundation:native_media_core",
    "media_library:media_library",
    "samgr:samgr_proxy",
  ]

  defines = []

  if (hicollie_enable) {
    external_deps += [ "hicollie:libhicollie" ]
    defines += [ "HICOLLIE_ENABLE" ]
  }

  if (use_power_manager) {
    external_deps += [ "power_manager:powermgr_client" ]
    defines += [ "CAMERA_USE_POWER" ]
  }

  public_configs = [
    ":camera_utils_config",
    "../services/camera_service/idls:camera_sa_idl_config",
  ]
  part_name = "camera_framework"
  subsystem_name = "multimedia"
}
