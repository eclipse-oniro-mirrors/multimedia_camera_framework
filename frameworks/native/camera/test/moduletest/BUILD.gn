# Copyright (c) 2021-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("./../../../../../multimedia_camera_framework.gni")

module_output_path = "camera_framework/camera_framework_moduletest"

ohos_moduletest("camera_base_function_moduletest") {
  module_out_path = module_output_path

  include_dirs = [
    "${multimedia_camera_framework_path}/interfaces/inner_api/native/camera/include",
    "${multimedia_camera_framework_path}/interfaces/inner_api/native/test",
    "camera_base_function/include",
  ]

  sources = [
    "${multimedia_camera_framework_path}/interfaces/inner_api/native/test/test_common.cpp",
    "camera_base_function/src/camera_base_function_moduletest.cpp",
  ]

  deps = [
    "${multimedia_camera_framework_path}/frameworks/native/camera:camera_framework",
    "${multimedia_camera_framework_path}/services/camera_service:camera_service",
  ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "c_utils:utils",
    "drivers_interface_camera:libcamera_proxy_1.0",
    "drivers_interface_camera:libcamera_proxy_1.1",
    "graphic_surface:surface",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "ipc:ipc_core",
  ]

  cflags = [
    "-fPIC",
    "-fno-access-control",
  ]

  cflags_cc = cflags

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "${multimedia_camera_framework_path}/cfi_blocklist.txt"
  }
}

ohos_moduletest("camera_deferred_photo_moduletest") {
  module_out_path = module_output_path

  include_dirs = [
    "${multimedia_camera_framework_path}/interfaces/inner_api/native/camera/include",
    "${multimedia_camera_framework_path}/interfaces/inner_api/native/test",
    "camera_deferred_photo/include",
  ]

  sources = [
    "${multimedia_camera_framework_path}/interfaces/inner_api/native/test/test_common.cpp",
    "camera_deferred_photo/src/camera_deferred_photo_moduletest.cpp",
  ]

  deps = [
    "${multimedia_camera_framework_path}/frameworks/native/camera:camera_framework",
    "${multimedia_camera_framework_path}/services/camera_service:camera_service",
  ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "c_utils:utils",
    "drivers_interface_camera:libcamera_proxy_1.0",
    "drivers_interface_camera:libcamera_proxy_1.1",
    "graphic_surface:surface",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "image_framework:image",
    "image_framework:image_native",
    "ipc:ipc_core",
  ]

  cflags = [
    "-fPIC",
    "-fno-access-control",
  ]

  cflags_cc = cflags

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "${multimedia_camera_framework_path}/cfi_blocklist.txt"
  }
}

ohos_moduletest("camera_deferred_video_moduletest") {
  module_out_path = module_output_path

  include_dirs = [
    "${multimedia_camera_framework_path}/interfaces/inner_api/native/camera/include",
    "${multimedia_camera_framework_path}/interfaces/inner_api/native/test",
    "camera_deferred_video/include",
  ]

  sources = [
    "${multimedia_camera_framework_path}/interfaces/inner_api/native/test/test_common.cpp",
    "camera_deferred_video/src/camera_deferred_video_moduletest.cpp",
  ]

  deps = [
    "${multimedia_camera_framework_path}/frameworks/native/camera:camera_framework",
    "${multimedia_camera_framework_path}/services/camera_service:camera_service",
  ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "c_utils:utils",
    "drivers_interface_camera:libcamera_proxy_1.0",
    "drivers_interface_camera:libcamera_proxy_1.1",
    "graphic_surface:surface",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "ipc:ipc_core",
  ]

  cflags = [
    "-fPIC",
    "-fno-access-control",
  ]

  cflags_cc = cflags

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "${multimedia_camera_framework_path}/cfi_blocklist.txt"
  }
}

ohos_moduletest("camera_format_YUV_moduletest") {
  module_out_path = module_output_path

  include_dirs = [
    "${multimedia_camera_framework_path}/interfaces/inner_api/native/camera/include",
    "${multimedia_camera_framework_path}/interfaces/inner_api/native/test",
    "camera_format_YUV/include",
  ]

  sources = [
    "${multimedia_camera_framework_path}/interfaces/inner_api/native/test/test_common.cpp",
    "camera_format_YUV/src/camera_format_YUV_moduletest.cpp",
  ]

  deps = [
    "${multimedia_camera_framework_path}/frameworks/native/camera:camera_framework",
    "${multimedia_camera_framework_path}/services/camera_service:camera_service",
  ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "c_utils:utils",
    "drivers_interface_camera:libcamera_proxy_1.0",
    "drivers_interface_camera:libcamera_proxy_1.1",
    "graphic_surface:surface",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "ipc:ipc_core",
    "os_account:os_account_innerkits",
  ]

  cflags = [
    "-fPIC",
    "-fno-access-control",
  ]

  cflags_cc = cflags

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "${multimedia_camera_framework_path}/cfi_blocklist.txt"
  }
}

ohos_moduletest("camera_moving_photo_moduletest") {
  module_out_path = module_output_path

  include_dirs = [
    "./camera_moving_photo/include",
    "${multimedia_camera_framework_path}/interfaces/inner_api/native/camera/include",
    "${multimedia_camera_framework_path}/interfaces/inner_api/native/test",
  ]

  sources = [ "camera_moving_photo/src/camera_moving_photo_moduletest.cpp" ]

  deps = [ "${multimedia_camera_framework_path}/frameworks/native/camera:camera_framework" ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "drivers_interface_camera:libcamera_proxy_1.0",
    "drivers_interface_camera:libcamera_proxy_1.1",
    "graphic_surface:surface",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "image_framework:image",
    "image_framework:image_native",
    "image_framework:image_source",
    "image_framework:ohimage",
    "ipc:ipc_core",
    "media_library:media_library",
    "media_library:media_library_asset_manager",
    "media_library:media_library_manager",
    "media_library:native_media_asset_manager",
    "napi:ace_napi",
    "os_account:libaccountkits",
    "os_account:os_account_innerkits",
    "resource_management:librawfile",
    "safwk:system_ability_fwk",
  ]

  cflags = [ "-fPIC" ]
  cflags_cc = cflags
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "${multimedia_camera_framework_path}/cfi_blocklist.txt"
  }
}

ohos_moduletest("camera_session_moduletest") {
  module_out_path = module_output_path

  include_dirs = [
    "${multimedia_camera_framework_path}/interfaces/inner_api/native/camera/include",
    "${multimedia_camera_framework_path}/interfaces/inner_api/native/test",
    "camera_session/include",
  ]

  sources = [
    "${multimedia_camera_framework_path}/interfaces/inner_api/native/test/test_common.cpp",
    "camera_session/src/camera_session_moduletest.cpp",
  ]

  deps = [
    "${multimedia_camera_framework_path}/frameworks/native/camera:camera_framework",
    "${multimedia_camera_framework_path}/services/camera_service:camera_service",
  ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "c_utils:utils",
    "drivers_interface_camera:libcamera_proxy_1.0",
    "drivers_interface_camera:libcamera_proxy_1.1",
    "graphic_surface:surface",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "ipc:ipc_core",
  ]

  cflags = [
    "-fPIC",
    "-fno-access-control",
  ]

  cflags_cc = cflags

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "${multimedia_camera_framework_path}/cfi_blocklist.txt"
  }
}
