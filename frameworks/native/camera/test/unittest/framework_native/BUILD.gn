# Copyright (c) 2024-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("./../../../../../../multimedia_camera_framework.gni")

module_output_path = "camera_framework/camera_framework/camera_framework_native_unittest"

ohos_unittest("camera_framework_native_unittest") {
  module_out_path = module_output_path
  include_dirs = [
    "./camera_utils/include",
    "./device/include",
    "./input/include",
    "./manager/include",
    "./output/include",
    "./session/include",
    "./ability/include",
    "${multimedia_camera_framework_path}/services/camera_service/include",
    "${multimedia_camera_framework_path}/services/camera_service/include/rss",
    "${multimedia_camera_framework_path}/dynamic_libs/moving_photo/include/avcodec",
    "${multimedia_camera_framework_path}/dynamic_libs/moving_photo/include/common",
    "${multimedia_camera_framework_path}/services/camera_service/include/dfx",
    "${multimedia_camera_framework_path}/services/camera_service/binder/base/include",
    "${multimedia_camera_framework_path}/services/camera_service/binder/client/include",
    "${multimedia_camera_framework_path}/services/camera_service/binder/server/include",
    "${multimedia_camera_framework_path}/interfaces/inner_api/native/camera/include",
    "${multimedia_camera_framework_path}/interfaces/inner_api/native/test",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/base/task_manager",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/base/task_manager/task_group",
    "${multimedia_camera_framework_path}/interfaces/kits/native/include/",
    "${multimedia_camera_framework_path}/frameworks/native/ndk/impl",
    "${multimedia_camera_framework_path}/interfaces",
  ]

  sources = [
    "${multimedia_camera_framework_path}/interfaces/inner_api/native/test/test_common.cpp",
    "ability/src/camera_ability_unittest.cpp",
    "camera_utils/src/camera_utils_unittest.cpp",
    "device/src/camera_device_unittest.cpp",
    "input/src/camera_framework_input_unittest.cpp",
    "manager/src/camera_framework_manager_unittest.cpp",
    "manager/src/prelaunch_config_unittest.cpp",
    "output/src/camera_output_capability_unittest.cpp",
    "output/src/camera_photo_proxy_unittest.cpp",
    "output/src/capture_output_unittest.cpp",
    "output/src/depth_data_output_unittest.cpp",
    "output/src/metadata_output_unittest.cpp",
    "output/src/photo_output_unittest.cpp",
    "output/src/preview_output_unittest.cpp",
    "output/src/sketch_wrapper_unittest.cpp",
    "output/src/video_output_unittest.cpp",
    "session/src/capture_session_unittest.cpp",
    "session/src/mech_session_unittest.cpp",
    "session/src/moon_capture_boost_feature_unittest.cpp",
    "session/src/night_session_unittest.cpp",
    "session/src/panorama_session_unittest.cpp",
    "session/src/photo_session_unittest.cpp",
    "session/src/portrait_session_unittest.cpp",
    "session/src/profession_session_unittest.cpp",
    "session/src/scan_session_unittest.cpp",
    "session/src/secure_camera_session_unittest.cpp",
    "session/src/slow_motion_session_unittest.cpp",
    "session/src/time_lapse_photo_session_unittest.cpp",
    "session/src/video_session_unittest.cpp",
  ]

  deps = [
    "${multimedia_camera_framework_path}/common:camera_utils",
    "${multimedia_camera_framework_path}/frameworks/native/camera/base:camera_framework",
    "${multimedia_camera_framework_path}/frameworks/native/camera/extension:camera_framework_ex",
    "${multimedia_camera_framework_path}/services/camera_service:camera_service",
    "${multimedia_camera_framework_path}/test/test_common:test_common",
    "${multimedia_camera_framework_path}/dynamic_libs:camera_dynamic_moving_photo",
  ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libprivacy_sdk",
    "access_token:libtoken_setproc",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "audio_framework:audio_capturer",
    "audio_framework:audio_client",
    "audio_framework:offline_audio_effect",
    "av_codec:av_codec_client",
    "c_utils:utils",
    "cJSON:cjson_static",
    "common_event_service:cesfwk_innerkits",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "drivers_interface_camera:libbuffer_handle_sequenceable_1.0",
    "drivers_interface_camera:libcamera_proxy_1.0",
    "drivers_interface_camera:libcamera_proxy_1.1",
    "drivers_interface_camera:libmap_data_sequenceable_1.0",
    "drivers_interface_camera:metadata",
    "googletest:gmock_main",
    "graphic_surface:surface",
    "hdf_core:libhdi",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_core",
    "media_foundation:media_foundation",
    "media_foundation:native_media_core",
    "media_library:media_library",
    "media_library:media_library_manager",
    "os_account:os_account_innerkits",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "selinux_adapter:librestorecon",
    "window_manager:libdm_lite",
  ]

  defines = [ "private=public" ]
  if (use_sensor) {
    external_deps += [ "sensor:sensor_interface_native" ]
    defines += [ "CAMERA_USE_SENSOR" ]
  }

  cflags = [
    "-fPIC",
    "-Werror=unused",
    "--coverage",
  ]

  ldflags = [ "--coverage" ]

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "${multimedia_camera_framework_path}/cfi_blocklist.txt"
  }

  cflags_cc = cflags
  cflags_cc += [ "-fno-access-control" ]
}
