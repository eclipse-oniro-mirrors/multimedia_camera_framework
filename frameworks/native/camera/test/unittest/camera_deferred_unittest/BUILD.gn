# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("./../../../../../../multimedia_camera_framework.gni")

module_output_path = "camera_framework/camera_deferred_unittest"

ohos_unittest("camera_deferred_unittest") {
  module_out_path = module_output_path
  include_dirs = [
    "./camera_deferred_base_test/include",
    "./camera_deferred_dfx_test/include",
    "./camera_deferred_manager_test/include",
    "./camera_deferred_proc_test/include",
    "./camera_deferred_post_processor_test/include",
    "./camera_deferred_schedule_test/include",
    "./camera_deferred_session_test/include",
    "./camera_deferred_utils_test/include",
    "${multimedia_camera_framework_path}/services/camera_service/include",
    "${multimedia_camera_framework_path}/services/camera_service/include/avcodec",
    "${multimedia_camera_framework_path}/services/camera_service/include/avcodec/common",
    "${multimedia_camera_framework_path}/services/camera_service/binder/base/include",
    "${multimedia_camera_framework_path}/services/camera_service/binder/client/include",
    "${multimedia_camera_framework_path}/services/camera_service/binder/server/include",
    "${multimedia_camera_framework_path}/interfaces/inner_api/native/camera/include",
    "${multimedia_camera_framework_path}/interfaces/inner_api/native/test",
    "${multimedia_camera_framework_path}/interfaces/kits/native/include/",
    "${multimedia_camera_framework_path}/frameworks/native/ndk/impl",
    "${multimedia_camera_framework_path}/interfaces",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/base/buffer_manager/",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/base/",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/base/command_server/",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/schedule/photo_processor/photo_job_repository",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/binder/base/include",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/binder/client/include",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/binder/server/include",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/base/task_manager",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/base/task_manager/task_group",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/base/timer",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/base/timer/core",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/dfx",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/event_monitor",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/event_monitor/base",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/event_monitor/command",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/event_monitor/impl",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/media_manager",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/post_processor",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/post_processor/command",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/schedule",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/schedule/base",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/schedule/impl",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/schedule/photo_processor",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/schedule/photo_processor/strategy",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/schedule/video_processor",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/schedule/video_processor/strategy",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/schedule/video_processor/video_job_repository",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/session",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/session/command",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/session/photo_session",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/session/video_session",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/utils",
    "${multimedia_camera_framework_path}/interfaces/inner_api/native/camera/include/utils",
  ]

  sources = [
    "${multimedia_camera_framework_path}/interfaces/inner_api/native/test/test_common.cpp",
    "camera_deferred_proc_test/src/camera_deferred_proc_unittest.cpp",
  ]

  if (use_clang_coverage) {
    sources += [
      "camera_deferred_base_test/src/camera_deferred_base_unittest.cpp",
      "camera_deferred_dfx_test/src/dps_event_report_unittest.cpp",
      "camera_deferred_dfx_test/src/dps_video_report_unittest.cpp",
      "camera_deferred_manager_test/src/camera_deferred_manager_unittest.cpp",
      "camera_deferred_post_processor_test/src/camera_deferred_post_processor_unittest.cpp",
      "camera_deferred_schedule_test/src/deferred_photo_job_unittest.cpp",
      "camera_deferred_schedule_test/src/deferred_photo_processor_stratety_unittest.cpp",
      "camera_deferred_schedule_test/src/deferred_photo_processor_unittest.cpp",
      "camera_deferred_schedule_test/src/deferred_video_job_unittest.cpp",
      "camera_deferred_schedule_test/src/deferred_video_processor_stratety_unittest.cpp",
      "camera_deferred_session_test/src/camera_deferred_session_unittest.cpp",
      "camera_deferred_session_test/src/deferred_session_command_unittest.cpp",
      "camera_deferred_utils_test/src/deferred_utils_unittest.cpp",
    ]
  }

  deps = [
    "${multimedia_camera_framework_path}/common:camera_utils",
    "${multimedia_camera_framework_path}/frameworks/native/camera:camera_framework",
    "${multimedia_camera_framework_path}/services/camera_service:camera_service",
    "${multimedia_camera_framework_path}/services/deferred_processing_service:deferred_processing_service",
  ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libprivacy_sdk",
    "access_token:libtoken_setproc",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "audio_framework:audio_capturer",
    "audio_framework:audio_client",
    "av_codec:av_codec_client",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "drivers_interface_camera:libbuffer_handle_sequenceable_1.0",
    "drivers_interface_camera:libcamera_proxy_1.0",
    "drivers_interface_camera:libcamera_proxy_1.1",
    "drivers_interface_camera:libmap_data_sequenceable_1.0",
    "drivers_interface_camera:metadata",
    "drivers_peripheral_display:hdi_gralloc_client",
    "googletest:gmock_main",
    "graphic_2d:librender_service_client",
    "graphic_surface:buffer_handle",
    "graphic_surface:surface",
    "hdf_core:libhdi",
    "hicollie:libhicollie",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "ipc:ipc_core",
    "media_foundation:media_foundation",
    "media_foundation:native_media_core",
    "media_library:media_library",
    "media_library:media_library_manager",
    "memmgr:memmgrclient",
    "napi:ace_napi",
    "os_account:libaccountkits",
    "os_account:os_account_innerkits",
    "resource_management:librawfile",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "sensor:sensor_interface_native",
    "window_manager:libdm_lite",
  ]

  defines = [ "private=public" ]
  if (use_sensor) {
    external_deps += [ "sensor:sensor_interface_native" ]
    defines += [ "CAMERA_USE_SENSOR" ]
  }

  cflags = [
    "-fPIC",
    "-Werror=unused",
    "-fno-access-control",
  ]

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  cflags_cc = cflags
}
