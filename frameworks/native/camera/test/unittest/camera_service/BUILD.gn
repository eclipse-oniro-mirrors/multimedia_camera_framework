# Copyright (c) 2024-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("./../../../../../../multimedia_camera_framework.gni")

module_output_path = "camera_framework/camera_framework/camera_service_unittest"

ohos_unittest("camera_service_unittest") {
  module_out_path = module_output_path
  include_dirs = [
    "./avcodec/include",
    "./param_update/include",
    "./camera_service_common/include",
    "./client/include/",
    "./hdi_camera_test/include",
    "./hdi_stream_test/include",
    "./media_library/include",
    "./smooth_zoom/include",
    "${multimedia_camera_framework_path}/services/camera_service/include",
    "${multimedia_camera_framework_path}/services/camera_service/include/avcodec",
    "${multimedia_camera_framework_path}/services/camera_service/include/avcodec/common",
    "${multimedia_camera_framework_path}/services/camera_service/include/app_manager_utils",
    "${multimedia_camera_framework_path}/services/camera_service/include/camera_buffer_manager",
    "${multimedia_camera_framework_path}/services/camera_service/include/media_library",
    "${multimedia_camera_framework_path}/services/camera_service/include/param_update",
    "${multimedia_camera_framework_path}/services/camera_service/include/dfx",
    "${multimedia_camera_framework_path}/services/camera_service/include/smooth_zoom",
    "${multimedia_camera_framework_path}/services/camera_service/binder/base/include",
    "${multimedia_camera_framework_path}/services/camera_service/binder/client/include",
    "${multimedia_camera_framework_path}/services/camera_service/binder/server/include",
    "${multimedia_camera_framework_path}/interfaces/inner_api/native/camera/include",
    "${multimedia_camera_framework_path}/interfaces/inner_api/native/test",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/base/task_manager",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/base/task_manager/task_group",
    "${multimedia_camera_framework_path}/interfaces/kits/native/include/",
    "${multimedia_camera_framework_path}/frameworks/native/ndk/impl",
    "${multimedia_camera_framework_path}/interfaces",
    "${multimedia_camera_framework_path}/dynamic_libs/media_library/include",
  ]
  sources = [
    "${multimedia_camera_framework_path}/dynamic_libs/media_library/src/photo_asset_adapter.cpp",
    "${multimedia_camera_framework_path}/interfaces/inner_api/native/test/test_common.cpp",
    "${multimedia_camera_framework_path}/services/camera_service/src/avcodec/camera_server_photo_proxy.cpp",
    "hdi_camera_test/src/hcamera_host_manager_unittest.cpp",
    "hdi_stream_test/src/hcapture_session_unittest.cpp",
    "hdi_stream_test/src/hstream_capture_unittest.cpp",
    "hdi_stream_test/src/hstream_depth_data_unittest.cpp",
    "hdi_stream_test/src/hstream_metadata_unittest.cpp",
    "hdi_stream_test/src/hstream_repeat_unittest.cpp",
    "media_library/src/photo_asset_adapter_unittest.cpp",
  ]

  if (use_libfuzzer || use_clang_coverage || !using_hb_new) {
    sources += [
      "avcodec/src/audio_capturer_session_unittest.cpp",
      "avcodec/src/audio_encoder_unittest.cpp",
      "avcodec/src/audio_video_muxer_unittest.cpp",
      "avcodec/src/avcodec_task_manager_unittest.cpp",
      "avcodec/src/camera_server_photo_proxy_unittest.cpp",
      "avcodec/src/frame_record_unittest.cpp",
      "avcodec/src/moving_photo_video_cache_unittest.cpp",
      "avcodec/src/video_encoder_unittest.cpp",
      "camera_service_common/src/camera_app_manager_client_unittest.cpp",
      "camera_service_common/src/camera_app_manager_utils_unittest.cpp",
      "camera_service_common/src/camera_beauty_notification_unittest.cpp",
      "camera_service_common/src/camera_fwk_metadata_utils_unittest.cpp",
      "camera_service_common/src/camera_info_dumper_unittest.cpp",
      "camera_service_common/src/camera_privacy_unittest.cpp",
      "camera_service_common/src/camera_util_unittest.cpp",
      "camera_service_common/src/icamera_util_unittest.cpp",
      "client/src/camera_service_client_unittest.cpp",
      "hdi_camera_test/src/hcamera_device_manager_unittest.cpp",
      "hdi_camera_test/src/hcamera_device_unittest.cpp",
      "hdi_camera_test/src/hcamera_preconfig_unittest.cpp",
      "hdi_camera_test/src/hcamera_restore_param_unittest.cpp",
      "hdi_camera_test/src/hcamera_service_unittest.cpp",
      "hdi_stream_test/src/hstream_operator_unittest.cpp",
      "param_update/src/camera_rotate_param_sign_tools_unittest.cpp",
      "param_update/src/camera_rotate_param_manager_unittest.cpp",
      "param_update/src/camera_rotate_param_reader_unittest.cpp",
      "smooth_zoom/src/smooth_zoom_unittest.cpp",
      "smooth_zoom/src/cubic_bezier_unittest.cpp",
    ]
  }

  deps = [
    "${multimedia_camera_framework_path}/common:camera_utils",
    "${multimedia_camera_framework_path}/dynamic_libs:camera_dynamic_medialibrary",
    "${multimedia_camera_framework_path}/frameworks/native/camera/base:camera_framework",
    "${multimedia_camera_framework_path}/frameworks/native/camera/extension:camera_framework_ex",
    "${multimedia_camera_framework_path}/services/camera_service:camera_service",
    "${multimedia_camera_framework_path}/test/test_common:test_common",
  ]

  external_deps = [
    "ability_runtime:app_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libprivacy_sdk",
    "access_token:libtoken_setproc",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "audio_framework:audio_capturer",
    "audio_framework:audio_client",
    "audio_framework:offline_audio_effect",
    "av_codec:av_codec_client",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "cJSON:cjson_static",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "drivers_interface_camera:libbuffer_handle_sequenceable_1.0",
    "drivers_interface_camera:libcamera_proxy_1.0",
    "drivers_interface_camera:libcamera_proxy_1.1",
    "drivers_interface_display:libdisplay_commontype_proxy_1.0",
    "drivers_interface_camera:libmap_data_sequenceable_1.0",
    "drivers_interface_camera:metadata",
    "googletest:gmock_main",
    "graphic_2d:librender_service_client",
    "graphic_surface:buffer_handle",
    "graphic_surface:surface",
    "hdf_core:libhdi",
    "hicollie:libhicollie",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "i18n:intl_util",
    "init:libbegetutil",
    "ipc:ipc_core",
    "media_foundation:media_foundation",
    "media_foundation:native_media_core",
    "media_library:media_library",
    "media_library:media_library_manager",
    "memmgr:memmgrclient",
    "napi:ace_napi",
    "openssl:libcrypto_shared",
    "os_account:libaccountkits",
    "os_account:os_account_innerkits",
    "resource_management:librawfile",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "selinux_adapter:librestorecon",
    "sensor:sensor_interface_native",
    "window_manager:libdm_lite",
  ]

  defines = [
    "private=public",
    "protected=public",
  ]
  if (use_sensor) {
    external_deps += [ "sensor:sensor_interface_native" ]
    defines += [ "CAMERA_USE_SENSOR" ]
  }

  if (defined(global_parts_info) &&
      defined(
          global_parts_info.notification_distributed_notification_service)) {
    external_deps += [ "distributed_notification_service:ans_innerkits" ]
  }

  if (defined(global_parts_info) &&
      defined(
          global_parts_info.notification_distributed_notification_service)) {
    external_deps += [ "distributed_notification_service:ans_innerkits" ]
    defines += [ "NOTIFICATION_ENABLE" ]
  }

  cflags = [
    "-fPIC",
    "-Werror=unused",
    "-fno-access-control",
  ]
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "${multimedia_camera_framework_path}/cfi_blocklist.txt"
  }

  cflags_cc = cflags
}
