# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("./../../../../multimedia_camera_framework.gni")

config("camera_framework_public_config") {
  include_dirs = [
    "${multimedia_camera_framework_path}/frameworks/native/camera/extension/include",
    "${multimedia_camera_framework_path}/frameworks/native/camera/extension/include/input",
    "${multimedia_camera_framework_path}/frameworks/native/camera/extension/include/session",
    "${multimedia_camera_framework_path}/interfaces/inner_api/native/camera/include",
    "${multimedia_camera_framework_path}/interfaces/inner_api/native/camera/include/input",
    "${multimedia_camera_framework_path}/interfaces/inner_api/native/camera/include/output",
    "${multimedia_camera_framework_path}/interfaces/inner_api/native/camera/include/session",
    "${multimedia_camera_framework_path}/interfaces/inner_api/native/camera/include/deferred_proc_session",
    "${multimedia_camera_framework_path}/interfaces/inner_api/native/camera/include/utils",
    "../interfaces/inner_api/native/camera/include/mode",
    "../../../interfaces/inner_api/native/camera/include/utils",
  ]
}

config("camera_framework_local_config") {
  include_dirs = [
    "${multimedia_camera_framework_path}/services/camera_service/include",
    "${multimedia_camera_framework_path}/services/camera_service/binder/base/include",
    "${multimedia_camera_framework_path}/services/camera_service/binder/client/include",
    "${multimedia_camera_framework_path}/services/camera_service/binder/server/include",
    "${multimedia_camera_framework_path}/interfaces/inner_api/native/camera/include",
    "${multimedia_camera_framework_path}/common/utils",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/base",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/utils",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/binder/base/include",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/binder/client/include",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/binder/server/include",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/session",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/session/photo_session",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/include/session/video_session",
  ]
}

ohos_shared_library("camera_framework_ex") {
  branch_protector_ret = "pac_ret"
  install_enable = true
  sources = [
    "src/input/camera_manager_for_sys.cpp",
    "src/output/depth_data_output.cpp",
    "src/session/aperture_video_session.cpp",
    "src/session/capture_session_for_sys.cpp",
    "src/session/fluorescence_photo_session.cpp",
    "src/session/high_res_photo_session.cpp",
    "src/session/light_painting_session.cpp",
    "src/session/macro_photo_session.cpp",
    "src/session/macro_video_session.cpp",
    "src/session/night_session.cpp",
    "src/session/panorama_session.cpp",
    "src/session/photo_session_for_sys.cpp",
    "src/session/portrait_session.cpp",
    "src/session/profession_session.cpp",
    "src/session/quick_shot_photo_session.cpp",
    "src/session/secure_camera_session_for_sys.cpp",
    "src/session/slow_motion_session.cpp",
    "src/session/time_lapse_photo_session.cpp",
    "src/session/video_session_for_sys.cpp",
  ]

  cflags = [
    "-fPIC",
    "-Wall",
    "-DSUPPORT_CAMERA_AUTH",
    "-DIMAGE_COLORSPACE_FLAG",
    "-Os",
    "-fno-merge-all-constants",
    "-flto",
    "-ffunction-sections"
  ]

  ldflags = [
    "-Wl,--gc-sections",
    "-fPIE",
  ]

  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  if (build_variant == "user") {
    cflags += [ "-DIS_RELEASE_VERSION" ]
  }
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  public_configs = [
    ":camera_framework_public_config",
    ":camera_framework_local_config",
    "${multimedia_camera_framework_path}/services/camera_service/idls:camera_sa_idl_config",
    "${multimedia_camera_framework_path}/services/deferred_processing_service/idls:deferred_processing_service_idl_config",
  ]

  public_external_deps = [ "drivers_interface_camera:metadata" ]

  deps = [ 
    "${multimedia_camera_framework_path}/common:camera_utils",
    "${multimedia_camera_framework_path}/frameworks/native/camera/base:camera_framework",
  ]

  external_deps = [
    "c_utils:utils",
    "drivers_interface_camera:libcamera_proxy_1.0",
    "drivers_interface_camera:libcamera_proxy_1.1",
    "drivers_interface_camera:libcamera_proxy_1.2",
    "drivers_interface_camera:libcamera_proxy_1.3",
    "graphic_surface:surface",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "image_framework:image_native",
    "ipc:ipc_core",

  ]

  defines = []
  if (use_sensor) {
    external_deps += [ "sensor:sensor_interface_native" ]
    defines += [ "CAMERA_USE_SENSOR" ]
  }

  if (is_emulator) {
    defines += [ "CAMERA_EMULATOR" ]
  }

  cflags_cc = cflags
  innerapi_tags = [ "platformsdk" ]
  part_name = "camera_framework"
  subsystem_name = "multimedia"
}
