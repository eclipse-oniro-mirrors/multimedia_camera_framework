From 282eb6d4f8303cd818a1abace4e02c60cd3d4084 Mon Sep 17 00:00:00 2001
From: w00808468 <w00808468@notesmail.huawei.com/>
Date: Tue, 23 Apr 2024 19:30:07 +0800
Subject: [PATCH] TicketNo:DTS2024042918315 Description:secure camera test
 Team:EMUI Feature or Bugfix:Bugfix Binary Source:No PrivateCode(Yes/No):No

Change-Id: Icce42b05da792dcf0d45a0d77c5e574cef8b2996
(cherry picked from commit cf43b5e6e854fabdb2d01e9181459fb1e0c34e9d)
(cherry picked from commit 331bdd0dd48d0d4dd2e52901efc056d7ce62fd0f)
Reviewed-by: s00565270
Approved-by: n00564676
Merged-on: https://open.codehub.huawei.com/OpenSourceCenter_CR/openharmony/multimedia_camera_framework/-/change_requests/1070
Merged-by: public hisicitools
---
 .../js/camera_napi/src/camera_napi_utils.cpp  |  11 ++
 .../src/input/camera_input_napi.cpp           |  32 +++-
 .../src/input/camera_manager_napi.cpp         |   4 +-
 .../src/mode/mode_manager_napi.cpp            |   3 +
 .../src/mode/secure_camera_session_napi.cpp   | 172 ++++++++++++++++++
 .../src/native_module_ohos_camera.cpp         |   1 +
 .../src/session/camera_session_napi.cpp       |   2 +-
 frameworks/native/camera/BUILD.gn             |   1 +
 .../native/camera/src/input/camera_input.cpp  |  35 ++++
 .../camera/src/input/camera_manager.cpp       |   7 +-
 .../camera/src/session/capture_session.cpp    | 101 ++++++----
 .../src/session/secure_camera_session.cpp     |  43 +++++
 .../src/v1_1/camera_framework_unittest.cpp    | 164 +++++++++--------
 frameworks/native/ndk/camera_input.cpp        |   9 +
 frameworks/native/ndk/capture_session.cpp     |  13 ++
 .../native/ndk/impl/camera_input_impl.cpp     |   7 +
 .../native/ndk/impl/camera_input_impl.h       |   2 +
 .../native/ndk/impl/capture_session_impl.cpp  |  14 ++
 .../native/ndk/impl/capture_session_impl.h    |   4 +
 .../camera/include/input/camera_input.h       |   5 +
 .../camera/include/input/capture_input.h      |   5 +
 .../include/session/capture_scene_const.h     |   2 +
 .../camera/include/session/capture_session.h  |   2 +
 .../include/session/secure_camera_session.h   |  39 ++++
 .../camera_napi/@ohos.multimedia.camera.d.ts  | 102 ++++++++++-
 interfaces/kits/js/camera_napi/BUILD.gn       |   1 +
 .../camera_napi/include/camera_napi_utils.h   |   9 +-
 .../include/input/camera_input_napi.h         |   1 +
 .../camera_napi/include/input/camera_napi.h   |   1 +
 .../include/mode/secure_camera_session_napi.h |  45 +++++
 .../include/native_module_ohos_camera.h       |   2 +
 .../include/session/camera_session_napi.h     |   2 +
 .../kits/native/include/camera/camera.h       |  26 +++
 .../native/include/camera/camera.ndk.json     |   3 +
 .../kits/native/include/camera/camera_input.h |  15 ++
 .../native/include/camera/capture_session.h   |  24 +++
 .../camera_service_ipc_interface_code.h       |   3 +-
 .../base/include/icamera_device_service.h     |   2 +
 .../binder/base/include/istream_repeat.h      |   2 +
 .../client/include/hcamera_device_proxy.h     |   2 +
 .../client/include/hstream_repeat_proxy.h     |   2 +
 .../client/src/hcamera_device_proxy.cpp       |  18 ++
 .../client/src/hstream_repeat_proxy.cpp       |  16 ++
 .../server/include/hcamera_device_stub.h      |   1 +
 .../binder/server/src/hcamera_device_stub.cpp |  22 ++-
 .../binder/server/src/hstream_repeat_stub.cpp |   2 +
 services/camera_service/include/camera_log.h  |   2 +-
 .../camera_service/include/hcamera_device.h   |   7 +-
 .../include/hcamera_host_manager.h            |   3 +-
 .../camera_service/include/hstream_common.h   |   1 +
 .../camera_service/include/hstream_repeat.h   |   2 +
 .../camera_service/src/hcamera_device.cpp     |  87 +++++++--
 .../src/hcamera_host_manager.cpp              |  36 ++--
 .../camera_service/src/hcapture_session.cpp   |  12 ++
 .../camera_service/src/hstream_repeat.cpp     |  20 ++
 55 files changed, 991 insertions(+), 158 deletions(-)
 mode change 100644 => 100755 frameworks/js/camera_napi/src/input/camera_input_napi.cpp
 create mode 100755 frameworks/js/camera_napi/src/mode/secure_camera_session_napi.cpp
 create mode 100755 frameworks/native/camera/src/session/secure_camera_session.cpp
 create mode 100755 interfaces/inner_api/native/camera/include/session/secure_camera_session.h
 create mode 100755 interfaces/kits/js/camera_napi/include/mode/secure_camera_session_napi.h

diff --git a/frameworks/js/camera_napi/src/camera_napi_utils.cpp b/frameworks/js/camera_napi/src/camera_napi_utils.cpp
index ec2569eb..03d94922 100644
--- a/frameworks/js/camera_napi/src/camera_napi_utils.cpp
+++ b/frameworks/js/camera_napi/src/camera_napi_utils.cpp
@@ -22,6 +22,7 @@
 
 namespace OHOS {
 namespace CameraStandard {
+bool CameraNapiUtils::mEnableSecure = false;
 void CameraNapiUtils::CreateNapiErrorObject(napi_env env, int32_t errorCode, const char* errString,
     std::unique_ptr<JSAsyncContextOutput> &jsContext)
 {
@@ -82,6 +83,16 @@ int32_t CameraNapiUtils::IncreamentAndGet(uint32_t &num)
     return num;
 }
 
+bool CameraNapiUtils::GetEnableSecureCamera()
+{
+    return mEnableSecure;
+}
+
+void CameraNapiUtils::IsEnableSecureCamera(bool isEnable)
+{
+    mEnableSecure = isEnable;
+}
+
 bool CameraNapiUtils::CheckInvalidArgument(napi_env env, size_t argc, int32_t length,
     napi_value *argv, CameraSteps step)
 {
diff --git a/frameworks/js/camera_napi/src/input/camera_input_napi.cpp b/frameworks/js/camera_napi/src/input/camera_input_napi.cpp
old mode 100644
new mode 100755
index 9a449086..f52ecace
--- a/frameworks/js/camera_napi/src/input/camera_input_napi.cpp
+++ b/frameworks/js/camera_napi/src/input/camera_input_napi.cpp
@@ -280,12 +280,20 @@ void CommonCompleteCallback(napi_env env, napi_status status, void* data)
 
     MEDIA_INFO_LOG("%{public}s, modeForAsync = %{public}d, status = %{public}d",
         context->funcName.c_str(), context->modeForAsync, context->status);
+    uint64_t secureCameraSeqId = 0L;
     switch (context->modeForAsync) {
         case OPEN_ASYNC_CALLBACK:
             if (context->objectInfo && context->objectInfo->GetCameraInput()) {
-                context->errorCode = context->objectInfo->GetCameraInput()->Open();
+                if (context->isEnableSecCam) {
+                    context->errorCode = context->objectInfo->GetCameraInput()->Open(true, &secureCameraSeqId);
+                    MEDIA_INFO_LOG("%{public}s, SeqId = %{public}" PRIu64 "",
+                                   context->funcName.c_str(), secureCameraSeqId);
+                } else {
+                    context->errorCode = context->objectInfo->GetCameraInput()->Open();
+                }
                 context->status = context->errorCode == 0;
                 jsContext->status = context->status;
+                CameraNapiUtils::IsEnableSecureCamera(false);
             }
             break;
         case CLOSE_ASYNC_CALLBACK:
@@ -293,6 +301,7 @@ void CommonCompleteCallback(napi_env env, napi_status status, void* data)
                 context->errorCode = context->objectInfo->GetCameraInput()->Close();
                 context->status = context->errorCode == 0;
                 jsContext->status = context->status;
+                CameraNapiUtils::IsEnableSecureCamera(false);
             }
             break;
         case RELEASE_ASYNC_CALLBACK:
@@ -308,7 +317,11 @@ void CommonCompleteCallback(napi_env env, napi_status status, void* data)
     if (!context->status) {
         CameraNapiUtils::CreateNapiErrorObject(env, context->errorCode, context->errorMsg.c_str(), jsContext);
     } else {
-        napi_get_undefined(env, &jsContext->data);
+        if (context->isEnableSecCam) {
+            napi_create_bigint_uint64(env, secureCameraSeqId, &jsContext->data);
+        } else {
+            napi_get_undefined(env, &jsContext->data);
+        }
     }
 
     if (!context->funcName.empty() && context->taskId > 0) {
@@ -331,7 +344,7 @@ napi_value CameraInputNapi::Open(napi_env env, napi_callback_info info)
     const int32_t refCount = 1;
     napi_value resource = nullptr;
     size_t argc = ARGS_ONE;
-    napi_value argv[ARGS_ONE] = {0};
+    napi_value argv[ARGS_TWO] = {0};
     napi_value thisVar = nullptr;
 
     CAMERA_NAPI_GET_JS_ARGS(env, info, argc, argv, thisVar);
@@ -342,7 +355,16 @@ napi_value CameraInputNapi::Open(napi_env env, napi_callback_info info)
     status = napi_unwrap(env, thisVar, reinterpret_cast<void**>(&asyncContext->objectInfo));
     if (status == napi_ok && asyncContext->objectInfo != nullptr) {
         if (argc == ARGS_ONE) {
-            CAMERA_NAPI_GET_JS_ASYNC_CB_REF(env, argv[PARAM0], refCount, asyncContext->callbackRef);
+            bool isEnableSecureCamera = false;
+            napi_valuetype valuetype;
+            status = napi_typeof(env, argv[PARAM0], &valuetype);
+            if (status ==napi_ok && valuetype == napi_boolean) {
+                napi_get_value_bool(env, argv[PARAM0], &isEnableSecureCamera);
+                CameraNapiUtils::IsEnableSecureCamera(isEnableSecureCamera);
+                MEDIA_DEBUG_LOG("set  EnableSecureCamera CameraInputNapi::Open");
+            } else {
+                CAMERA_NAPI_GET_JS_ASYNC_CB_REF(env, argv[PARAM0], refCount, asyncContext->callbackRef);
+            }
         }
 
         CAMERA_NAPI_CREATE_PROMISE(env, asyncContext->callbackRef, asyncContext->deferred, result);
@@ -359,6 +381,8 @@ napi_value CameraInputNapi::Open(napi_env env, napi_callback_info info)
                 if (context->objectInfo != nullptr) {
                     context->status = true;
                     context->modeForAsync = OPEN_ASYNC_CALLBACK;
+                    context->isEnableSecCam = CameraNapiUtils::GetEnableSecureCamera();
+                    MEDIA_DEBUG_LOG("set  context->isEnableSecCam CameraInputNapi::Open");
                 }
             },
             CommonCompleteCallback, static_cast<void*>(asyncContext.get()), &asyncContext->work);
diff --git a/frameworks/js/camera_napi/src/input/camera_manager_napi.cpp b/frameworks/js/camera_napi/src/input/camera_manager_napi.cpp
index 843c9cad..6a357be7 100644
--- a/frameworks/js/camera_napi/src/input/camera_manager_napi.cpp
+++ b/frameworks/js/camera_napi/src/input/camera_manager_napi.cpp
@@ -40,7 +40,7 @@
 #include "mode/slow_motion_session_napi.h"
 #include "mode/video_session_for_sys_napi.h"
 #include "mode/video_session_napi.h"
-
+#include "mode/secure_camera_session_napi.h"
 namespace OHOS {
 namespace CameraStandard {
 using namespace std;
@@ -569,6 +569,8 @@ napi_value CameraManagerNapi::CreateSessionInstance(napi_env env, napi_callback_
             break;
         case JsSceneMode::JS_PROFESSIONAL_VIDEO:
             result = ProfessionSessionNapi::CreateCameraSession(env, SceneMode::PROFESSIONAL_VIDEO);
+        case JsSceneMode::JS_SECURE_CAMERA:
+            result = SecureCameraSessionNapi::CreateCameraSession(env);
             break;
         case JsSceneMode::JS_HIGH_RES_PHOTO:
             if (CameraNapiSecurity::CheckSystemApp(env, false)) {
diff --git a/frameworks/js/camera_napi/src/mode/mode_manager_napi.cpp b/frameworks/js/camera_napi/src/mode/mode_manager_napi.cpp
index fdada8d6..424eba70 100644
--- a/frameworks/js/camera_napi/src/mode/mode_manager_napi.cpp
+++ b/frameworks/js/camera_napi/src/mode/mode_manager_napi.cpp
@@ -273,6 +273,9 @@ napi_value ModeManagerNapi::GetSupportedOutputCapability(napi_env env, napi_call
         case JS_NIGHT:
             result = CameraOutputCapabilityNapi::CreateCameraOutputCapability(env, cameraInfo, SceneMode::NIGHT);
             break;
+        case JS_SECURE_CAMERA:
+            result = CameraOutputCapabilityNapi::CreateCameraOutputCapability(env, cameraInfo, SceneMode::SECURE);
+            break;
         default:
             MEDIA_ERR_LOG("ModeManagerNapi::CreateCameraSessionInstance mode = %{public}d not supported", sceneMode);
             break;
diff --git a/frameworks/js/camera_napi/src/mode/secure_camera_session_napi.cpp b/frameworks/js/camera_napi/src/mode/secure_camera_session_napi.cpp
new file mode 100755
index 00000000..0f2525de
--- /dev/null
+++ b/frameworks/js/camera_napi/src/mode/secure_camera_session_napi.cpp
@@ -0,0 +1,172 @@
+/*
+ * Copyright (c) 2024-2024 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "mode/secure_camera_session_napi.h"
+
+namespace OHOS {
+namespace CameraStandard {
+using namespace std;
+
+thread_local napi_ref SecureCameraSessionNapi::sConstructor_ = nullptr;
+
+SecureCameraSessionNapi::SecureCameraSessionNapi() : env_(nullptr), wrapper_(nullptr)
+{
+}
+SecureCameraSessionNapi::~SecureCameraSessionNapi()
+{
+    MEDIA_DEBUG_LOG("~SecureCameraSessionNapi is called");
+    if (wrapper_ != nullptr) {
+        napi_delete_reference(env_, wrapper_);
+    }
+    if (secureCameraSession_) {
+        secureCameraSession_ = nullptr;
+    }
+}
+void SecureCameraSessionNapi::SecureCameraSessionNapiDestructor(napi_env env, void* nativeObject, void* finalize_hint)
+{
+    MEDIA_DEBUG_LOG("SecureCameraSessionNapiDestructor is called");
+    SecureCameraSessionNapi* cameraObj = reinterpret_cast<SecureCameraSessionNapi*>(nativeObject);
+    if (cameraObj != nullptr) {
+        delete cameraObj;
+    }
+}
+napi_value SecureCameraSessionNapi::Init(napi_env env, napi_value exports)
+{
+    MEDIA_DEBUG_LOG("Init is called");
+    napi_status status;
+    napi_value ctorObj;
+    std::vector<napi_property_descriptor> manual_exposure_props = {
+            DECLARE_NAPI_FUNCTION("addSecureOutput", SecureCameraSessionNapi::AddSecureOutput)
+    };
+    std::vector<std::vector<napi_property_descriptor>> descriptors = {camera_process_props, stabilization_props,
+        flash_props, auto_exposure_props, focus_props, zoom_props, filter_props, beauty_props,
+        color_effect_props, macro_props, color_management_props, manual_exposure_props};
+    std::vector<napi_property_descriptor> secure_camera_session_props =
+        CameraNapiUtils::GetPropertyDescriptor(descriptors);
+    status = napi_define_class(env, SECURE_CAMERA_SESSION_NAPI_CLASS_NAME, NAPI_AUTO_LENGTH,
+        SecureCameraSessionNapiConstructor, nullptr,
+        secure_camera_session_props.size(),
+        secure_camera_session_props.data(), &ctorObj);
+    if (status == napi_ok) {
+        int32_t refCount = 1;
+        status = napi_create_reference(env, ctorObj, refCount, &sConstructor_);
+        if (status == napi_ok) {
+            status = napi_set_named_property(env, exports, SECURE_CAMERA_SESSION_NAPI_CLASS_NAME, ctorObj);
+            if (status == napi_ok) {
+                return exports;
+            }
+        }
+    }
+    MEDIA_ERR_LOG("Init call Failed!");
+    return nullptr;
+}
+
+napi_value SecureCameraSessionNapi::CreateCameraSession(napi_env env)
+{
+    MEDIA_DEBUG_LOG("CreateCameraSession is called");
+    CAMERA_SYNC_TRACE;
+    napi_status status;
+    napi_value result = nullptr;
+    napi_value constructor;
+    status = napi_get_reference_value(env, sConstructor_, &constructor);
+    if (status == napi_ok) {
+        sCameraSession_ = CameraManager::GetInstance()->CreateCaptureSession(SceneMode::SECURE);
+        if (sCameraSession_ == nullptr) {
+            MEDIA_ERR_LOG("Failed to create Camera session instance");
+            napi_get_undefined(env, &result);
+            return result;
+        }
+        status = napi_new_instance(env, constructor, 0, nullptr, &result);
+        sCameraSession_ = nullptr;
+        if (status == napi_ok && result != nullptr) {
+            MEDIA_DEBUG_LOG("success to create Camera session napi instance");
+            return result;
+        } else {
+            MEDIA_ERR_LOG("Failed to create Camera session napi instance");
+        }
+    }
+    MEDIA_ERR_LOG("Failed to create Camera session napi instance last");
+    napi_get_undefined(env, &result);
+    return result;
+}
+
+napi_value SecureCameraSessionNapi::AddSecureOutput(napi_env env, napi_callback_info info)
+{
+    MEDIA_INFO_LOG("AddSecureOutput is called");
+    napi_status status;
+    napi_value result = nullptr;
+    size_t argc = ARGS_ONE;
+    napi_value argv[ARGS_ONE] = {0};
+    napi_value thisVar = nullptr;
+
+    CAMERA_NAPI_GET_JS_ARGS(env, info, argc, argv, thisVar);
+    if (!CameraNapiUtils::CheckInvalidArgument(env, argc, ARGS_ONE, argv, ADD_OUTPUT)) {
+        return result;
+    }
+
+    napi_get_undefined(env, &result);
+    SecureCameraSessionNapi* secureCameraSessionNapi = nullptr;
+    status = napi_unwrap(env, thisVar, reinterpret_cast<void**>(&secureCameraSessionNapi));
+    if (status == napi_ok && secureCameraSessionNapi != nullptr) {
+        sptr<CaptureOutput> cameraOutput = nullptr;
+        MEDIA_INFO_LOG("AddSecureOutput GetJSArgsForCameraOutput is called");
+        result = GetJSArgsForCameraOutput(env, argc, argv, cameraOutput);
+        int32_t ret = secureCameraSessionNapi->secureCameraSession_->AddSecureOutput(cameraOutput);
+        if (!CameraNapiUtils::CheckError(env, ret)) {
+            return nullptr;
+        }
+    } else {
+        MEDIA_ERR_LOG("AddOutput call Failed!");
+    }
+    return result;
+}
+
+napi_value SecureCameraSessionNapi::SecureCameraSessionNapiConstructor(napi_env env, napi_callback_info info)
+{
+    MEDIA_DEBUG_LOG("SecureCameraSessionNapiConstructor is called");
+    napi_status status;
+    napi_value result = nullptr;
+    napi_value thisVar = nullptr;
+
+    napi_get_undefined(env, &result);
+    CAMERA_NAPI_GET_JS_OBJ_WITH_ZERO_ARGS(env, info, status, thisVar);
+
+    if (status == napi_ok && thisVar != nullptr) {
+        std::unique_ptr<SecureCameraSessionNapi> obj = std::make_unique<SecureCameraSessionNapi>();
+        obj->env_ = env;
+        if (sCameraSession_ == nullptr) {
+            MEDIA_ERR_LOG("sCameraSession_ is null");
+            return result;
+        }
+        obj->secureCameraSession_ = static_cast<SecureCameraSession*>(sCameraSession_.GetRefPtr());
+        obj->cameraSession_ = obj->secureCameraSession_;
+        if (obj->secureCameraSession_ == nullptr) {
+            MEDIA_ERR_LOG("secureCameraSession_ is null");
+            return result;
+        }
+        status = napi_wrap(env, thisVar, reinterpret_cast<void*>(obj.get()),
+                           SecureCameraSessionNapi::SecureCameraSessionNapiDestructor, nullptr, nullptr);
+        if (status == napi_ok) {
+            obj.release();
+            return thisVar;
+        } else {
+            MEDIA_ERR_LOG("SecureCameraSessionNapi Failure wrapping js to native napi");
+        }
+    }
+    MEDIA_ERR_LOG("SecureCameraSessionNapi call Failed!");
+    return result;
+}
+} // namespace CameraStandard
+} // namespace OHOS
\ No newline at end of file
diff --git a/frameworks/js/camera_napi/src/native_module_ohos_camera.cpp b/frameworks/js/camera_napi/src/native_module_ohos_camera.cpp
index 8fb907bd..fa2188a7 100644
--- a/frameworks/js/camera_napi/src/native_module_ohos_camera.cpp
+++ b/frameworks/js/camera_napi/src/native_module_ohos_camera.cpp
@@ -52,6 +52,7 @@ static napi_value Export(napi_env env, napi_value exports)
     ModeManagerNapi::Init(env, exports);
     PhotoNapi::Init(env, exports);
     DeferredPhotoProxyNapi::Init(env, exports);
+    SecureCameraSessionNapi::Init(env, exports);
     return exports;
 }
 
diff --git a/frameworks/js/camera_napi/src/session/camera_session_napi.cpp b/frameworks/js/camera_napi/src/session/camera_session_napi.cpp
index c1eff1cb..30709aa6 100644
--- a/frameworks/js/camera_napi/src/session/camera_session_napi.cpp
+++ b/frameworks/js/camera_napi/src/session/camera_session_napi.cpp
@@ -1095,7 +1095,7 @@ napi_value CameraSessionNapi::RemoveInput(napi_env env, napi_callback_info info)
     return result;
 }
 
-napi_value GetJSArgsForCameraOutput(napi_env env, size_t argc, const napi_value argv[],
+napi_value CameraSessionNapi::GetJSArgsForCameraOutput(napi_env env, size_t argc, const napi_value argv[],
     sptr<CaptureOutput> &cameraOutput)
 {
     MEDIA_DEBUG_LOG("GetJSArgsForCameraOutput is called");
diff --git a/frameworks/native/camera/BUILD.gn b/frameworks/native/camera/BUILD.gn
index 8ef3af9b..c104825a 100644
--- a/frameworks/native/camera/BUILD.gn
+++ b/frameworks/native/camera/BUILD.gn
@@ -99,6 +99,7 @@ ohos_shared_library("camera_framework") {
     "src/session/profession_session.cpp",
     "src/session/scan_session.cpp",
     "src/session/slow_motion_session.cpp",
+    "src/session/secure_camera_session.cpp",
     "src/session/video_session.cpp",
     "src/utils/camera_buffer_handle_utils.cpp",
     "src/utils/camera_security_utils.cpp",
diff --git a/frameworks/native/camera/src/input/camera_input.cpp b/frameworks/native/camera/src/input/camera_input.cpp
index e698a22e..4b1c303e 100644
--- a/frameworks/native/camera/src/input/camera_input.cpp
+++ b/frameworks/native/camera/src/input/camera_input.cpp
@@ -29,6 +29,7 @@
 
 namespace OHOS {
 namespace CameraStandard {
+using OHOS::HDI::Camera::V1_3::OperationMode;
 int32_t CameraDeviceServiceCallback::OnError(const int32_t errorType, const int32_t errorMsg)
 {
     std::lock_guard<std::mutex> lock(deviceCallbackMutex_);
@@ -147,6 +148,40 @@ int CameraInput::Open()
     return ServiceToCameraError(retCode);
 }
 
+int CameraInput::Open(bool isEnableSecureCamera, uint64_t* secureSeqId)
+{
+    std::lock_guard<std::mutex> lock(interfaceMutex_);
+    MEDIA_DEBUG_LOG("Enter Into CameraInput::OpenSecureCamera");
+    int32_t retCode = CAMERA_UNKNOWN_ERROR;
+    bool isSupportSecCamera = false;
+    if (isEnableSecureCamera) {
+        std::shared_ptr<OHOS::Camera::CameraMetadata> baseMetadata = cameraObj_->GetMetadata();
+        camera_metadata_item_t item;
+        retCode = OHOS::Camera::FindCameraMetadataItem(baseMetadata->get(), OHOS_ABILITY_CAMERA_MODES, &item);
+        if (retCode != CAM_META_SUCCESS || item.count == 0) {
+            MEDIA_ERR_LOG("CaptureSession::GetSupportedModes Failed with return code %{public}d", retCode);
+            return retCode;
+        }
+        for (uint32_t i = 0; i < item.count; i++) {
+            if (item.data.u8[i] == SECURE) {
+                isSupportSecCamera = true;
+            }
+        }
+    }
+
+    if (deviceObj_) {
+        retCode = isSupportSecCamera ? (deviceObj_->OpenSecureCamera(secureSeqId)) : (deviceObj_->Open());
+        if (retCode != CAMERA_OK) {
+            MEDIA_ERR_LOG("Failed to open Camera Input, retCode: %{public}d, isSupportSecCamera is %{public}d",
+                retCode, isSupportSecCamera);
+        }
+    } else {
+        MEDIA_ERR_LOG("CameraInput::OpenSecureCamera() deviceObj_ is nullptr");
+    }
+    MEDIA_INFO_LOG("Enter Into CameraInput::OpenSecureCamera secureSeqId = %{public}" PRIu64, *secureSeqId);
+    return ServiceToCameraError(retCode);
+}
+
 int CameraInput::Close()
 {
     std::lock_guard<std::mutex> lock(interfaceMutex_);
diff --git a/frameworks/native/camera/src/input/camera_manager.cpp b/frameworks/native/camera/src/input/camera_manager.cpp
index bc7a3253..3930aac9 100644
--- a/frameworks/native/camera/src/input/camera_manager.cpp
+++ b/frameworks/native/camera/src/input/camera_manager.cpp
@@ -38,6 +38,7 @@
 #include "session/scan_session.h"
 #include "session/video_session.h"
 #include "session/high_res_photo_session.h"
+#include "session/secure_camera_session.h"
 #include "system_ability_definition.h"
 
 using namespace std;
@@ -85,7 +86,8 @@ const std::unordered_map<OperationMode, SceneMode> g_metaToFwSupportedMode_ = {
     {OperationMode::CAPTURE_MACRO, CAPTURE_MACRO},
     {OperationMode::VIDEO_MACRO, VIDEO_MACRO},
     {OperationMode::HIGH_FRAME_RATE, HIGH_FRAME_RATE},
-    {OperationMode::HIGH_RESOLUTION_PHOTO, HIGH_RES_PHOTO}
+    {OperationMode::HIGH_RESOLUTION_PHOTO, HIGH_RES_PHOTO},
+    {OperationMode::SECURE, SECURE}
 };
 
 const std::unordered_map<SceneMode, OperationMode> g_fwToMetaSupportedMode_ = {
@@ -101,7 +103,8 @@ const std::unordered_map<SceneMode, OperationMode> g_fwToMetaSupportedMode_ = {
     {CAPTURE_MACRO, OperationMode::CAPTURE_MACRO},
     {VIDEO_MACRO, OperationMode::VIDEO_MACRO},
     {HIGH_FRAME_RATE, OperationMode::HIGH_FRAME_RATE},
-    {HIGH_RES_PHOTO, OperationMode::HIGH_RESOLUTION_PHOTO}
+    {HIGH_RES_PHOTO, OperationMode::HIGH_RESOLUTION_PHOTO},
+    {SECURE, OperationMode::SECURE}
 };
 
 const std::set<int32_t> isTemplateMode_ = {
diff --git a/frameworks/native/camera/src/session/capture_session.cpp b/frameworks/native/camera/src/session/capture_session.cpp
index 8e8440b6..1d90f4a0 100644
--- a/frameworks/native/camera/src/session/capture_session.cpp
+++ b/frameworks/native/camera/src/session/capture_session.cpp
@@ -608,6 +608,24 @@ int32_t CaptureSession::AddOutput(sptr<CaptureOutput>& output)
     return ServiceToCameraError(errCode);
 }
 
+int32_t CaptureSession::AddSecureOutput(sptr<CaptureOutput> &output)
+{
+    CAMERA_SYNC_TRACE;
+    MEDIA_INFO_LOG("Enter Into SecureCameraSession::AddSecureOutput");
+    if (currentMode_ != SceneMode::SECURE) {
+        return CAMERA_UNSUPPORTED;
+    }
+    if (!IsSessionConfiged() || output == nullptr || isSetSecureOutput_) {
+        MEDIA_ERR_LOG("SecureCameraSession::AddSecureOutput operation is Not allowed!");
+        return CAMERA_OK;
+    }
+    sptr<IStreamCommon> stream = output->GetStream();
+    IStreamRepeat* repeatStream = static_cast<IStreamRepeat*>(stream.GetRefPtr());
+    repeatStream->EnableSecure(true);
+    isSetSecureOutput_ = true;
+    return CAMERA_OK;
+}
+
 bool CaptureSession::CanAddOutput(sptr<CaptureOutput>& output)
 {
     CAMERA_SYNC_TRACE;
@@ -620,43 +638,44 @@ bool CaptureSession::CanAddOutput(sptr<CaptureOutput>& output)
         MEDIA_ERR_LOG("CaptureSession::CanAddOutput Failed inputDevice_ is nullptr");
         return false;
     }
-    auto modeName = GetMode();
-    auto validateOutputFunc = [modeName](auto& vaildateProfile, auto& profiles, std::string&& outputType) -> bool {
-        bool result = std::any_of(profiles.begin(), profiles.end(),
-            [&vaildateProfile](const auto& profile) { return vaildateProfile == profile; });
-        Size invalidSize = vaildateProfile.GetSize();
-        if (result == false) {
-            MEDIA_ERR_LOG("CaptureSession::CanAddOutput profile invalid in "
-                          "%{public}s_output, mode(%{public}d): w(%{public}d),h(%{public}d),f(%{public}d)",
-                          outputType.c_str(), static_cast<int32_t>(modeName),
-                          invalidSize.width, invalidSize.height, vaildateProfile.GetCameraFormat());
-        } else {
-            MEDIA_DEBUG_LOG("CaptureSession::CanAddOutput profile pass in "
-                            "%{public}s_output, mode(%{public}d): w(%{public}d),h(%{public}d),f(%{public}d)",
-                            outputType.c_str(), static_cast<int32_t>(modeName),
-                            invalidSize.width, invalidSize.height, vaildateProfile.GetCameraFormat());
-        }
-        return result;
-    };
-    if (output->GetOutputType() == CAPTURE_OUTPUT_TYPE_PREVIEW) {
-        std::vector<Profile> profiles = inputDevice_->GetCameraDeviceInfo()->modePreviewProfiles_[modeName];
-        Profile vaildateProfile = output->GetPreviewProfile();
-        return validateOutputFunc(vaildateProfile, profiles, std::move("preview"));
-    } else if (output->GetOutputType() == CAPTURE_OUTPUT_TYPE_PHOTO) {
-        std::vector<Profile> profiles = inputDevice_->GetCameraDeviceInfo()->modePhotoProfiles_[modeName];
-        Profile vaildateProfile = output->GetPhotoProfile();
-        return validateOutputFunc(vaildateProfile, profiles, std::move("photo"));
-    } else if (output->GetOutputType() == CAPTURE_OUTPUT_TYPE_VIDEO) {
-        std::vector<VideoProfile> profiles = inputDevice_->GetCameraDeviceInfo()->modeVideoProfiles_[modeName];
-        VideoProfile vaildateProfile = output->GetVideoProfile();
-        return validateOutputFunc(vaildateProfile, profiles, std::move("video"));
-    } else if (output->GetOutputType() == CAPTURE_OUTPUT_TYPE_METADATA) {
-        MEDIA_INFO_LOG("CaptureSession::CanAddOutput MetadataOutput");
-        return true;
-    }
-    MEDIA_ERR_LOG("CaptureSession::CanAddOutput check fail,modeName:%{public}d, outputType:%{public}d", modeName,
-        output->GetOutputType());
-    return false;
+    return true;
+//    auto modeName = GetMode();
+//    auto validateOutputFunc = [modeName](auto& vaildateProfile, auto& profiles, std::string&& outputType) -> bool {
+//        bool result = std::any_of(profiles.begin(), profiles.end(),
+//            [&vaildateProfile](const auto& profile) { return vaildateProfile == profile; });
+//        Size invalidSize = vaildateProfile.GetSize();
+//        if (result == false) {
+//            MEDIA_ERR_LOG("CaptureSession::CanAddOutput profile invalid in "
+//                          "%{public}s_output, mode(%{public}d): w(%{public}d),h(%{public}d),f(%{public}d)",
+//                          outputType.c_str(), static_cast<int32_t>(modeName),
+//                          invalidSize.width, invalidSize.height, vaildateProfile.GetCameraFormat());
+//        } else {
+//            MEDIA_DEBUG_LOG("CaptureSession::CanAddOutput profile pass in "
+//                            "%{public}s_output, mode(%{public}d): w(%{public}d),h(%{public}d),f(%{public}d)",
+//                            outputType.c_str(), static_cast<int32_t>(modeName),
+//                            invalidSize.width, invalidSize.height, vaildateProfile.GetCameraFormat());
+//        }
+//        return result;
+//    };
+//    if (output->GetOutputType() == CAPTURE_OUTPUT_TYPE_PREVIEW) {
+//        std::vector<Profile> profiles = inputDevice_->GetCameraDeviceInfo()->modePreviewProfiles_[modeName];
+//        Profile vaildateProfile = output->GetPreviewProfile();
+//        return validateOutputFunc(vaildateProfile, profiles, std::move("preview"));
+//    } else if (output->GetOutputType() == CAPTURE_OUTPUT_TYPE_PHOTO) {
+//        std::vector<Profile> profiles = inputDevice_->GetCameraDeviceInfo()->modePhotoProfiles_[modeName];
+//        Profile vaildateProfile = output->GetPhotoProfile();
+//        return validateOutputFunc(vaildateProfile, profiles, std::move("photo"));
+//    } else if (output->GetOutputType() == CAPTURE_OUTPUT_TYPE_VIDEO) {
+//        std::vector<VideoProfile> profiles = inputDevice_->GetCameraDeviceInfo()->modeVideoProfiles_[modeName];
+//        VideoProfile vaildateProfile = output->GetVideoProfile();
+//        return validateOutputFunc(vaildateProfile, profiles, std::move("video"));
+//    } else if (output->GetOutputType() == CAPTURE_OUTPUT_TYPE_METADATA) {
+//        MEDIA_INFO_LOG("CaptureSession::CanAddOutput MetadataOutput");
+//        return true;
+//    }
+//    MEDIA_ERR_LOG("CaptureSession::CanAddOutput check fail,modeName:%{public}d, outputType:%{public}d", modeName,
+//        output->GetOutputType());
+//    return false;
 }
 
 int32_t CaptureSession::RemoveInput(sptr<CaptureInput>& input)
@@ -2656,9 +2675,17 @@ void CaptureSession::SetGuessMode(SceneMode mode)
 
 void CaptureSession::SetMode(SceneMode modeName)
 {
+    if (IsSessionCommited()) {
+        MEDIA_ERR_LOG("CaptureSession::SetMode Session has been Commited");
+        return;
+    }
     currentMode_ = modeName;
     // reset deferred enable status when reset mode
     EnableDeferredType(DELIVERY_NONE);
+    if (captureSession_) {
+        captureSession_->SetFeatureMode(modeName);
+        MEDIA_INFO_LOG("CaptureSession::SetSceneMode  SceneMode = %{public}d", modeName);
+    }
     MEDIA_INFO_LOG("CaptureSession SetMode modeName = %{public}d", modeName);
 }
 
diff --git a/frameworks/native/camera/src/session/secure_camera_session.cpp b/frameworks/native/camera/src/session/secure_camera_session.cpp
new file mode 100755
index 00000000..ffb74a13
--- /dev/null
+++ b/frameworks/native/camera/src/session/secure_camera_session.cpp
@@ -0,0 +1,43 @@
+/*
+ * Copyright (c) 2024-2024 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "session/secure_camera_session.h"
+#include "input/camera_input.h"
+#include "input/camera_manager.h"
+#include "output/camera_output_capability.h"
+#include "camera_log.h"
+#include "camera_error_code.h"
+#include "camera_util.h"
+
+namespace OHOS {
+namespace CameraStandard {
+SecureCameraSession::~SecureCameraSession()
+{
+}
+int32_t SecureCameraSession::AddSecureOutput(sptr<CaptureOutput> &output)
+{
+    CAMERA_SYNC_TRACE;
+    MEDIA_INFO_LOG("Enter Into SecureCameraSession::AddSecureOutput");
+    if (!IsSessionConfiged() || output == nullptr) {
+        MEDIA_ERR_LOG("SecureCameraSession::CanAddOutput operation is Not allowed!");
+        return CAMERA_OK;
+    }
+    sptr<IStreamCommon> stream = output->GetStream();
+    IStreamRepeat* repeatStream = static_cast<IStreamRepeat*>(stream.GetRefPtr());
+    repeatStream->EnableSecure(true);
+    return CAMERA_OK;
+}
+} // namespace CameraStandard
+} // namespace OHOS
diff --git a/frameworks/native/camera/test/unittest/src/v1_1/camera_framework_unittest.cpp b/frameworks/native/camera/test/unittest/src/v1_1/camera_framework_unittest.cpp
index 94975e39..174ba2fe 100644
--- a/frameworks/native/camera/test/unittest/src/v1_1/camera_framework_unittest.cpp
+++ b/frameworks/native/camera/test/unittest/src/v1_1/camera_framework_unittest.cpp
@@ -401,7 +401,8 @@ public:
         });
         ON_CALL(*this, OpenCameraDevice).WillByDefault([this](std::string &cameraId,
                                                             const sptr<ICameraDeviceCallback> &callback,
-                                                            sptr<OHOS::HDI::Camera::V1_0::ICameraDevice> &pDevice) {
+                                                            sptr<OHOS::HDI::Camera::V1_0::ICameraDevice> &pDevice,
+                                                            bool isEnableSecCam) {
             pDevice = cameraDevice;
             return CAMERA_OK;
         });
@@ -415,8 +416,8 @@ public:
     MOCK_METHOD2(GetCameraAbility, int32_t(std::string &cameraId,
         std::shared_ptr<OHOS::Camera::CameraMetadata> &ability));
     MOCK_METHOD2(SetFlashlight, int32_t(const std::string &cameraId, bool isEnable));
-    MOCK_METHOD3(OpenCameraDevice, int32_t(std::string &cameraId,
-        const sptr<ICameraDeviceCallback> &callback, sptr<OHOS::HDI::Camera::V1_0::ICameraDevice> &pDevice));
+    MOCK_METHOD4(OpenCameraDevice, int32_t(std::string &cameraId,
+        const sptr<ICameraDeviceCallback> &callback, sptr<OHOS::HDI::Camera::V1_0::ICameraDevice> &pDevice, bool isEnableSecCam));
     sptr<MockCameraDevice> cameraDevice;
 };
 
@@ -983,7 +984,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_framework_unittest_020, TestSize.Level0
     sptr<CaptureInput> input = cameraManager->CreateCameraInput(cameras[0]);
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -1185,7 +1186,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_framework_unittest_028, TestSize.Level0
     sptr<CaptureInput> input = cameraManager->CreateCameraInput(cameras[0]);
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -1284,7 +1285,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_framework_unittest_030, TestSize.Level0
     sptr<CaptureInput> input = cameraManager->CreateCameraInput(cameras[0]);
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -1338,7 +1339,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_framework_unittest_031, TestSize.Level0
     sptr<CaptureInput> input = cameraManager->CreateCameraInput(cameras[0]);
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -1401,7 +1402,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_framework_unittest_032, TestSize.Level0
     sptr<CaptureInput> input = cameraManager->CreateCameraInput(cameras[0]);
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -1461,7 +1462,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_framework_unittest_033, TestSize.Level0
     sptr<CaptureInput> input = cameraManager->CreateCameraInput(cameras[0]);
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -1605,7 +1606,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_framework_unittest_037, TestSize.Level0
     sptr<CaptureInput> input = cameraManager->CreateCameraInput(cameras[0]);
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -1643,7 +1644,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_framework_unittest_038, TestSize.Level0
     sptr<CaptureInput> input = cameraManager->CreateCameraInput(cameras[0]);
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -1699,7 +1700,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_framework_unittest_040, TestSize.Level0
     sptr<CaptureInput> input = cameraManager->CreateCameraInput(cameras[0]);
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -1751,7 +1752,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_framework_unittest_041, TestSize.Level0
     sptr<CaptureInput> input = cameraManager->CreateCameraInput(cameras[0]);
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -1807,7 +1808,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_framework_unittest_042, TestSize.Level0
     sptr<CaptureInput> input = cameraManager->CreateCameraInput(cameras[0]);
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -1862,7 +1863,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_framework_unittest_043, TestSize.Level0
     sptr<CaptureInput> input = cameraManager->CreateCameraInput(cameras[0]);
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -1918,7 +1919,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_framework_unittest_044, TestSize.Level0
     sptr<CaptureInput> input = cameraManager->CreateCameraInput(cameras[0]);
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -1975,7 +1976,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_framework_unittest_045, TestSize.Level0
     sptr<CaptureInput> input = cameraManager->CreateCameraInput(cameras[0]);
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -2032,7 +2033,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_framework_unittest_046, TestSize.Level0
     sptr<CaptureInput> input = cameraManager->CreateCameraInput(cameras[0]);
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -2128,7 +2129,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_framework_unittest_049, TestSize.Level0
     sptr<CaptureInput> input = cameraManager->CreateCameraInput(cameras[0]);
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -2187,7 +2188,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_framework_unittest_050, TestSize.Level0
     sptr<CaptureInput> input = cameraManager->CreateCameraInput(cameras[0]);
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -2248,7 +2249,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_framework_unittest_051, TestSize.Level0
     sptr<CaptureInput> input = cameraManager->CreateCameraInput(cameras[0]);
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -2308,7 +2309,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_framework_unittest_052, TestSize.Level0
     sptr<CaptureInput> input = cameraManager->CreateCameraInput(cameras[0]);
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -2364,7 +2365,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_fwcoverage_unittest_001, TestSize.Level
     sptr<CaptureInput> input = cameraManager->CreateCameraInput(cameras[0]);
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
     camInput->SetCameraSettings(cameraSettings);
@@ -2413,7 +2414,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_fwcoverage_unittest_002, TestSize.Level
     sptr<CaptureInput> input = cameraManager->CreateCameraInput(cameras[0]);
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -2452,7 +2453,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_fwcoverage_unittest_003, TestSize.Level
     sptr<CaptureInput> input = cameraManager->CreateCameraInput(cameras[0]);
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -2513,7 +2514,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_fwcoverage_unittest_004, TestSize.Level
     sptr<CaptureInput> input = cameraManager->CreateCameraInput(cameras[0]);
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -2579,7 +2580,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_fwcoverage_unittest_005, TestSize.Level
     sptr<CaptureInput> input = cameraManager->CreateCameraInput(cameras[0]);
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -2631,7 +2632,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_fwcoverage_unittest_006, TestSize.Level
     sptr<CaptureInput> input = cameraManager->CreateCameraInput(cameras[0]);
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -2662,7 +2663,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_fwcoverage_unittest_006, TestSize.Level
     EXPECT_EQ(intResult, 0);
 
     std::string cameraId = camInput->GetCameraId();
-    int activeTime = 0;
+    int activeTime = 15;
     EffectParam effectParam = {0, 0, 0};
     intResult = cameraService->SetPrelaunchConfig(cameraId, RestoreParamTypeOhos::PERSISTENT_DEFAULT_PARAM_OHOS,
         activeTime, effectParam);
@@ -2673,6 +2674,11 @@ HWTEST_F(CameraFrameworkUnitTest, camera_fwcoverage_unittest_006, TestSize.Level
         activeTime, effectParam);
     EXPECT_EQ(intResult, 2);
 
+
+    intResult = cameraService->SetPrelaunchConfig(cameraId, RestoreParamTypeOhos::PERSISTENT_DEFAULT_PARAM_OHOS,
+        activeTime, effectParam);
+    EXPECT_EQ(intResult, 2);
+
     cameraId = "";
     intResult = cameraService->SetPrelaunchConfig(cameraId, RestoreParamTypeOhos::PERSISTENT_DEFAULT_PARAM_OHOS,
         activeTime, effectParam);
@@ -2697,7 +2703,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_fwcoverage_unittest_007, TestSize.Level
     sptr<CaptureInput> input = cameraManager->CreateCameraInput(cameras[0]);
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -2743,7 +2749,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_fwcoverage_unittest_008, TestSize.Level
     sptr<CaptureInput> input = camManager->CreateCameraInput(cameras[0]);
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -2807,7 +2813,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_fwcoverage_unittest_009, TestSize.Level
     sptr<CaptureInput> input = camManager->CreateCameraInput(cameras[0]);
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -2875,7 +2881,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_fwcoverage_unittest_010, TestSize.Level
     sptr<CaptureInput> input = camManager->CreateCameraInput(cameras[0]);
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -2922,7 +2928,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_fwcoverage_unittest_011, TestSize.Level
     sptr<CaptureInput> input = camManager->CreateCameraInput(cameras[0]);
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -2984,7 +2990,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_fwcoverage_unittest_012, TestSize.Level
     sptr<CaptureInput> input = camManager->CreateCameraInput(cameras[0]);
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -3048,7 +3054,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_fwcoverage_unittest_013, TestSize.Level
     sptr<CaptureInput> input = cameraManager->CreateCameraInput(cameras[0]);
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -3109,7 +3115,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_fwcoverage_unittest_014, TestSize.Level
     sptr<CaptureInput> input = cameraManager->CreateCameraInput(cameras[0]);
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -3172,7 +3178,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_fwcoverage_unittest_015, TestSize.Level
     sptr<CaptureInput> input = cameraManager->CreateCameraInput(cameras[0]);
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -3236,7 +3242,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_fwcoverage_unittest_016, TestSize.Level
     sptr<CaptureInput> input = cameraManager->CreateCameraInput(cameras[0]);
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -3297,7 +3303,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_fwcoverage_unittest_017, TestSize.Level
     sptr<CaptureInput> input = cameraManager->CreateCameraInput(cameras[0]);
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -3358,7 +3364,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_fwcoverage_unittest_018, TestSize.Level
     sptr<CaptureInput> input = cameraManager->CreateCameraInput(cameras[0]);
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -3420,7 +3426,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_fwcoverage_unittest_019, TestSize.Level
     sptr<CaptureInput> input = cameraManager->CreateCameraInput(cameras[0]);
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -3478,7 +3484,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_fwcoverage_unittest_020, TestSize.Level
     sptr<CaptureInput> input = cameraManager->CreateCameraInput(cameras[0]);
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -3537,7 +3543,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_fwcoverage_unittest_021, TestSize.Level
     sptr<CaptureInput> input = cameraManager->CreateCameraInput(cameras[0]);
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -3593,7 +3599,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_fwcoverage_unittest_022, TestSize.Level
     sptr<CaptureInput> input = cameraManager->CreateCameraInput(cameras[0]);
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -3649,7 +3655,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_fwcoverage_unittest_023, TestSize.Level
     sptr<CaptureInput> input = cameraManager->CreateCameraInput(cameras[0]);
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -3965,7 +3971,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_fwcoverage_unittest_031, TestSize.Level
     sptr<CaptureInput> input = cameraManager->CreateCameraInput(cameras[0]);
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -4041,7 +4047,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_fwcoverage_unittest_032, TestSize.Level
     sptr<Surface> surface = Surface::CreateSurfaceAsConsumer();
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -4098,7 +4104,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_fwcoverage_unittest_033, TestSize.Level
     sptr<Surface> surface = Surface::CreateSurfaceAsConsumer();
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -4147,7 +4153,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_fwcoverage_unittest_034, TestSize.Level
     sptr<Surface> surface = Surface::CreateSurfaceAsConsumer();
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -4199,7 +4205,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_fwcoverage_unittest_035, TestSize.Level
     sptr<Surface> surface = Surface::CreateSurfaceAsConsumer();
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput>&)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -4262,7 +4268,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_fwcoverage_unittest_036, TestSize.Level
     sptr<Surface> surface = Surface::CreateSurfaceAsConsumer();
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -4314,7 +4320,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_fwcoverage_unittest_037, TestSize.Level
     sptr<Surface> surface = Surface::CreateSurfaceAsConsumer();
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;
     std::string cameraSettings = camInput->GetCameraSettings();
@@ -4375,7 +4381,7 @@ HWTEST_F(CameraFrameworkUnitTest, camera_fwcoverage_unittest_038, TestSize.Level
     sptr<Surface> surface = Surface::CreateSurfaceAsConsumer();
     ASSERT_NE(input, nullptr);
 
-    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _));
+    EXPECT_CALL(*mockCameraHostManager, OpenCameraDevice(_, _, _, _));
     EXPECT_CALL(*mockCameraDevice, SetResultMode(ON_CHANGED));
     sptr<CameraInput> camInput = (sptr<CameraInput> &)input;