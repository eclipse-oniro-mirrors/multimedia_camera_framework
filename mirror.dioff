From 6faab5daec462ffaef1869a5271c77a8910bbec5 Mon Sep 17 00:00:00 2001
From: sunchao <sunchao106@huawei.com>
Date: Mon, 23 Dec 2024 16:42:35 +0800
Subject: [PATCH] fix moving photo enable mirror TicketNo:DTS2024111834473
 Description:fix moving photo enable mirror Team:gitee Feature or
 Bugfix:Bugfix Binary Source:Sync from gitee PrivateCode(Yes/No):Yes

Change-Id: I9dabb7e42fa2ba3d09587d512a0637d2dd29ba43
---
 .../js/camera_napi/src/output/photo_output_napi.cpp       | 2 +-
 frameworks/native/camera/src/output/photo_output.cpp      | 8 +++++---
 frameworks/native/camera/src/session/capture_session.cpp  | 6 +++---
 .../test/unittest/src/v1_1/hcapture_session_unittest.cpp  | 2 +-
 .../native/camera/include/session/capture_session.h       | 2 +-
 .../camera_service/binder/base/include/icapture_session.h | 2 +-
 .../binder/client/include/hcapture_session_proxy.h        | 2 +-
 .../binder/client/src/hcapture_session_proxy.cpp          | 3 ++-
 .../binder/server/src/hcapture_session_stub.cpp           | 3 ++-
 services/camera_service/include/hcapture_session.h        | 2 +-
 services/camera_service/src/hcapture_session.cpp          | 8 +++++++-
 .../capturesession_fuzzer/capture_session_fuzzer.cpp      | 2 +-
 .../time_lapse_photo_session_fuzzer.cpp                   | 3 ++-
 13 files changed, 28 insertions(+), 17 deletions(-)

diff --git a/frameworks/js/camera_napi/src/output/photo_output_napi.cpp b/frameworks/js/camera_napi/src/output/photo_output_napi.cpp
index 86b550730..9817c2cf9 100644
--- a/frameworks/js/camera_napi/src/output/photo_output_napi.cpp
+++ b/frameworks/js/camera_napi/src/output/photo_output_napi.cpp
@@ -2224,7 +2224,7 @@ napi_value PhotoOutputNapi::EnableMirror(napi_env env, napi_callback_info info)
     auto session = photoOutputNapi->GetPhotoOutput()->GetSession();
     if (session != nullptr) {
         photoOutputNapi->isMirrorEnabled_ = isMirror;
-        int32_t retCode = session->EnableMovingPhotoMirror(isMirror);
+        int32_t retCode = photoOutputNapi->photoOutput_->EnableMirror(isMirror);
         if (!CameraNapiUtils::CheckError(env, retCode)) {
             return result;
         }
diff --git a/frameworks/native/camera/src/output/photo_output.cpp b/frameworks/native/camera/src/output/photo_output.cpp
index 167f1d4df..aed10b14f 100644
--- a/frameworks/native/camera/src/output/photo_output.cpp
+++ b/frameworks/native/camera/src/output/photo_output.cpp
@@ -580,7 +580,7 @@ int32_t PhotoOutput::Capture(std::shared_ptr<PhotoCaptureSetting> photoCaptureSe
     int32_t errCode = CAMERA_UNKNOWN_ERROR;
     if (itemStream) {
         MEDIA_DEBUG_LOG("Capture start");
-        session->EnableMovingPhotoMirror(photoCaptureSettings->GetMirror());
+        session->EnableMovingPhotoMirror(photoCaptureSettings->GetMirror(), true);
         errCode = itemStream->Capture(photoCaptureSettings->GetCaptureMetadataSetting());
         MEDIA_DEBUG_LOG("Capture End");
     } else {
@@ -606,7 +606,7 @@ int32_t PhotoOutput::Capture()
     int32_t errCode = CAMERA_UNKNOWN_ERROR;
     if (itemStream) {
         MEDIA_DEBUG_LOG("Capture start");
-        session->EnableMovingPhotoMirror(false);
+        session->EnableMovingPhotoMirror(false, true);
         errCode = itemStream->Capture(captureMetadataSetting);
         MEDIA_DEBUG_LOG("Capture end");
     } else {
@@ -741,13 +741,15 @@ bool PhotoOutput::IsMirrorSupported()
 
 int32_t PhotoOutput::EnableMirror(bool isEnable)
 {
+    MEDIA_INFO_LOG("PhotoOutput::EnableMirror enter, isEnable: %{public}d", isEnable);
     auto session = GetSession();
     CHECK_ERROR_RETURN_RET_LOG(session == nullptr, CameraErrorCode::SESSION_NOT_RUNNING,
         "PhotoOutput EnableMirror error!, session is nullptr");
 
     int32_t ret = CAMERA_UNKNOWN_ERROR;
     if (IsMirrorSupported()) {
-        ret = session->EnableMovingPhotoMirror(isEnable);
+        auto isSessionConfiged = session->IsSessionCommited() || session->IsSessionStarted();
+        ret = session->EnableMovingPhotoMirror(isEnable, isSessionConfiged);
         CHECK_ERROR_RETURN_RET_LOG(ret != CameraErrorCode::SUCCESS, ret,
             "PhotoOutput EnableMirror error!, ret is not success");
     } else {
diff --git a/frameworks/native/camera/src/session/capture_session.cpp b/frameworks/native/camera/src/session/capture_session.cpp
index cefa5c148..0ff876c8c 100644
--- a/frameworks/native/camera/src/session/capture_session.cpp
+++ b/frameworks/native/camera/src/session/capture_session.cpp
@@ -4629,10 +4629,10 @@ bool CaptureSession::IsMovingPhotoEnabled()
     return isMovingPhotoEnabled_;
 }
 
-int32_t CaptureSession::EnableMovingPhotoMirror(bool isMirror)
+int32_t CaptureSession::EnableMovingPhotoMirror(bool isMirror, bool isConfig)
 {
     CAMERA_SYNC_TRACE;
-    MEDIA_INFO_LOG("EnableMovingPhotoMirror %{public}d", isMirror);
+    MEDIA_INFO_LOG("EnableMovingPhotoMirror enter, isMirror: %{public}d", isMirror);
     if (!IsMovingPhotoSupported()) {
         MEDIA_ERR_LOG("IsMovingPhotoSupported is false");
         return CameraErrorCode::SERVICE_FATL_ERROR;
@@ -4640,7 +4640,7 @@ int32_t CaptureSession::EnableMovingPhotoMirror(bool isMirror)
     auto captureSession = GetCaptureSession();
     CHECK_ERROR_RETURN_RET_LOG(!captureSession, CameraErrorCode::SERVICE_FATL_ERROR,
         "CaptureSession::StartMovingPhotoCapture captureSession is nullptr");
-    int32_t errCode = captureSession->EnableMovingPhotoMirror(isMirror);
+    int32_t errCode = captureSession->EnableMovingPhotoMirror(isMirror, isConfig);
     CHECK_ERROR_PRINT_LOG(errCode != CAMERA_OK, "Failed to StartMovingPhotoCapture!, %{public}d", errCode);
     return CameraErrorCode::SUCCESS;
 }
diff --git a/frameworks/native/camera/test/unittest/src/v1_1/hcapture_session_unittest.cpp b/frameworks/native/camera/test/unittest/src/v1_1/hcapture_session_unittest.cpp
index cd1a676c4..416a17075 100644
--- a/frameworks/native/camera/test/unittest/src/v1_1/hcapture_session_unittest.cpp
+++ b/frameworks/native/camera/test/unittest/src/v1_1/hcapture_session_unittest.cpp
@@ -1261,7 +1261,7 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_025, TestSize.Level
     session->CommitConfig();
 
     EXPECT_EQ(session->EnableMovingPhoto(true), CAMERA_OK);
-    EXPECT_EQ(session->EnableMovingPhotoMirror(true), CAMERA_OK);
+    EXPECT_EQ(session->EnableMovingPhotoMirror(true, true), CAMERA_OK);
 
     session->Start();
     session->Stop();
diff --git a/interfaces/inner_api/native/camera/include/session/capture_session.h b/interfaces/inner_api/native/camera/include/session/capture_session.h
index 28343be98..5df66d9db 100644
--- a/interfaces/inner_api/native/camera/include/session/capture_session.h
+++ b/interfaces/inner_api/native/camera/include/session/capture_session.h
@@ -1196,7 +1196,7 @@ public:
     /**
      * @brief Enable moving photo mirror.
      */
-    int32_t EnableMovingPhotoMirror(bool isMirror);
+    int32_t EnableMovingPhotoMirror(bool isMirror, bool isConfig);
 
     /**
      * @brief Check current status is support moon capture boost or not.
diff --git a/services/camera_service/binder/base/include/icapture_session.h b/services/camera_service/binder/base/include/icapture_session.h
index a04d385f7..9d134fc56 100644
--- a/services/camera_service/binder/base/include/icapture_session.h
+++ b/services/camera_service/binder/base/include/icapture_session.h
@@ -75,7 +75,7 @@ public:
 
     virtual int32_t EnableMovingPhoto(bool isEnable) = 0;
 
-    virtual int32_t EnableMovingPhotoMirror(bool isMirror) = 0;
+    virtual int32_t EnableMovingPhotoMirror(bool isMirror, bool isConfig) = 0;
 
     virtual int32_t CreateMediaLibrary(sptr<CameraPhotoProxy> &photoProxy,
         std::string &uri, int32_t &cameraShotType, std::string &burstKey, int64_t timestamp, int32_t captureId) = 0;
diff --git a/services/camera_service/binder/client/include/hcapture_session_proxy.h b/services/camera_service/binder/client/include/hcapture_session_proxy.h
index 6ae96e95e..59294f9fe 100644
--- a/services/camera_service/binder/client/include/hcapture_session_proxy.h
+++ b/services/camera_service/binder/client/include/hcapture_session_proxy.h
@@ -63,7 +63,7 @@ public:
 
     int32_t EnableMovingPhoto(bool isEnable) override;
 
-    int32_t EnableMovingPhotoMirror(bool isMirror) override;
+    int32_t EnableMovingPhotoMirror(bool isMirror, bool isConfig) override;
 
     int32_t CreateMediaLibrary(sptr<CameraPhotoProxy> &photoProxy, std::string &uri, int32_t &cameraShotType,
         std::string &burstKey, int64_t timestamp, int32_t captureId) override;
diff --git a/services/camera_service/binder/client/src/hcapture_session_proxy.cpp b/services/camera_service/binder/client/src/hcapture_session_proxy.cpp
index e6da1ad7a..dbdf60775 100644
--- a/services/camera_service/binder/client/src/hcapture_session_proxy.cpp
+++ b/services/camera_service/binder/client/src/hcapture_session_proxy.cpp
@@ -345,7 +345,7 @@ int32_t HCaptureSessionProxy::EnableMovingPhoto(bool isEnable)
     return error;
 }
 
-int32_t HCaptureSessionProxy::EnableMovingPhotoMirror(bool isMirror)
+int32_t HCaptureSessionProxy::EnableMovingPhotoMirror(bool isMirror, bool isConfig)
 {
     MessageParcel data;
     MessageParcel reply;
@@ -353,6 +353,7 @@ int32_t HCaptureSessionProxy::EnableMovingPhotoMirror(bool isMirror)
 
     data.WriteInterfaceToken(GetDescriptor());
     data.WriteBool(isMirror);
+    data.WriteBool(isConfig);
     int error = Remote()->SendRequest(
         static_cast<uint32_t>(CaptureSessionInterfaceCode::CAMERA_CAPTURE_SESSION_START_MOVING_PHOTO_CAPTURE),
         data, reply, option);
diff --git a/services/camera_service/binder/server/src/hcapture_session_stub.cpp b/services/camera_service/binder/server/src/hcapture_session_stub.cpp
index fd841ce55..c5d791e9e 100644
--- a/services/camera_service/binder/server/src/hcapture_session_stub.cpp
+++ b/services/camera_service/binder/server/src/hcapture_session_stub.cpp
@@ -260,7 +260,8 @@ int32_t HCaptureSessionStub::HandleEnableMovingPhoto(MessageParcel &data)
 int32_t HCaptureSessionStub::HandleStartMovingPhotoCapture(MessageParcel &data)
 {
     bool isMirror = data.ReadBool();
-    return EnableMovingPhotoMirror(isMirror);
+    bool isConfig = data.ReadBool();
+    return EnableMovingPhotoMirror(isMirror, isConfig);
 }
 
 int32_t HCaptureSessionStub::HandleCreateMediaLibrary(MessageParcel& data, MessageParcel &reply)
diff --git a/services/camera_service/include/hcapture_session.h b/services/camera_service/include/hcapture_session.h
index 36f2d2bf6..170e16a2c 100644
--- a/services/camera_service/include/hcapture_session.h
+++ b/services/camera_service/include/hcapture_session.h
@@ -257,7 +257,7 @@ public:
     int32_t GetopMode();
 
     int32_t OperatePermissionCheck(uint32_t interfaceCode) override;
-    int32_t EnableMovingPhotoMirror(bool isMirror) override;
+    int32_t EnableMovingPhotoMirror(bool isMirror, bool isConfig) override;
     int32_t CreateMediaLibrary(sptr<CameraPhotoProxy>& photoProxy, std::string& uri, int32_t& cameraShotType,
         std::string& burstKey, int64_t timestamp, int32_t captureId) override;
     int32_t CreateMediaLibrary(std::unique_ptr<Media::Picture> picture, sptr<CameraPhotoProxy> &photoProxy,
diff --git a/services/camera_service/src/hcapture_session.cpp b/services/camera_service/src/hcapture_session.cpp
index 55c61bcf9..41d5457bf 100644
--- a/services/camera_service/src/hcapture_session.cpp
+++ b/services/camera_service/src/hcapture_session.cpp
@@ -60,6 +60,7 @@
 #include "icapture_session.h"
 #include "iconsumer_surface.h"
 #include "image_type.h"
+#include "ipc_file_descriptor.h"
 #include "ipc_skeleton.h"
 #include "iservice_registry.h"
 #include "istream_common.h"
@@ -813,6 +814,7 @@ int32_t HCaptureSession::CreateMovingPhotoStreamRepeat(
     MEDIA_DEBUG_LOG("para is:%{public}dx%{public}d,%{public}d", width, height, format);
     livePhotoStreamRepeat_ = streamRepeat;
     streamRepeat->SetMetaProducer(metaSurface_->GetProducer());
+    streamRepeat->SetMirror(isMovingPhotoMirror_);
     MEDIA_INFO_LOG("HCameraService::CreateLivePhotoStreamRepeat end");
     return CAMERA_OK;
 }
@@ -1683,8 +1685,12 @@ void HCaptureSession::DumpSessionInfo(CameraInfoDumper& infoDumper)
     }
 }
 
-int32_t HCaptureSession::EnableMovingPhotoMirror(bool isMirror)
+int32_t HCaptureSession::EnableMovingPhotoMirror(bool isMirror, bool isConfig)
 {
+    if (!isConfig) {
+        isMovingPhotoMirror_ = isMirror;
+        return CAMERA_OK;
+    }
     if (!isSetMotionPhoto_ || isMirror == isMovingPhotoMirror_) {
         return CAMERA_OK;
     }
diff --git a/test/fuzztest/capturesession_fuzzer/capture_session_fuzzer.cpp b/test/fuzztest/capturesession_fuzzer/capture_session_fuzzer.cpp
index 2218f35d7..d869e6b53 100644
--- a/test/fuzztest/capturesession_fuzzer/capture_session_fuzzer.cpp
+++ b/test/fuzztest/capturesession_fuzzer/capture_session_fuzzer.cpp
@@ -448,7 +448,7 @@ void TestOther2(sptr<CaptureSession> session, uint8_t *rawData, size_t size)
     session->SetFocusDistance(data.ReadFloat());
     session->EnableMacro(data.ReadBool());
     session->EnableMovingPhoto(data.ReadBool());
-    session->EnableMovingPhotoMirror(data.ReadBool());
+    session->EnableMovingPhotoMirror(data.ReadBool(), data.ReadBool());
     session->EnableMoonCaptureBoost(data.ReadBool());
     session->SetSensorSensitivity(data.ReadUint32());
     session->UnlockForControl();
diff --git a/test/fuzztest/timelapsephotosession_fuzzer/time_lapse_photo_session_fuzzer.cpp b/test/fuzztest/timelapsephotosession_fuzzer/time_lapse_photo_session_fuzzer.cpp
index b439df79c..853a5ac76 100644
--- a/test/fuzztest/timelapsephotosession_fuzzer/time_lapse_photo_session_fuzzer.cpp
+++ b/test/fuzztest/timelapsephotosession_fuzzer/time_lapse_photo_session_fuzzer.cpp
@@ -344,6 +344,7 @@ void Test31(sptr<CaptureSession> s)
 {
     s->UnlockForControl();
     bool supported = true;
+    bool configed = true;
     set<camera_face_detect_mode_t> metadataObjectTypes{};
     s->SetCaptureMetadataObjectTypes(metadataObjectTypes);
     metadataObjectTypes.emplace(OHOS_CAMERA_FACE_DETECT_MODE_SIMPLE);
@@ -351,7 +352,7 @@ void Test31(sptr<CaptureSession> s)
     s->EnableFaceDetection(supported);
     const float distance = 1.0f;
     s->IsSessionStarted();
-    s->EnableMovingPhotoMirror(supported);
+    s->EnableMovingPhotoMirror(supported, configed);
     vector<WhiteBalanceMode> modes;
     s->GetSupportedWhiteBalanceModes(modes);
     s->IsWhiteBalanceModeSupported(WhiteBalanceMode::AWB_MODE_AUTO, supported);
-- 
2.45.2.huawei.7

