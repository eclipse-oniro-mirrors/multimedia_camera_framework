     MEDIA_INFO_LOG("hcapture_session_unit_test_004 end");
 }
@@ -356,8 +351,12 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_005, TestSize.Level
             device->OpenSecureCamera(&secureSeqId);
 
             uint32_t callerToken = IPCSkeleton::GetCallingTokenID();
-            sptr<HCaptureSession> session = new (std::nothrow) HCaptureSession(callerToken, SceneMode::NORMAL);
+            sptr<HCaptureSession> session = nullptr;
+            sptr<HStreamOperator> hStreamOperator = nullptr;
+            int32_t opMode = SceneMode::NORMAL;
+            InitSessionAndOperator(callerToken, opMode, session, hStreamOperator);
             ASSERT_NE(session, nullptr);
+            ASSERT_NE(hStreamOperator, nullptr);
 
             sptr<IConsumerSurface> surface = IConsumerSurface::Create();
             sptr<IBufferProducer> producer = surface->GetProducer();
@@ -402,8 +401,12 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_006, TestSize.Level
     device->Open();
 
     uint32_t callerToken = IPCSkeleton::GetCallingTokenID();
-    sptr<HCaptureSession> session = new (std::nothrow) HCaptureSession(callerToken, SceneMode::NORMAL);
+    sptr<HCaptureSession> session = nullptr;
+    sptr<HStreamOperator> hStreamOperator = nullptr;
+    int32_t opMode = SceneMode::NORMAL;
+    InitSessionAndOperator(callerToken, opMode, session, hStreamOperator);
     ASSERT_NE(session, nullptr);
+    ASSERT_NE(hStreamOperator, nullptr);
 
     EXPECT_EQ(session->BeginConfig(), CAMERA_OK);
     EXPECT_EQ(session->AddInput(device), CAMERA_OK);
@@ -449,8 +452,12 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_007, TestSize.Level
     device->Open();
 
     uint32_t callerToken = IPCSkeleton::GetCallingTokenID();
-    sptr<HCaptureSession> session = new (std::nothrow) HCaptureSession(callerToken, SceneMode::NORMAL);
+    sptr<HCaptureSession> session = nullptr;
+    sptr<HStreamOperator> hStreamOperator = nullptr;
+    int32_t opMode = SceneMode::NORMAL;
+    InitSessionAndOperator(callerToken, opMode, session, hStreamOperator);
     ASSERT_NE(session, nullptr);
+    ASSERT_NE(hStreamOperator, nullptr);
 
     EXPECT_EQ(session->BeginConfig(), CAMERA_OK);
     EXPECT_EQ(session->AddInput(device), CAMERA_OK);
@@ -474,11 +481,11 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_007, TestSize.Level
     std::vector<StreamInfo_V1_1> streamInfos = {};
 
     session->Start();
-    session->CancelStreamsAndGetStreamInfos(streamInfos);
+    hStreamOperator->CancelStreamsAndGetStreamInfos(streamInfos);
     ASSERT_TRUE(streamInfos.size() != 0);
 
     session->Stop();
-    session->CancelStreamsAndGetStreamInfos(streamInfos);
+    hStreamOperator->CancelStreamsAndGetStreamInfos(streamInfos);
     ASSERT_TRUE(streamInfos.size() != 0);
 
     EXPECT_EQ(device->Close(), CAMERA_OK);
@@ -511,8 +518,12 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_008, TestSize.Level
     device->Open();
 
     uint32_t callerToken = IPCSkeleton::GetCallingTokenID();
-    sptr<HCaptureSession> session = new (std::nothrow) HCaptureSession(callerToken, SceneMode::NORMAL);
+    sptr<HCaptureSession> session = nullptr;
+    sptr<HStreamOperator> hStreamOperator = nullptr;
+    int32_t opMode = SceneMode::NORMAL;
+    InitSessionAndOperator(callerToken, opMode, session, hStreamOperator);
     ASSERT_NE(session, nullptr);
+    ASSERT_NE(hStreamOperator, nullptr);
 
     EXPECT_EQ(session->BeginConfig(), CAMERA_OK);
     EXPECT_EQ(session->AddInput(device), CAMERA_OK);
@@ -539,7 +550,10 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_008, TestSize.Level
     session->CommitConfig();
 
     EXPECT_EQ(session->EnableMovingPhoto(true), CAMERA_OK);
-    session->StartMovingPhoto(streamRepeat2);
+
+    shared_ptr<OHOS::Camera::CameraMetadata> settings;
+    cameraHostManager_->GetCameraAbility(cameraIds[0], settings);
+    hStreamOperator->StartMovingPhoto(settings, streamRepeat2);
 
     EXPECT_EQ(session->EnableMovingPhoto(false), CAMERA_OK);
     session->Start();
@@ -567,8 +581,12 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_009, TestSize.Level
 
     uint32_t callerToken = IPCSkeleton::GetCallingTokenID();
     uint32_t callerToken1 = ++callerToken;
-    sptr<HCaptureSession> session = new (std::nothrow) HCaptureSession(callerToken1, SceneMode::NORMAL);
+    sptr<HCaptureSession> session = nullptr;
+    sptr<HStreamOperator> hStreamOperator = nullptr;
+    int32_t opMode = SceneMode::NORMAL;
+    InitSessionAndOperator(callerToken1, opMode, session, hStreamOperator);
     ASSERT_NE(session, nullptr);
+    ASSERT_NE(hStreamOperator, nullptr);
 
     EXPECT_EQ(session->OperatePermissionCheck(INTERFACE_CODE), CAMERA_OPERATION_NOT_ALLOWED);
     EXPECT_EQ(session->Release(), CAMERA_OK);
@@ -589,8 +607,12 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_010, TestSize.Level
     MEDIA_INFO_LOG("hcapture_session_unit_test_010 start");
 
     uint32_t callerToken = IPCSkeleton::GetCallingTokenID();
-    sptr<HCaptureSession> session = new (std::nothrow) HCaptureSession(callerToken, SceneMode::NORMAL);
+    sptr<HCaptureSession> session = nullptr;
+    sptr<HStreamOperator> hStreamOperator = nullptr;
+    int32_t opMode = SceneMode::NORMAL;
+    InitSessionAndOperator(callerToken, opMode, session, hStreamOperator);
     ASSERT_NE(session, nullptr);
+    ASSERT_NE(hStreamOperator, nullptr);
     pid_t pid = session->GetPid();
     session->DestroyStubObjectForPid(pid);
 
@@ -619,8 +641,12 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_011, TestSize.Level
     device->Open();
 
     uint32_t callerToken = IPCSkeleton::GetCallingTokenID();
-    sptr<HCaptureSession> session = new (std::nothrow) HCaptureSession(callerToken, SceneMode::NORMAL);
+    sptr<HCaptureSession> session = nullptr;
+    sptr<HStreamOperator> hStreamOperator = nullptr;
+    int32_t opMode = SceneMode::NORMAL;
+    InitSessionAndOperator(callerToken, opMode, session, hStreamOperator);
     ASSERT_NE(session, nullptr);
+    ASSERT_NE(hStreamOperator, nullptr);
 
     EXPECT_EQ(session->BeginConfig(), CAMERA_OK);
     EXPECT_EQ(session->AddInput(device), CAMERA_OK);
@@ -674,8 +700,12 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_012, TestSize.Level
     device->Open();
 
     uint32_t callerToken = IPCSkeleton::GetCallingTokenID();
-    sptr<HCaptureSession> session = new (std::nothrow) HCaptureSession(callerToken, SceneMode::NORMAL);
+    sptr<HCaptureSession> session = nullptr;
+    sptr<HStreamOperator> hStreamOperator = nullptr;
+    int32_t opMode = SceneMode::NORMAL;
+    InitSessionAndOperator(callerToken, opMode, session, hStreamOperator);
     ASSERT_NE(session, nullptr);
+    ASSERT_NE(hStreamOperator, nullptr);
 
     EXPECT_EQ(session->BeginConfig(), CAMERA_OK);
     EXPECT_EQ(session->AddInput(device), CAMERA_OK);
@@ -727,15 +757,19 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_013, TestSize.Level
     MEDIA_INFO_LOG("hcapture_session_unit_test_013 start");
 
     uint32_t callerToken = IPCSkeleton::GetCallingTokenID();
-    sptr<HCaptureSession> session = new (std::nothrow) HCaptureSession(callerToken, SceneMode::NORMAL);
+    sptr<HCaptureSession> session = nullptr;
+    sptr<HStreamOperator> hStreamOperator = nullptr;
+    int32_t opMode = SceneMode::NORMAL;
+    InitSessionAndOperator(callerToken, opMode, session, hStreamOperator);
     ASSERT_NE(session, nullptr);
+    ASSERT_NE(hStreamOperator, nullptr);
 
     sptr<CameraPhotoProxy> photoProxy{new CameraPhotoProxy()};
     std::string uri;
     int32_t cameraShotType;
     string burstKey = "";
     int64_t timestamp = 0000;
-    session->CreateMediaLibrary(photoProxy, uri, cameraShotType, burstKey, timestamp);
+    hStreamOperator->CreateMediaLibrary(photoProxy, uri, cameraShotType, burstKey, timestamp);
 
     EXPECT_EQ(session->Release(), CAMERA_OK);
 
@@ -754,9 +788,13 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_014, TestSize.Level
 {
     MEDIA_INFO_LOG("hcapture_session_unit_test_014 start");
 
-    uint32_t callerToken = IPCSkeleton::GetCallingTokenID();
-    sptr<HCaptureSession> session = new (std::nothrow) HCaptureSession(callerToken, SceneMode::NORMAL);
+   uint32_t callerToken = IPCSkeleton::GetCallingTokenID();
+    sptr<HCaptureSession> session = nullptr;
+    sptr<HStreamOperator> hStreamOperator = nullptr;
+    int32_t opMode = SceneMode::NORMAL;
+    InitSessionAndOperator(callerToken, opMode, session, hStreamOperator);
     ASSERT_NE(session, nullptr);
+    ASSERT_NE(hStreamOperator, nullptr);
 
     sptr<SurfaceBuffer> surfaceBuffer;
     sptr<CameraPhotoProxy> photoProxy{new CameraPhotoProxy()};
@@ -764,7 +802,7 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_014, TestSize.Level
     int32_t cameraShotType;
     string burstKey = "";
     int64_t timestamp = 0000;
-    session->CreateMediaLibrary(Media::Picture::Create(surfaceBuffer), photoProxy, uri, cameraShotType,
+    hStreamOperator->CreateMediaLibrary(Media::Picture::Create(surfaceBuffer), photoProxy, uri, cameraShotType,
         burstKey, timestamp);
 
     EXPECT_EQ(session->Release(), CAMERA_OK);
@@ -795,9 +833,13 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_015, TestSize.Level
     ASSERT_NE(device, nullptr);
     device->Open();
 
-    uint32_t callerToken = IPCSkeleton::GetCallingTokenID();
-    sptr<HCaptureSession> session = new (std::nothrow) HCaptureSession(callerToken, SceneMode::NORMAL);
+   uint32_t callerToken = IPCSkeleton::GetCallingTokenID();
+    sptr<HCaptureSession> session = nullptr;
+    sptr<HStreamOperator> hStreamOperator = nullptr;
+    int32_t opMode = SceneMode::NORMAL;
+    InitSessionAndOperator(callerToken, opMode, session, hStreamOperator);
     ASSERT_NE(session, nullptr);
+    ASSERT_NE(hStreamOperator, nullptr);
 
     session->BeginConfig();
     EXPECT_EQ(session->AddInput(device), CAMERA_OK);
@@ -813,7 +855,7 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_015, TestSize.Level
 
     int32_t captureId = 0;
     std::vector<int32_t> streamIds = {1, 2};
-    EXPECT_EQ(session->OnCaptureStarted(captureId, streamIds), CAMERA_INVALID_ARG);
+    EXPECT_EQ(hStreamOperator->OnCaptureStarted(captureId, streamIds), CAMERA_INVALID_ARG);
 
     HDI::Camera::V1_2::CaptureStartedInfo it1;
     it1.streamId_ = 1;
@@ -824,7 +866,7 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_015, TestSize.Level
     std::vector<OHOS::HDI::Camera::V1_2::CaptureStartedInfo> captureStartedInfo = {};
     captureStartedInfo.push_back(it1);
     captureStartedInfo.push_back(it2);
-    EXPECT_EQ(session->OnCaptureStarted_V1_2(captureId, captureStartedInfo), CAMERA_INVALID_ARG);
+    EXPECT_EQ(hStreamOperator->OnCaptureStarted_V1_2(captureId, captureStartedInfo), CAMERA_INVALID_ARG);
 
     EXPECT_EQ(device->Close(), CAMERA_OK);
     EXPECT_EQ(session->Release(), CAMERA_OK);
@@ -855,9 +897,13 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_016, TestSize.Level
     ASSERT_NE(device, nullptr);
     device->Open();
 
-    uint32_t callerToken = IPCSkeleton::GetCallingTokenID();
-    sptr<HCaptureSession> session = new (std::nothrow) HCaptureSession(callerToken, SceneMode::NORMAL);
+   uint32_t callerToken = IPCSkeleton::GetCallingTokenID();
+    sptr<HCaptureSession> session = nullptr;
+    sptr<HStreamOperator> hStreamOperator = nullptr;
+    int32_t opMode = SceneMode::NORMAL;
+    InitSessionAndOperator(callerToken, opMode, session, hStreamOperator);
     ASSERT_NE(session, nullptr);
+    ASSERT_NE(hStreamOperator, nullptr);
 
     session->BeginConfig();
     EXPECT_EQ(session->AddInput(device), CAMERA_OK);
@@ -874,7 +920,7 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_016, TestSize.Level
     int32_t captureId = 0;
     std::vector<OHOS::HDI::Camera::V1_3::CaptureEndedInfoExt> infos = {{1, 100, true, "video123"},
         {2, 100, true, "video123"}};
-    EXPECT_EQ(session->OnCaptureEndedExt(captureId, infos), CAMERA_INVALID_ARG);
+    EXPECT_EQ(hStreamOperator->OnCaptureEndedExt(captureId, infos), CAMERA_INVALID_ARG);
 
     EXPECT_EQ(device->Close(), CAMERA_OK);
     EXPECT_EQ(session->Release(), CAMERA_OK);
@@ -903,9 +949,13 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_017, TestSize.Level
     ASSERT_NE(device, nullptr);
     device->Open();
 
-    uint32_t callerToken = IPCSkeleton::GetCallingTokenID();
-    sptr<HCaptureSession> session = new (std::nothrow) HCaptureSession(callerToken, SceneMode::NORMAL);
+   uint32_t callerToken = IPCSkeleton::GetCallingTokenID();
+    sptr<HCaptureSession> session = nullptr;
+    sptr<HStreamOperator> hStreamOperator = nullptr;
+    int32_t opMode = SceneMode::NORMAL;
+    InitSessionAndOperator(callerToken, opMode, session, hStreamOperator);
     ASSERT_NE(session, nullptr);
+    ASSERT_NE(hStreamOperator, nullptr);
 
     EXPECT_EQ(session->BeginConfig(), CAMERA_OK);
     EXPECT_EQ(session->AddInput(device), CAMERA_OK);
@@ -934,7 +984,7 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_017, TestSize.Level
     std::vector<CaptureErrorInfo> captureErrorInfo = {};
     captureErrorInfo.push_back(it1);
     captureErrorInfo.push_back(it2);
-    session->OnCaptureError(captureId, captureErrorInfo);
+    hStreamOperator->OnCaptureError(captureId, captureErrorInfo);
 
     EXPECT_EQ(device->Close(), CAMERA_OK);
     EXPECT_EQ(session->Release(), CAMERA_OK);
@@ -963,9 +1013,13 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_018, TestSize.Level
     ASSERT_NE(device, nullptr);
     device->Open();
 
-    uint32_t callerToken = IPCSkeleton::GetCallingTokenID();
-    sptr<HCaptureSession> session = new (std::nothrow) HCaptureSession(callerToken, SceneMode::NORMAL);
+   uint32_t callerToken = IPCSkeleton::GetCallingTokenID();
+    sptr<HCaptureSession> session = nullptr;
+    sptr<HStreamOperator> hStreamOperator = nullptr;
+    int32_t opMode = SceneMode::NORMAL;
+    InitSessionAndOperator(callerToken, opMode, session, hStreamOperator);
     ASSERT_NE(session, nullptr);
+    ASSERT_NE(hStreamOperator, nullptr);
 
     EXPECT_EQ(session->BeginConfig(), CAMERA_OK);
     EXPECT_EQ(session->AddInput(device), CAMERA_OK);
@@ -986,9 +1040,9 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_018, TestSize.Level
 
     int32_t streamId = 1;
     std::vector<uint8_t> result = {0, 1};
-    EXPECT_EQ(session->OnResult(streamId, result), CAMERA_INVALID_ARG);
+    EXPECT_EQ(hStreamOperator->OnResult(streamId, result), CAMERA_INVALID_ARG);
     streamId = 2;
-    EXPECT_EQ(session->OnResult(streamId, result), CAMERA_INVALID_ARG);
+    EXPECT_EQ(hStreamOperator->OnResult(streamId, result), CAMERA_INVALID_ARG);
 
     EXPECT_EQ(device->Close(), CAMERA_OK);
     EXPECT_EQ(session->Release(), CAMERA_OK);
@@ -1017,9 +1071,13 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_019, TestSize.Level
     ASSERT_NE(device, nullptr);
     device->Open();
 
-    uint32_t callerToken = IPCSkeleton::GetCallingTokenID();
-    sptr<HCaptureSession> session = new (std::nothrow) HCaptureSession(callerToken, SceneMode::NORMAL);
+   uint32_t callerToken = IPCSkeleton::GetCallingTokenID();
+    sptr<HCaptureSession> session = nullptr;
+    sptr<HStreamOperator> hStreamOperator = nullptr;
+    int32_t opMode = SceneMode::NORMAL;
+    InitSessionAndOperator(callerToken, opMode, session, hStreamOperator);
     ASSERT_NE(session, nullptr);
+    ASSERT_NE(hStreamOperator, nullptr);
 
     EXPECT_EQ(session->BeginConfig(), CAMERA_OK);
     EXPECT_EQ(session->AddInput(device), CAMERA_OK);
@@ -1063,8 +1121,12 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_020, TestSize.Level
     device->Open();
 
     uint32_t callerToken = IPCSkeleton::GetCallingTokenID();
-    sptr<HCaptureSession> session = new (std::nothrow) HCaptureSession(callerToken, SceneMode::NORMAL);
+    sptr<HCaptureSession> session = nullptr;
+    sptr<HStreamOperator> hStreamOperator = nullptr;
+    int32_t opMode = SceneMode::NORMAL;
+    InitSessionAndOperator(callerToken, opMode, session, hStreamOperator);
     ASSERT_NE(session, nullptr);
+    ASSERT_NE(hStreamOperator, nullptr);
 
     bool result = false;
     EXPECT_EQ(session->CanAddInput(device, result), CAMERA_INVALID_STATE);
@@ -1106,8 +1168,12 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_021, TestSize.Level
     device->Open();
 
     uint32_t callerToken = IPCSkeleton::GetCallingTokenID();
-    sptr<HCaptureSession> session = new (std::nothrow) HCaptureSession(callerToken, SceneMode::NORMAL);
+    sptr<HCaptureSession> session = nullptr;
+    sptr<HStreamOperator> hStreamOperator = nullptr;
+    int32_t opMode = SceneMode::NORMAL;
+    InitSessionAndOperator(callerToken, opMode, session, hStreamOperator);
     ASSERT_NE(session, nullptr);
+    ASSERT_NE(hStreamOperator, nullptr);
 
     EXPECT_EQ(session->BeginConfig(), CAMERA_OK);
     EXPECT_EQ(session->AddInput(device), CAMERA_OK);
@@ -1125,11 +1191,11 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_021, TestSize.Level
     EXPECT_EQ(session->RemoveOutput(StreamType::METADATA, streamMetadata), CAMERA_OK);
     EXPECT_EQ(session->CommitConfig(), CAMERA_INVALID_SESSION_CFG);
 
-    EXPECT_EQ(session->AddOutputStream(nullptr), CAMERA_INVALID_ARG);
-    EXPECT_EQ(session->AddOutputStream(streamMetadata), CAMERA_OK);
-    EXPECT_EQ(session->AddOutputStream(streamMetadata), CAMERA_INVALID_SESSION_CFG);
+    EXPECT_EQ(hStreamOperator->AddOutputStream(nullptr), CAMERA_INVALID_ARG);
+    EXPECT_EQ(hStreamOperator->AddOutputStream(streamMetadata), CAMERA_OK);
+    EXPECT_EQ(hStreamOperator->AddOutputStream(streamMetadata), CAMERA_INVALID_SESSION_CFG);
     EXPECT_EQ(streamRepeat->Release(), CAMERA_OK);
-    EXPECT_EQ(session->AddOutputStream(streamRepeat), CAMERA_INVALID_ARG);
+    EXPECT_EQ(hStreamOperator->AddOutputStream(streamRepeat), CAMERA_INVALID_ARG);
 
     EXPECT_EQ(device->Close(), CAMERA_OK);
     EXPECT_EQ(session->Release(), CAMERA_OK);
@@ -1149,11 +1215,20 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_022, TestSize.Level
 {
     MEDIA_INFO_LOG("hcapture_session_unit_test_022 start");
 
-    uint32_t callerToken = IPCSkeleton::GetCallingTokenID();
-    sptr<HCaptureSession> session = new (std::nothrow) HCaptureSession(callerToken, SceneMode::NORMAL);
+   uint32_t callerToken = IPCSkeleton::GetCallingTokenID();
+    sptr<HCaptureSession> session = nullptr;
+    sptr<HStreamOperator> hStreamOperator = nullptr;
+    int32_t opMode = SceneMode::NORMAL;
+    InitSessionAndOperator(callerToken, opMode, session, hStreamOperator);
     ASSERT_NE(session, nullptr);
+    ASSERT_NE(hStreamOperator, nullptr);
 
-    EXPECT_EQ(session->UpdateStreamInfos(), CAMERA_UNKNOWN_ERROR);
+    std::vector<string> cameraIds;
+    cameraService_->GetCameraIds(cameraIds);
+    ASSERT_NE(cameraIds.size(), 0);
+    shared_ptr<OHOS::Camera::CameraMetadata> settings;
+    cameraHostManager_->GetCameraAbility(cameraIds[0], settings);
+    EXPECT_EQ(hStreamOperator->UpdateStreamInfos(settings), CAMERA_UNKNOWN_ERROR);
     EXPECT_EQ(session->Release(), CAMERA_OK);
 
     MEDIA_INFO_LOG("hcapture_session_unit_test_022 end");
@@ -1181,8 +1256,12 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_023, TestSize.Level
     device->Open();
 
     uint32_t callerToken = IPCSkeleton::GetCallingTokenID();
-    sptr<HCaptureSession> session = new (std::nothrow) HCaptureSession(callerToken, SceneMode::NORMAL);
+    sptr<HCaptureSession> session = nullptr;
+    sptr<HStreamOperator> hStreamOperator = nullptr;
+    int32_t opMode = SceneMode::NORMAL;
+    InitSessionAndOperator(callerToken, opMode, session, hStreamOperator);
     ASSERT_NE(session, nullptr);
+    ASSERT_NE(hStreamOperator, nullptr);
 
     EXPECT_EQ(session->BeginConfig(), CAMERA_OK);
     EXPECT_EQ(session->AddInput(device), CAMERA_OK);
@@ -1195,7 +1274,7 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_023, TestSize.Level
     uint32_t otherStreamType = 5;
     streamRepeat->streamType_ = static_cast<StreamType>(otherStreamType);
 
-    session->AddOutputStream(streamRepeat);
+    session->AddOutput(StreamType::REPEAT, streamRepeat);
     session->CommitConfig();
     session->Start();
 
@@ -1221,8 +1300,12 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_024, TestSize.Level
     MEDIA_INFO_LOG("hcapture_session_unit_test_024 start");
 
     uint32_t callerToken = IPCSkeleton::GetCallingTokenID();
-    sptr<HCaptureSession> session = new (std::nothrow) HCaptureSession(callerToken, SceneMode::NORMAL);
+    sptr<HCaptureSession> session = nullptr;
+    sptr<HStreamOperator> hStreamOperator = nullptr;
+    int32_t opMode = SceneMode::NORMAL;
+    InitSessionAndOperator(callerToken, opMode, session, hStreamOperator);
     ASSERT_NE(session, nullptr);
+    ASSERT_NE(hStreamOperator, nullptr);
 
     uint32_t otherCaptureSessionState = 6;
     session->stateMachine_.currentState_ = static_cast<CaptureSessionState>(otherCaptureSessionState);
@@ -1257,8 +1340,12 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_025, TestSize.Level
     device->Open();
 
     uint32_t callerToken = IPCSkeleton::GetCallingTokenID();
-    sptr<HCaptureSession> session = new (std::nothrow) HCaptureSession(callerToken, SceneMode::NORMAL);
+    sptr<HCaptureSession> session = nullptr;
+    sptr<HStreamOperator> hStreamOperator = nullptr;
+    int32_t opMode = SceneMode::NORMAL;
+    InitSessionAndOperator(callerToken, opMode, session, hStreamOperator);
     ASSERT_NE(session, nullptr);
+    ASSERT_NE(hStreamOperator, nullptr);
 
     EXPECT_EQ(session->BeginConfig(), CAMERA_OK);
     EXPECT_EQ(session->AddInput(device), CAMERA_OK);
@@ -1310,8 +1397,12 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_026, TestSize.Level
     device->Open();
 
     uint32_t callerToken = IPCSkeleton::GetCallingTokenID();
-    sptr<HCaptureSession> session = new (std::nothrow) HCaptureSession(callerToken, SceneMode::NORMAL);
+    sptr<HCaptureSession> session = nullptr;
+    sptr<HStreamOperator> hStreamOperator = nullptr;
+    int32_t opMode = SceneMode::NORMAL;
+    InitSessionAndOperator(callerToken, opMode, session, hStreamOperator);
     ASSERT_NE(session, nullptr);
+    ASSERT_NE(hStreamOperator, nullptr);
 
     EXPECT_EQ(session->BeginConfig(), CAMERA_OK);
     EXPECT_EQ(session->AddInput(device), CAMERA_OK);
@@ -1359,8 +1450,12 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_027, TestSize.Level
     device->Open();
 
     uint32_t callerToken = IPCSkeleton::GetCallingTokenID();
-    sptr<HCaptureSession> session = new (std::nothrow) HCaptureSession(callerToken, SceneMode::NORMAL);
+    sptr<HCaptureSession> session = nullptr;
+    sptr<HStreamOperator> hStreamOperator = nullptr;
+    int32_t opMode = SceneMode::NORMAL;
+    InitSessionAndOperator(callerToken, opMode, session, hStreamOperator);
     ASSERT_NE(session, nullptr);
+    ASSERT_NE(hStreamOperator, nullptr);
 
     EXPECT_EQ(session->BeginConfig(), CAMERA_OK);
     EXPECT_EQ(session->AddInput(device), CAMERA_OK);
@@ -1409,9 +1504,12 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_028, TestSize.Level
     device->Open();
 
     uint32_t callerToken = IPCSkeleton::GetCallingTokenID();
+    sptr<HCaptureSession> camSession = nullptr;
+    sptr<HStreamOperator> hStreamOperator = nullptr;
     SceneMode mode = PORTRAIT;
-    sptr<HCaptureSession> camSession = new (std::nothrow) HCaptureSession(callerToken, mode);
+    InitSessionAndOperator(callerToken, mode, camSession, hStreamOperator);
     ASSERT_NE(camSession, nullptr);
+    ASSERT_NE(hStreamOperator, nullptr);
 
     int32_t ret = camSession->AddInput(device);
     EXPECT_EQ(ret, 10);
@@ -1462,9 +1560,12 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_029, TestSize.Level
     device->Open();
 
     uint32_t callerToken = IPCSkeleton::GetCallingTokenID();
+    sptr<HCaptureSession> camSession = nullptr;
+    sptr<HStreamOperator> hStreamOperator = nullptr;
     SceneMode mode = PORTRAIT;
-    sptr<HCaptureSession> camSession = new (std::nothrow) HCaptureSession(callerToken, mode);
+    InitSessionAndOperator(callerToken, mode, camSession, hStreamOperator);
     ASSERT_NE(camSession, nullptr);
+    ASSERT_NE(hStreamOperator, nullptr);
 
     camSession->BeginConfig();
     camSession->Start();
@@ -1492,12 +1593,12 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_029, TestSize.Level
     std::vector<CaptureErrorInfo> info = {};
     info.push_back(it1);
     info.push_back(it2);
-    camSession->OnCaptureError(0, info);
+    hStreamOperator->OnCaptureError(0, info);
 
     std::vector<int32_t> streamIds = {1, 2};
-    camSession->OnFrameShutter(0, streamIds, 0);
-    camSession->OnFrameShutterEnd(0, streamIds, 0);
-    camSession->OnCaptureReady(0, streamIds, 0);
+    hStreamOperator->OnFrameShutter(0, streamIds, 0);
+    hStreamOperator->OnFrameShutterEnd(0, streamIds, 0);
+    hStreamOperator->OnCaptureReady(0, streamIds, 0);
     device->Close();
     camSession->Release();
 }
@@ -1522,9 +1623,12 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_030, TestSize.Level
     device->Open();
 
     uint32_t callerToken = IPCSkeleton::GetCallingTokenID();
+    sptr<HCaptureSession> camSession = nullptr;
+    sptr<HStreamOperator> hStreamOperator = nullptr;
     SceneMode mode = PORTRAIT;
-    sptr<HCaptureSession> camSession = new (std::nothrow) HCaptureSession(callerToken, mode);
+    InitSessionAndOperator(callerToken, mode, camSession, hStreamOperator);
     ASSERT_NE(camSession, nullptr);
+    ASSERT_NE(hStreamOperator, nullptr);
 
     camSession->BeginConfig();
     camSession->Start();
@@ -1550,68 +1654,12 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_030, TestSize.Level
     std::vector<CaptureErrorInfo> info = {};
     info.push_back(it1);
     info.push_back(it2);
-    camSession->OnCaptureError(0, info);
+    hStreamOperator->OnCaptureError(0, info);
 
     std::vector<int32_t> streamIds = {1, 2};
-    camSession->OnFrameShutter(0, streamIds, 0);
-    camSession->OnFrameShutterEnd(0, streamIds, 0);
-    camSession->OnCaptureReady(0, streamIds, 0);
-
-    device->Close();
-    camSession->Release();
-}
-
-/*
- * Feature: coverage
- * Function: Test anomalous branch
- * SubFunction: NA
- * FunctionPoints: NA
- * EnvConditions: NA
- * CaseDescription: Test HCaptureSession with anomalous branch.
- */
-HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_031, TestSize.Level0)
-{
-    std::vector<string> cameraIds;
-    cameraService_->GetCameraIds(cameraIds);
-    ASSERT_NE(cameraIds.size(), 0);
-    cameraService_->SetServiceStatus(CameraServiceStatus::SERVICE_READY);
-    sptr<ICameraDeviceService> device = nullptr;
-    cameraService_->CreateCameraDevice(cameraIds[0], device);
-    ASSERT_NE(device, nullptr);
-    device->Open();
-
-    uint32_t callerToken = IPCSkeleton::GetCallingTokenID();
-    sptr<HCaptureSession> camSession = new (std::nothrow) HCaptureSession(callerToken, PORTRAIT);
-    ASSERT_NE(camSession, nullptr);
-    EXPECT_EQ(camSession->CommitConfig(), CAMERA_INVALID_STATE);
-    camSession->BeginConfig();
-    camSession->Start();
-
-    sptr<IConsumerSurface> Surface = IConsumerSurface::Create();
-    sptr<IBufferProducer> producer = Surface->GetProducer();
-    sptr<HStreamCapture> streamCapture= new(std::nothrow) HStreamCapture(producer, 0, 0, 0);
-    ASSERT_NE(streamCapture, nullptr);
-
-    EXPECT_EQ(camSession->AddOutput(StreamType::CAPTURE, streamCapture), 0);
-
-    camSession->CommitConfig();
-
-    CaptureErrorInfo it1;
-    it1.streamId_ = 0;
-    it1.error_ = BUFFER_LOST;
-    CaptureErrorInfo it2;
-    it2.streamId_ = 1;
-    it2.error_ =  BUFFER_LOST;
-    std::vector<CaptureErrorInfo> info = {};
-    info.push_back(it1);
-    info.push_back(it2);
-    camSession->OnCaptureError(0, info);
-
-    std::vector<int32_t> streamIds = {0, 1, 2};
-    camSession->OnFrameShutter(0, streamIds, 0);
-    camSession->OnFrameShutterEnd(0, streamIds, 0);
-    camSession->OnCaptureReady(0, streamIds, 0);
-    camSession->BeginConfig();
+    hStreamOperator->OnFrameShutter(0, streamIds, 0);
+    hStreamOperator->OnFrameShutterEnd(0, streamIds, 0);
+    hStreamOperator->OnCaptureReady(0, streamIds, 0);
 
     device->Close();
     camSession->Release();
@@ -1637,9 +1685,12 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_032, TestSize.Level
     device->Open();
 
     uint32_t callerToken = IPCSkeleton::GetCallingTokenID();
+    sptr<HCaptureSession> camSession = nullptr;
+    sptr<HStreamOperator> hStreamOperator = nullptr;
     SceneMode mode = PORTRAIT;
-    sptr<HCaptureSession> camSession = new (std::nothrow) HCaptureSession(callerToken, mode);
+    InitSessionAndOperator(callerToken, mode, camSession, hStreamOperator);
     ASSERT_NE(camSession, nullptr);
+    ASSERT_NE(hStreamOperator, nullptr);
     EXPECT_EQ(camSession->Start(), CAMERA_INVALID_STATE);
 
     sptr<IConsumerSurface> Surface = IConsumerSurface::Create();
@@ -1682,13 +1733,16 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_032, TestSize.Level
 HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_033, TestSize.Level0)
 {
     uint32_t callerToken = IPCSkeleton::GetCallingTokenID();
+    sptr<HCaptureSession> camSession = nullptr;
+    sptr<HStreamOperator> hStreamOperator = nullptr;
     SceneMode mode = PORTRAIT;
-    sptr<HCaptureSession> camSession = new (std::nothrow) HCaptureSession(callerToken, mode);
+    InitSessionAndOperator(callerToken, mode, camSession, hStreamOperator);
     ASSERT_NE(camSession, nullptr);
+    ASSERT_NE(hStreamOperator, nullptr);
 
     std::vector<StreamInfo_V1_1> streamInfos = {};
     EXPECT_EQ(camSession->GetCurrentStreamInfos(streamInfos), 0);
-    EXPECT_EQ(camSession->AddOutputStream(nullptr), CAMERA_INVALID_ARG);
+    EXPECT_EQ(camSession->AddOutput(StreamType::REPEAT, nullptr), CAMERA_INVALID_ARG);
     EXPECT_EQ(camSession->RemoveOutputStream(nullptr), CAMERA_INVALID_ARG);
     camSession->Release();
 }
@@ -1704,9 +1758,12 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_033, TestSize.Level
 HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_034, TestSize.Level0)
 {
     uint32_t callerToken = IPCSkeleton::GetCallingTokenID();
+    sptr<HCaptureSession> camSession = nullptr;
+    sptr<HStreamOperator> hStreamOperator = nullptr;
     SceneMode mode = PORTRAIT;
-    sptr<HCaptureSession> camSession = new (std::nothrow) HCaptureSession(callerToken, mode);
+    InitSessionAndOperator(callerToken, mode, camSession, hStreamOperator);
     ASSERT_NE(camSession, nullptr);
+    ASSERT_NE(hStreamOperator, nullptr);
 
     camSession->cameraDevice_ = nullptr;
     EXPECT_EQ(camSession->LinkInputAndOutputs(), CAMERA_INVALID_SESSION_CFG);
@@ -1724,17 +1781,18 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_034, TestSize.Level
 HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_035, TestSize.Level0)
 {
     uint32_t callerToken = IPCSkeleton::GetCallingTokenID();
+    sptr<HCaptureSession> camSession = nullptr;
+    sptr<HStreamOperator> hStreamOperator = nullptr;
     SceneMode mode = PORTRAIT;
-    sptr<HCaptureSession> camSession = new (std::nothrow) HCaptureSession(callerToken, mode);
+    InitSessionAndOperator(callerToken, mode, camSession, hStreamOperator);
     ASSERT_NE(camSession, nullptr);
+    ASSERT_NE(hStreamOperator, nullptr);
 
     bool isNeedUpdate = false;
     ColorSpace colorSpace = ColorSpace::SRGB;
     ColorSpace captureColorSpace = ColorSpace::SRGB;
-    camSession->currColorSpace_ = ColorSpace::BT709;
-    camSession->currCaptureColorSpace_ = ColorSpace::BT709;
     EXPECT_EQ(camSession->SetColorSpace(colorSpace, captureColorSpace, isNeedUpdate), CAMERA_INVALID_STATE);
-    camSession->currColorSpace_ = ColorSpace::SRGB;
+    captureColorSpace = ColorSpace::SRGB;
     EXPECT_EQ(camSession->SetColorSpace(colorSpace, captureColorSpace, isNeedUpdate), CAMERA_INVALID_STATE);
     camSession->Release();
 }
@@ -1750,22 +1808,30 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_035, TestSize.Level
 HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_036, TestSize.Level0)
 {
     uint32_t callerToken = IPCSkeleton::GetCallingTokenID();
+    sptr<HCaptureSession> camSession = nullptr;
+    sptr<HStreamOperator> hStreamOperator = nullptr;
     SceneMode mode = PORTRAIT;
-    sptr<HCaptureSession> camSession = new (std::nothrow) HCaptureSession(callerToken, mode);
+    InitSessionAndOperator(callerToken, mode, camSession, hStreamOperator);
     ASSERT_NE(camSession, nullptr);
+    ASSERT_NE(hStreamOperator, nullptr);
 
-    camSession->RestartStreams();
+    std::vector<string> cameraIds;
+    cameraService_->GetCameraIds(cameraIds);
+    ASSERT_NE(cameraIds.size(), 0);
+    shared_ptr<OHOS::Camera::CameraMetadata> settings;
+    cameraHostManager_->GetCameraAbility(cameraIds[0], settings);
+    hStreamOperator->RestartStreams(settings);
 
     ColorSpace colorSpace = ColorSpace::SRGB;
-    EXPECT_EQ(camSession->CheckIfColorSpaceMatchesFormat(colorSpace), 0);
+    EXPECT_EQ(hStreamOperator->CheckIfColorSpaceMatchesFormat(colorSpace), 0);
     colorSpace = ColorSpace::BT2020_HLG ;
-    EXPECT_EQ(camSession->CheckIfColorSpaceMatchesFormat(colorSpace), 0);
+    EXPECT_EQ(hStreamOperator->CheckIfColorSpaceMatchesFormat(colorSpace), 0);
     colorSpace = ColorSpace::BT2020_PQ ;
-    EXPECT_EQ(camSession->CheckIfColorSpaceMatchesFormat(colorSpace), 0);
+    EXPECT_EQ(hStreamOperator->CheckIfColorSpaceMatchesFormat(colorSpace), 0);
     colorSpace = ColorSpace::BT2020_HLG_LIMIT ;
-    EXPECT_EQ(camSession->CheckIfColorSpaceMatchesFormat(colorSpace), 0);
+    EXPECT_EQ(hStreamOperator->CheckIfColorSpaceMatchesFormat(colorSpace), 0);
     colorSpace = ColorSpace::BT2020_PQ_LIMIT;
-    EXPECT_EQ(camSession->CheckIfColorSpaceMatchesFormat(colorSpace), 0);
+    EXPECT_EQ(hStreamOperator->CheckIfColorSpaceMatchesFormat(colorSpace), 0);
     camSession->Release();
 }
 
@@ -1780,9 +1846,12 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_036, TestSize.Level
 HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_037, TestSize.Level0)
 {
     uint32_t callerToken = IPCSkeleton::GetCallingTokenID();
+    sptr<HCaptureSession> camSession = nullptr;
+    sptr<HStreamOperator> hStreamOperator = nullptr;
     SceneMode mode = PORTRAIT;
-    sptr<HCaptureSession> camSession = new (std::nothrow) HCaptureSession(callerToken, mode);
+    InitSessionAndOperator(callerToken, mode, camSession, hStreamOperator);
     ASSERT_NE(camSession, nullptr);
+    ASSERT_NE(hStreamOperator, nullptr);
     camSession->Release();
 }
 
@@ -1797,17 +1866,26 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_037, TestSize.Level
 HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_038, TestSize.Level0)
 {
     uint32_t callerToken = IPCSkeleton::GetCallingTokenID();
+    sptr<HCaptureSession> camSession = nullptr;
+    sptr<HStreamOperator> hStreamOperator = nullptr;
     SceneMode mode = PORTRAIT;
-    sptr<HCaptureSession> camSession = new (std::nothrow) HCaptureSession(callerToken, mode);
+    InitSessionAndOperator(callerToken, mode, camSession, hStreamOperator);
     ASSERT_NE(camSession, nullptr);
+    ASSERT_NE(hStreamOperator, nullptr);
 
-    camSession->SetColorSpaceForStreams();
+    hStreamOperator->SetColorSpaceForStreams();
 
     std::vector<StreamInfo_V1_1> streamInfos = {};
-    camSession->CancelStreamsAndGetStreamInfos(streamInfos);
+    hStreamOperator->CancelStreamsAndGetStreamInfos(streamInfos);
 
     camSession->isSessionStarted_ = true;
-    camSession->RestartStreams();
+
+    std::vector<string> cameraIds;
+    cameraService_->GetCameraIds(cameraIds);
+    ASSERT_NE(cameraIds.size(), 0);
+    shared_ptr<OHOS::Camera::CameraMetadata> settings;
+    cameraHostManager_->GetCameraAbility(cameraIds[0], settings);
+    hStreamOperator->RestartStreams(settings);
     camSession->Release();
 }
 
@@ -1822,9 +1900,12 @@ HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_038, TestSize.Level
 HWTEST_F(HCaptureSessionUnitTest, hcapture_session_unit_test_039, TestSize.Level0)
 {
     uint32_t callerToken = IPCSkeleton::GetCallingTokenID();
+    sptr<HCaptureSession> camSession = nullptr;
+    sptr<HStreamOperator> hStreamOperator = nullptr;
     SceneMode mode = PORTRAIT;
-    sptr<HCaptureSession> camSession = new (std::nothrow) HCaptureSession(callerToken, mode);
+    InitSessionAndOperator(callerToken, mode, camSession, hStreamOperator);
     ASSERT_NE(camSession, nullptr);
+    ASSERT_NE(hStreamOperator, nullptr);
 
     float currentFps = 0;
     float currentZoomRatio = 0;
diff --git a/frameworks/native/camera/test/unittest/camera_service/hdi_stream_test/src/hstream_capture_unittest.cpp b/frameworks/native/camera/test/unittest/camera_service/hdi_stream_test/src/hstream_capture_unittest.cpp
index 35e1f87a..37666606 100644
--- a/frameworks/native/camera/test/unittest/camera_service/hdi_stream_test/src/hstream_capture_unittest.cpp
+++ b/frameworks/native/camera/test/unittest/camera_service/hdi_stream_test/src/hstream_capture_unittest.cpp
@@ -129,6 +129,7 @@ public:
     MOCK_METHOD2(OnFrameShutter, int32_t(int32_t captureId, uint64_t timestamp));
     MOCK_METHOD2(OnFrameShutterEnd, int32_t(int32_t captureId, uint64_t timestamp));
     MOCK_METHOD2(OnCaptureReady, int32_t(int32_t captureId, uint64_t timestamp));
+    MOCK_METHOD1(OnOfflineDeliveryFinished, int32_t(int32_t captureId));
     ~MockHStreamCaptureCallbackStub() {}
 };
 
@@ -658,6 +659,7 @@ HWTEST_F(HStreamCaptureUnitTest, CheckResetBurstKeys003, TestSize.Level0)
  */
 HWTEST_F(HStreamCaptureUnitTest, CheckBurstCapture001, TestSize.Level0)
 {
+    MEDIA_INFO_LOG("CheckBurstCapture001 start");
     int32_t format = CAMERA_FORMAT_YUV_420_SP;
     int32_t width = PHOTO_DEFAULT_WIDTH;
     int32_t height = PHOTO_DEFAULT_HEIGHT;
diff --git a/frameworks/native/camera/test/unittest/framework_native/session/src/capture_session_unittest.cpp b/frameworks/native/camera/test/unittest/framework_native/session/src/capture_session_unittest.cpp
index c62c3920..b0c0e357 100644
--- a/frameworks/native/camera/test/unittest/framework_native/session/src/capture_session_unittest.cpp
+++ b/frameworks/native/camera/test/unittest/framework_native/session/src/capture_session_unittest.cpp
@@ -280,36 +280,6 @@ HWTEST_F(CaptureSessionUnitTest, capture_session_unittest_004, TestSize.Level0)
     session->Release();
 }
 
-/*
- * Feature: Framework
- * Function: Test captureSession with SetPreviewRotation and CreateMediaLibrary
- * SubFunction: NA
- * FunctionPoints: NA
- * EnvConditions: NA
- * CaseDescription: Test SetPreviewRotation for captureSession is nullptr and CreateMediaLibrary for
- * captureSession is nullptr and not nullptr
- */
-HWTEST_F(CaptureSessionUnitTest, capture_session_unittest_005, TestSize.Level0)
-{
-    sptr<CaptureSession> session = cameraManager_->CreateCaptureSession();
-    ASSERT_NE(session, nullptr);
-
-    EXPECT_NE(session->GetCaptureSession(), nullptr);
-    sptr<CameraPhotoProxy> photoProxy{new CameraPhotoProxy()};
-    std::string uri;
-    int32_t cameraShotType;
-    string burstKey = "";
-    int64_t timestamp = 0000;
-    session->CreateMediaLibrary(photoProxy, uri, cameraShotType, burstKey, timestamp);
-
-    std::string deviceClass;
-    session->SetCaptureSession(nullptr);
-    session->CreateMediaLibrary(photoProxy, uri, cameraShotType, burstKey, timestamp);
-    EXPECT_EQ(session->SetPreviewRotation(deviceClass), CAMERA_OK);
-
-    session->Release();
-}
-
 /*
  * Feature: Framework
  * Function: Test captureSession with SetFlashMode
@@ -3852,14 +3822,6 @@ HWTEST_F(CaptureSessionUnitTest, capture_session_function_unittest_002, TestSize
 {
     sptr<CaptureSession> session = cameraManager_->CreateCaptureSession();
     ASSERT_NE(session, nullptr);
-    sptr<SurfaceBuffer> surfaceBuffer;
-    sptr<CameraPhotoProxy> photoProxy{new CameraPhotoProxy()};
-    std::string uri;
-    int32_t cameraShotType;
-    string burstKey = "";
-    int64_t timestamp = 0000;
-    session->CreateMediaLibrary(Media::Picture::Create(surfaceBuffer), photoProxy,
-        uri, cameraShotType, burstKey, timestamp);
 
     session->SetExposureCallback(nullptr);
     EXPECT_EQ(session->GetExposureCallback(), nullptr);
diff --git a/frameworks/native/ndk/impl/photo_listener_impl.cpp b/frameworks/native/ndk/impl/photo_listener_impl.cpp
index 1e257861..b9571319 100644
--- a/frameworks/native/ndk/impl/photo_listener_impl.cpp
+++ b/frameworks/native/ndk/impl/photo_listener_impl.cpp
@@ -259,14 +259,14 @@ void PhotoListener::CreateMediaLibrary(sptr<SurfaceBuffer> surfaceBuffer, Buffer
     photoProxy->SetDeferredAttrs(imageIdStr, extraData.deferredProcessingType, extraData.size,
         extraData.deferredImageFormat);
     auto photoOutput = photoOutput_->GetInnerPhotoOutput();
-    if (photoOutput && photoOutput->GetSession()) {
+    if (photoOutput) {
         auto settings = photoOutput->GetDefaultCaptureSetting();
         if (settings) {
             auto location = std::make_shared<Location>();
             settings->GetLocation(location);
             photoProxy->SetLocation(location->latitude, location->longitude);
         }
-        photoOutput->GetSession()->CreateMediaLibrary(photoProxy, uri, cameraShotType, burstKey, timestamp);
+        photoOutput->CreateMediaLibrary(photoProxy, uri, cameraShotType, burstKey, timestamp);
     }
 }
 
diff --git a/frameworks/native/ndk/impl/photo_output_impl.h b/frameworks/native/ndk/impl/photo_output_impl.h
index ade84e39..ab69c493 100644
--- a/frameworks/native/ndk/impl/photo_output_impl.h
+++ b/frameworks/native/ndk/impl/photo_output_impl.h
@@ -196,6 +196,10 @@ public:
         }
     }
 
+    void OnOfflineDeliveryFinished(const int32_t captureId) const override
+    {
+        MEDIA_DEBUG_LOG("OnOfflineDeliveryFinished is called in ndk!");
+    }
 private:
     Camera_PhotoOutput* photoOutput_;
     PhotoOutput_Callbacks callback_;
diff --git a/interfaces/inner_api/native/camera/include/output/capture_output.h b/interfaces/inner_api/native/camera/include/output/capture_output.h
index e13f2bee..0ea7050a 100644
--- a/interfaces/inner_api/native/camera/include/output/capture_output.h
+++ b/interfaces/inner_api/native/camera/include/output/capture_output.h
@@ -142,6 +142,8 @@ public:
 
     virtual int32_t CreateStream() = 0;
 
+    bool IsHasEnableOfflinePhoto();
+
     virtual void AddTag(Tag tag) final;
     virtual void RemoveTag(Tag tag) final;
     virtual bool IsTagSetted(Tag tag) final;
@@ -179,6 +181,7 @@ private:
 
     std::mutex tagsMutex_;
     std::unordered_set<Tag> tags_;
+    bool mIsHasEnableOfflinePhoto_ = false;
 };
 } // namespace CameraStandard
 } // namespace OHOS
diff --git a/interfaces/inner_api/native/camera/include/output/photo_output.h b/interfaces/inner_api/native/camera/include/output/photo_output.h
index 5fdbfa17..9696ffd0 100644
--- a/interfaces/inner_api/native/camera/include/output/photo_output.h
+++ b/interfaces/inner_api/native/camera/include/output/photo_output.h
@@ -101,6 +101,13 @@ public:
      * @param errorCode Indicates a {@link ErrorCode} which will give information for photo capture callback error
      */
     virtual void OnCaptureError(const int32_t captureId, const int32_t errorCode) const = 0;
+
+    /**
+     * @brief Called when camera offline delivery finished.
+     *
+     * @param captureId Obtain the constant capture id for the photo capture callback.
+     */
+    virtual void OnOfflineDeliveryFinished(const int32_t captureId) const = 0;
 };
 
 class [[deprecated]] PhotoCallback {
@@ -138,6 +145,13 @@ public:
      * @param errorCode Indicates a {@link ErrorCode} which will give information for photo capture callback error
      */
     virtual void OnCaptureError(const int32_t captureId, const int32_t errorCode) const = 0;
+
+    /**
+     * @brief Called when camera offline delivery finished.
+     *
+     * @param captureId Obtain the constant capture id for the photo capture callback.
+     */
+    virtual void OnOfflineDeliveryFinished(const int32_t captureId) const = 0;
 };
 
 typedef struct Location {
@@ -251,6 +265,11 @@ private:
     std::mutex locationMutex_;
 };
 
+typedef struct captureMonitorInfo {
+    int32_t CaptureHandle;
+    std::chrono::time_point<std::chrono::steady_clock> timeStart;
+} captureMonitorInfo;
+
 constexpr uint8_t CAPTURE_PHOTO = 1 << 0;
 constexpr uint8_t CAPTURE_DEFERRED_PHOTO = 1 << 1;
 constexpr uint8_t CAPTURE_PHOTO_ASSET = 1 << 2;
@@ -476,6 +495,21 @@ public:
      * @brief Enable auto aigc photo.
      */
     int32_t EnableAutoAigcPhoto(bool enabled);
+    bool IsOfflineSupported();
+
+    int32_t EnableOfflinePhoto();
+
+    bool IsHasEnableOfflinePhoto();
+
+    void SetSwitchOfflinePhotoOutput(bool isHasSwitched);
+
+    bool IsHasSwitchOfflinePhoto();
+
+    void CreateMediaLibrary(sptr<CameraPhotoProxy> photoProxy, std::string &uri, int32_t &cameraShotType,
+        std::string &burstKey, int64_t timestamp);
+
+    void CreateMediaLibrary(std::unique_ptr<Media::Picture> picture, sptr<CameraPhotoProxy> photoProxy,
+        std::string &uri, int32_t &cameraShotType, std::string &burstKey, int64_t timestamp);
 
     /**
      * @brief Get photo buffer.
@@ -519,8 +553,10 @@ public:
     std::map<int32_t, sptr<SurfaceBuffer>> captureIdDebugMap_;
     std::atomic<bool> isRawImageDelivery_ = false;
     std::shared_ptr<DeferredProcessing::TaskManager> taskManager_;
+    std::map<int32_t, captureMonitorInfo> captureIdToCaptureInfoMap_;
 private:
     std::mutex callbackMutex_;
+    std::mutex offlineStatusMutex_;
     uint8_t callbackFlag_ = CAPTURE_DEFERRED_PHOTO;
     bool isNativeSurface_ = false;
     DeferredDeliveryImageType deferredType_ = DeferredDeliveryImageType::DELIVERY_NONE;
@@ -528,6 +564,8 @@ private:
     sptr<IStreamCaptureCallback> cameraSvcCallback_;
     std::shared_ptr<PhotoCaptureSetting> defaultCaptureSetting_;
     void CameraServerDied(pid_t pid) override;
+    bool mIsHasEnableOfflinePhoto_ = false;
+    bool isHasSwitched_ = false;
 };
 
 class HStreamCaptureCallbackImpl : public HStreamCaptureCallbackStub {
@@ -589,6 +627,13 @@ public:
      */
     int32_t OnCaptureReady(const int32_t captureId, const uint64_t timestamp) override;
 
+    /**
+     * @brief Called when camera offline delivery finished.
+     *
+     * @param captureId Obtain the constant capture id for the photo capture callback.
+     */
+    int32_t OnOfflineDeliveryFinished(const int32_t captureId) override;
+
     inline sptr<PhotoOutput> GetPhotoOutput()
     {
         if (innerPhotoOutput_ == nullptr) {
diff --git a/interfaces/inner_api/native/camera/include/session/capture_session.h b/interfaces/inner_api/native/camera/include/session/capture_session.h
index 4da8dcde..bbcda9a8 100644
--- a/interfaces/inner_api/native/camera/include/session/capture_session.h