From 71f2472cf8aa4d9cccb7bd575210bd6c25cc3ec5 Mon Sep 17 00:00:00 2001
From: sunchao <sunchao106@huawei.com>
Date: Thu, 28 Nov 2024 10:02:28 +0800
Subject: [PATCH] =?UTF-8?q?=E4=BF=AE=E5=A4=8DcameraManager=E4=B8=AD?=
 =?UTF-8?q?=E7=9A=84on=E5=92=8Coff=E5=9B=9E=E8=B0=83=20TicketNo:DTS2024112?=
 =?UTF-8?q?730773=20Description:=E4=BF=AE=E5=A4=8DcameraManager=E7=9A=84on?=
 =?UTF-8?q?=E5=92=8Coff=E5=9B=9E=E8=B0=83=20Team:Gitee=20Feature=20or=20Bu?=
 =?UTF-8?q?gfix:Bugfix=20Binary=20Source:Sync=20from=20gitee=20PrivateCode?=
 =?UTF-8?q?(Yes/No):no?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Change-Id: I66bf2bf91685fa5a6f622b619426bb8cba963535
---
 .../src/input/camera_manager_napi.cpp         | 82 +++++++++----------
 1 file changed, 37 insertions(+), 45 deletions(-)

diff --git a/frameworks/js/camera_napi/src/input/camera_manager_napi.cpp b/frameworks/js/camera_napi/src/input/camera_manager_napi.cpp
index 2f0a585e0..3bd1f355b 100644
--- a/frameworks/js/camera_napi/src/input/camera_manager_napi.cpp
+++ b/frameworks/js/camera_napi/src/input/camera_manager_napi.cpp
@@ -1373,25 +1373,24 @@ void CameraManagerNapi::ProcessCameraInfo(sptr<CameraManager>& cameraManager, co
 void CameraManagerNapi::RegisterCameraStatusCallbackListener(
     const std::string& eventName, napi_env env, napi_value callback, const std::vector<napi_value>& args, bool isOnce)
 {
-    if (cameraManagerCallback_ == nullptr) {
-        shared_ptr<CameraManagerCallbackNapi> cameraManagerCallback =
-            std::static_pointer_cast<CameraManagerCallbackNapi>(cameraManager_->GetApplicationCallback());
-        if (cameraManagerCallback == nullptr) {
-            cameraManagerCallback = make_shared<CameraManagerCallbackNapi>(env);
-            cameraManager_->SetCallback(cameraManagerCallback);
-        }
-        cameraManagerCallback_ = cameraManagerCallback;
+    auto cameraManagerCallback =
+        std::static_pointer_cast<CameraManagerCallbackNapi>(cameraManager_->GetApplicationCallback());
+    if (cameraManagerCallback == nullptr) {
+        cameraManagerCallback = make_shared<CameraManagerCallbackNapi>(env);
+        cameraManager_->SetCallback(cameraManagerCallback);
     }
-    cameraManagerCallback_->SaveCallbackReference(eventName, callback, isOnce);
+    cameraManagerCallback->SaveCallbackReference(eventName, callback, isOnce);
 }
 
 void CameraManagerNapi::UnregisterCameraStatusCallbackListener(
     const std::string& eventName, napi_env env, napi_value callback, const std::vector<napi_value>& args)
 {
-    if (cameraManagerCallback_ == nullptr) {
+    auto cameraManagerCallback = std::static_pointer_cast<CameraManagerCallbackNapi>(cameraManager_->
+        GetApplicationCallback());
+    if (cameraManagerCallback == nullptr) {
         MEDIA_ERR_LOG("cameraManagerCallback is null");
     } else {
-        cameraManagerCallback_->RemoveCallbackRef(eventName, callback);
+        cameraManagerCallback->RemoveCallbackRef(eventName, callback);
     }
 }
 
@@ -1402,16 +1401,13 @@ void CameraManagerNapi::RegisterCameraMuteCallbackListener(
         MEDIA_ERR_LOG("SystemApi On cameraMute is called!");
         return;
     }
-    if (cameraMuteListener_ == nullptr) {
-        shared_ptr<CameraMuteListenerNapi> cameraMuteListener =
+    auto cameraMuteListener =
             std::static_pointer_cast<CameraMuteListenerNapi>(cameraManager_->GetCameraMuteListener());
-        if (cameraMuteListener == nullptr) {
-            cameraMuteListener = make_shared<CameraMuteListenerNapi>(env);
-            cameraManager_->RegisterCameraMuteListener(cameraMuteListener);
-        }
-        cameraMuteListener_ = cameraMuteListener;
+    if (cameraMuteListener == nullptr) {
+        cameraMuteListener = make_shared<CameraMuteListenerNapi>(env);
+        cameraManager_->RegisterCameraMuteListener(cameraMuteListener);
     }
-    cameraMuteListener_->SaveCallbackReference(eventName, callback, isOnce);
+    cameraMuteListener->SaveCallbackReference(eventName, callback, isOnce);
 }
 
 void CameraManagerNapi::UnregisterCameraMuteCallbackListener(
@@ -1421,60 +1417,56 @@ void CameraManagerNapi::UnregisterCameraMuteCallbackListener(
         MEDIA_ERR_LOG("SystemApi On cameraMute is called!");
         return;
     }
-    if (cameraMuteListener_ == nullptr) {
+    auto cameraMuteListener =
+            std::static_pointer_cast<CameraMuteListenerNapi>(cameraManager_->GetCameraMuteListener());
+    if (cameraMuteListener == nullptr) {
         MEDIA_ERR_LOG("cameraMuteListener is null");
     } else {
-        cameraMuteListener_->RemoveCallbackRef(eventName, callback);
+        cameraMuteListener->RemoveCallbackRef(eventName, callback);
     }
 }
 
 void CameraManagerNapi::RegisterTorchStatusCallbackListener(
     const std::string& eventName, napi_env env, napi_value callback, const std::vector<napi_value>& args, bool isOnce)
 {
-    if (torchListener_ == nullptr) {
-        shared_ptr<TorchListenerNapi> torchListener =
-            std::static_pointer_cast<TorchListenerNapi>(cameraManager_->GetTorchListener());
-        if (torchListener == nullptr) {
-            torchListener = make_shared<TorchListenerNapi>(env);
-            cameraManager_->RegisterTorchListener(torchListener);
-        }
-        torchListener_ = torchListener;
+    auto torchListener = std::static_pointer_cast<TorchListenerNapi>(cameraManager_->GetTorchListener());
+    if (torchListener == nullptr) {
+        torchListener = make_shared<TorchListenerNapi>(env);
+        cameraManager_->RegisterTorchListener(torchListener);
     }
-    torchListener_->SaveCallbackReference(eventName, callback, isOnce);
+    torchListener->SaveCallbackReference(eventName, callback, isOnce);
 }
 
 void CameraManagerNapi::UnregisterTorchStatusCallbackListener(
     const std::string& eventName, napi_env env, napi_value callback, const std::vector<napi_value>& args)
 {
-    if (torchListener_ == nullptr) {
-        MEDIA_ERR_LOG("torchListener_ is null");
+    auto torchListener = std::static_pointer_cast<TorchListenerNapi>(cameraManager_->GetTorchListener());
+    if (torchListener == nullptr) {
+        MEDIA_ERR_LOG("torchListener is null");
     } else {
-        torchListener_->RemoveCallbackRef(eventName, callback);
+        torchListener->RemoveCallbackRef(eventName, callback);
     }
 }
 
 void CameraManagerNapi::RegisterFoldStatusCallbackListener(
     const std::string& eventName, napi_env env, napi_value callback, const std::vector<napi_value>& args, bool isOnce)
 {
-    if (foldListener_ == nullptr) {
-        shared_ptr<FoldListenerNapi> foldListener =
-            std::static_pointer_cast<FoldListenerNapi>(cameraManager_->GetFoldListener());
-        if (foldListener == nullptr) {
-            foldListener = make_shared<FoldListenerNapi>(env);
-            cameraManager_->RegisterFoldListener(foldListener);
-        }
-        foldListener_ = foldListener;
+    auto foldListener = std::static_pointer_cast<FoldListenerNapi>(cameraManager_->GetFoldListener());
+    if (foldListener == nullptr) {
+        foldListener = make_shared<FoldListenerNapi>(env);
+        cameraManager_->RegisterFoldListener(foldListener);
     }
-    foldListener_->SaveCallbackReference(eventName, callback, isOnce);
+    foldListener->SaveCallbackReference(eventName, callback, isOnce);
 }
 
 void CameraManagerNapi::UnregisterFoldStatusCallbackListener(
     const std::string& eventName, napi_env env, napi_value callback, const std::vector<napi_value>& args)
 {
-    if (foldListener_ == nullptr) {
-        MEDIA_ERR_LOG("torchListener_ is null");
+    auto foldListener = std::static_pointer_cast<FoldListenerNapi>(cameraManager_->GetFoldListener());
+    if (foldListener == nullptr) {
+        MEDIA_ERR_LOG("foldListener is null");
     } else {
-        foldListener_->RemoveCallbackRef(eventName, callback);
+        foldListener->RemoveCallbackRef(eventName, callback);
     }
 }
 
-- 
2.45.2.huawei.6

