From b2d3720ae382b87a7910cef576eddf035479f9aa Mon Sep 17 00:00:00 2001
From: s00888898 <s00888898@notesmail.huawei.com/>
Date: Fri, 18 Jul 2025 17:27:19 +0800
Subject: [PATCH] TicketNo:na Description: Team: Feature or Bugfix: Binary
 Source: PrivateCode(Yes/No):

Change-Id: I96294c4b223cd41ed50c4c838cadcc8abcd1e67b
---
 services/camera_service/include/hstream_repeat.h |  2 ++
 services/camera_service/src/hcapture_session.cpp |  5 +++--
 services/camera_service/src/hstream_operator.cpp |  6 ++++++
 services/camera_service/src/hstream_repeat.cpp   | 14 ++++++++++++++
 4 files changed, 25 insertions(+), 2 deletions(-)

diff --git a/services/camera_service/include/hstream_repeat.h b/services/camera_service/include/hstream_repeat.h
index d0e4ed2468..43bfe419b6 100644
--- a/services/camera_service/include/hstream_repeat.h
+++ b/services/camera_service/include/hstream_repeat.h
@@ -129,6 +129,7 @@ public:
     int32_t UnlinkInput() override;
     int32_t movieCodecType_{0};
     std::vector<double> location_;
+    int32_t SetCurrentMode(int32_t mode);
 
 private:
     void SetVideoStreamInfo(StreamInfo_V1_1& streamInfo);
@@ -187,6 +188,7 @@ private:
     sptr<OHOS::IBufferProducer> depthProducer_;
     sptr<ICameraRecorder> recorder_;
     sptr<StreamRepeatDeathRecipient> streamRepeatDeathRecipient_ = nullptr;
+    int32_t currentMode_ = 0;
 };
 } // namespace CameraStandard
 } // namespace OHOS
diff --git a/services/camera_service/src/hcapture_session.cpp b/services/camera_service/src/hcapture_session.cpp
index 30ea3b36ad..9790da217a 100644
--- a/services/camera_service/src/hcapture_session.cpp
+++ b/services/camera_service/src/hcapture_session.cpp
@@ -1285,8 +1285,9 @@ int32_t HCaptureSession::SetColorSpace(int32_t curColorSpace, bool isNeedUpdate)
             auto hStreamOperatorSptr = GetStreamOperator();
             CHECK_RETURN_ELOG(hStreamOperatorSptr == nullptr, "hStreamOperator is nullptr");
             result = hStreamOperatorSptr->SetColorSpace(colorSpace, isNeedUpdate);
-            CHECK_RETURN(result != CAMERA_OK && isNeedUpdate);
-            if (isNeedUpdate) {
+            int32_t tempColorSpace;
+            GetActiveColorSpace(tempColorSpace);
+            if (result == CAMERA_OK && static_cast<ColorSpace>(tempColorSpace) != colorSpace && isNeedUpdate) {
                 auto device = GetCameraDevice();
                 CHECK_RETURN_ELOG(device == nullptr, "HCaptureSession::SetColorSpace device is null");
                 std::shared_ptr<OHOS::Camera::CameraMetadata> settings = device->CloneCachedSettings();
diff --git a/services/camera_service/src/hstream_operator.cpp b/services/camera_service/src/hstream_operator.cpp
index b8bde0f061..2c82d84605 100644
--- a/services/camera_service/src/hstream_operator.cpp
+++ b/services/camera_service/src/hstream_operator.cpp
@@ -68,6 +68,7 @@
 #include "moving_photo_proxy.h"
 #include "parameters.h"
 #include "refbase.h"
+#include "session/capture_scene_const.h"
 #include "smooth_zoom.h"
 #include "surface.h"
 #include "surface_buffer.h"
@@ -453,6 +454,11 @@ int32_t HStreamOperator::LinkInputAndOutputs(const std::shared_ptr<OHOS::Camera:
             "HStreamOperator::LinkInputAndOutputs streamType:%{public}d, streamId:%{public}d ,hdiStreamId:%{public}d",
             stream->GetStreamType(), stream->GetFwkStreamId(), stream->GetHdiStreamId());
         StreamInfo_V1_1 curStreamInfo;
+        HStreamRepeat* repeatStream = nullptr;
+        if (stream->GetStreamType() == StreamType::REPEAT) {
+            repeatStream = static_cast<HStreamRepeat*>(stream.GetRefPtr());
+            CHECK_EXECUTE(opMode == static_cast<SceneMode>(opMode), repeatStream->SetCurrentMode(opMode));
+        }
         stream->SetStreamInfo(curStreamInfo);
         if (stream->GetStreamType() != StreamType::METADATA) {
             allStreamInfos.push_back(curStreamInfo);
diff --git a/services/camera_service/src/hstream_repeat.cpp b/services/camera_service/src/hstream_repeat.cpp
index 5266e763f2..15dbd77b19 100644
--- a/services/camera_service/src/hstream_repeat.cpp
+++ b/services/camera_service/src/hstream_repeat.cpp
@@ -14,6 +14,7 @@
  */
 
 #include "hstream_repeat.h"
+#include "session/capture_scene_const.h"
 #include "iproxy_broker.h"
 
 #include <cstdint>
@@ -151,6 +152,9 @@ void HStreamRepeat::SetStreamInfo(StreamInfo_V1_1& streamInfo)
         case RepeatStreamType::SKETCH:
             streamInfo.v1_0.intent_ = StreamIntent::PREVIEW;
             streamInfo.v1_0.encodeType_ = ENCODE_TYPE_NULL;
+            CHECK_EXECUTE(CheckSystemApp() && currentMode_ == static_cast<int32_t>(SceneMode::VIDEO),
+                streamInfo.v1_0.dataspace_ = (streamInfo.v1_0.dataspace_ == CM_ColorSpaceType_V2_1::CM_BT2020_HLG_LIMIT)
+                ? CM_ColorSpaceType_V2_1::CM_BT2020_HLG_FULL : streamInfo.v1_0.dataspace_);
             HDI::Camera::V1_1::ExtendedStreamInfo extendedStreamInfo {
                 .type = static_cast<HDI::Camera::V1_1::ExtendedStreamInfoType>(
                     HDI::Camera::V1_2::EXTENDED_STREAM_INFO_SKETCH),
@@ -161,6 +165,13 @@ void HStreamRepeat::SetStreamInfo(StreamInfo_V1_1& streamInfo)
     }
 }
 
+int32_t HStreamRepeat::SetCurrentMode(int32_t mode)
+{
+    MEDIA_DEBUG_LOG("HStreamRepeat::SetCurentMode current mode:%{public}d", mode);
+    currentMode_ = mode;
+    return 0;
+}
+
 void HStreamRepeat::SetVideoStreamInfo(StreamInfo_V1_1& streamInfo)
 {
     streamInfo.v1_0.intent_ = StreamIntent::VIDEO;
@@ -244,6 +255,9 @@ void HStreamRepeat::SetPreviewStreamInfo(StreamInfo_V1_1& streamInfo)
 {
     streamInfo.v1_0.intent_ = StreamIntent::PREVIEW;
     streamInfo.v1_0.encodeType_ = ENCODE_TYPE_NULL;
+    CHECK_EXECUTE(CheckSystemApp() && currentMode_ == static_cast<int32_t>(SceneMode::VIDEO),
+        streamInfo.v1_0.dataspace_ = (streamInfo.v1_0.dataspace_ == CM_ColorSpaceType_V2_1::CM_BT2020_HLG_LIMIT)
+        ? CM_ColorSpaceType_V2_1::CM_BT2020_HLG_FULL : streamInfo.v1_0.dataspace_);
     if (mEnableSecure) {
         MEDIA_INFO_LOG("HStreamRepeat::SetStreamInfo Enter");
         HDI::Camera::V1_1::ExtendedStreamInfo extendedStreamInfo {
-- 
2.45.2.huawei.10

