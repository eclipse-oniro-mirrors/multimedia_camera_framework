From 2b7b5f7c132f79de9ccf59222a42e7ff7ec895e0 Mon Sep 17 00:00:00 2001
From: sunchao <sunchao106@huawei.com>
Date: Mon, 30 Sep 2024 16:41:33 +0800
Subject: [PATCH] =?UTF-8?q?TicketNo:NA=20Description:=20=E6=96=B0=E5=A2=9E?=
 =?UTF-8?q?=E5=BE=AE=E8=B7=9D=E8=9E=8D=E5=90=88=E9=9C=80=E6=B1=82-?=
 =?UTF-8?q?=E7=9B=B8=E6=9C=BA=E6=A1=86=E6=9E=B6=20Team:no=20Feature=20or?=
 =?UTF-8?q?=20Bugfix:Feature=20Binary=20Source:no=20PrivateCode(Yes/No):no?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Change-Id: I17274256803398676b7861965f53e4d7f421dbe3
---
 .../src/ability/camera_ability_napi.cpp       |  31 +++-
 .../src/mode/macro_photo_session_napi.cpp     |   3 +-
 .../src/mode/photo_session_for_sys_napi.cpp   |   4 +-
 .../src/session/camera_session_napi.cpp       | 137 +++++++++++++++++-
 .../camera/src/ability/camera_ability.cpp     |  22 +++
 .../camera/src/session/capture_session.cpp    |  99 +++++++++++++
 .../camera/include/ability/camera_ability.h   |   4 +
 .../camera/include/session/capture_session.h  |  31 ++++
 .../include/ability/camera_ability_napi.h     |   4 +
 .../include/session/camera_session_napi.h     |   5 +
 .../camera_service/src/hcamera_device.cpp     |   6 +-
 11 files changed, 337 insertions(+), 9 deletions(-)

diff --git a/frameworks/js/camera_napi/src/ability/camera_ability_napi.cpp b/frameworks/js/camera_napi/src/ability/camera_ability_napi.cpp
index 765debfa5..51b81c5ed 100644
--- a/frameworks/js/camera_napi/src/ability/camera_ability_napi.cpp
+++ b/frameworks/js/camera_napi/src/ability/camera_ability_napi.cpp
@@ -75,6 +75,11 @@ const std::vector<napi_property_descriptor> CameraFunctionsNapi::macro_query_pro
     DECLARE_NAPI_FUNCTION("isMacroSupported", CameraFunctionsNapi::IsMacroSupported)
 };
 
+const std::vector<napi_property_descriptor> CameraFunctionsNapi::depth_fusion_query_props = {
+    DECLARE_NAPI_FUNCTION("isDepthFusionSupported", CameraFunctionsNapi::IsDepthFusionSupported),
+    DECLARE_NAPI_FUNCTION("getDepthFusionThreshold", CameraFunctionsNapi::GetDepthFusionThreshold)
+};
+
 const std::vector<napi_property_descriptor> CameraFunctionsNapi::portrait_query_props = {
     DECLARE_NAPI_FUNCTION("getSupportedPortraitEffects", CameraFunctionsNapi::GetSupportedPortraitEffects)
 };
@@ -99,7 +104,7 @@ const std::vector<napi_property_descriptor> CameraFunctionsNapi::features_query_
 const std::map<FunctionsType, Descriptor> CameraFunctionsNapi::functionsDescMap_ = {
     {FunctionsType::PHOTO_FUNCTIONS, {flash_query_props, auto_exposure_query_props, focus_query_props, zoom_query_props,
         beauty_query_props, color_effect_query_props, color_management_query_props, macro_query_props,
-        manual_exposure_query_props, features_query_props}},
+        depth_fusion_query_props, manual_exposure_query_props, features_query_props}},
     {FunctionsType::PORTRAIT_PHOTO_FUNCTIONS, {flash_query_props, auto_exposure_query_props, focus_query_props,
         zoom_query_props, beauty_query_props, color_effect_query_props, color_management_query_props,
         portrait_query_props, aperture_query_props, features_query_props}},
@@ -467,6 +472,30 @@ napi_value CameraFunctionsNapi::IsMacroSupported(napi_env env, napi_callback_inf
     });
 }
 
+napi_value CameraFunctionsNapi::IsDepthFusionSupported(napi_env env, napi_callback_info info)
+{
+    size_t argc = ARGS_ZERO;
+    napi_value argv[ARGS_ZERO];
+    napi_value thisVar = nullptr;
+    CAMERA_NAPI_GET_JS_ARGS(env, info, argc, argv, thisVar);
+
+    return HandleQuery(env, info, thisVar, [](auto ability) {
+        return ability->IsDepthFusionSupported();
+    });
+}
+
+napi_value CameraFunctionsNapi::GetDepthFusionThreshold(napi_env env, napi_callback_info info)
+{
+    size_t argc = ARGS_ZERO;
+    napi_value argv[ARGS_ZERO];
+    napi_value thisVar = nullptr;
+    CAMERA_NAPI_GET_JS_ARGS(env, info, argc, argv, thisVar);
+
+    return HandleQuery(env, info, thisVar, [](auto ability) {
+        return ability->GetDepthFusionThreshold();
+    });
+}
+
 napi_value CameraFunctionsNapi::GetSupportedPortraitEffects(napi_env env, napi_callback_info info)
 {
     size_t argc = ARGS_ZERO;
diff --git a/frameworks/js/camera_napi/src/mode/macro_photo_session_napi.cpp b/frameworks/js/camera_napi/src/mode/macro_photo_session_napi.cpp
index 7588f316c..6cb2f0114 100644
--- a/frameworks/js/camera_napi/src/mode/macro_photo_session_napi.cpp
+++ b/frameworks/js/camera_napi/src/mode/macro_photo_session_napi.cpp
@@ -43,7 +43,8 @@ napi_value MacroPhotoSessionNapi::Init(napi_env env, napi_value exports)
     napi_status status;
     napi_value ctorObj;
     std::vector<std::vector<napi_property_descriptor>> descriptors = { camera_process_props, flash_props,
-        auto_exposure_props, focus_props, zoom_props, color_effect_props, features_props, manual_focus_props };
+        auto_exposure_props, focus_props, zoom_props, depth_fusion_props,
+        color_effect_props, features_props, manual_focus_props };
 
     std::vector<napi_property_descriptor> macro_photo_session_props =
         CameraNapiUtils::GetPropertyDescriptor(descriptors);
diff --git a/frameworks/js/camera_napi/src/mode/photo_session_for_sys_napi.cpp b/frameworks/js/camera_napi/src/mode/photo_session_for_sys_napi.cpp
index 144f544d6..7861b1d68 100644
--- a/frameworks/js/camera_napi/src/mode/photo_session_for_sys_napi.cpp
+++ b/frameworks/js/camera_napi/src/mode/photo_session_for_sys_napi.cpp
@@ -46,8 +46,8 @@ napi_value PhotoSessionForSysNapi::Init(napi_env env, napi_value exports)
 
     std::vector<std::vector<napi_property_descriptor>> descriptors = { camera_process_props, flash_props,
         auto_exposure_props, focus_props, zoom_props, filter_props, beauty_props, color_effect_props, macro_props,
-        moon_capture_boost_props, features_props, color_management_props, preconfig_props, effect_suggestion_props,
-        camera_output_capability_props, camera_ability_props };
+        depth_fusion_props, moon_capture_boost_props, features_props, color_management_props, preconfig_props,
+        effect_suggestion_props, camera_output_capability_props, camera_ability_props };
     std::vector<napi_property_descriptor> photo_session_props = CameraNapiUtils::GetPropertyDescriptor(descriptors);
     status = napi_define_class(env, PHOTO_SESSION_FOR_SYS_NAPI_CLASS_NAME, NAPI_AUTO_LENGTH,
                                PhotoSessionForSysNapiConstructor, nullptr,
diff --git a/frameworks/js/camera_napi/src/session/camera_session_napi.cpp b/frameworks/js/camera_napi/src/session/camera_session_napi.cpp
index 344578b96..24253dbe5 100644
--- a/frameworks/js/camera_napi/src/session/camera_session_napi.cpp
+++ b/frameworks/js/camera_napi/src/session/camera_session_napi.cpp
@@ -184,6 +184,13 @@ const std::vector<napi_property_descriptor> CameraSessionNapi::macro_props = {
     DECLARE_NAPI_FUNCTION("enableMacro", CameraSessionNapi::EnableMacro)
 };
 
+const std::vector<napi_property_descriptor> CameraSessionNapi::depth_fusion_props = {
+    DECLARE_NAPI_FUNCTION("isDepthFusionSupported", CameraSessionNapi::IsDepthFusionSupported),
+    DECLARE_NAPI_FUNCTION("getDepthFusionThreshold", CameraSessionNapi::GetDepthFusionThreshold),
+    DECLARE_NAPI_FUNCTION("isDepthFusionEnabled", CameraSessionNapi::IsDepthFusionEnabled),
+    DECLARE_NAPI_FUNCTION("enableDepthFusion", CameraSessionNapi::EnableDepthFusion)
+};
+
 const std::vector<napi_property_descriptor> CameraSessionNapi::moon_capture_boost_props = {
     DECLARE_NAPI_FUNCTION("isMoonCaptureBoostSupported", CameraSessionNapi::IsMoonCaptureBoostSupported),
     DECLARE_NAPI_FUNCTION("enableMoonCaptureBoost", CameraSessionNapi::EnableMoonCaptureBoost)
@@ -818,8 +825,8 @@ napi_value CameraSessionNapi::Init(napi_env env, napi_value exports)
     int32_t refCount = 1;
     std::vector<std::vector<napi_property_descriptor>> descriptors = { camera_process_props, stabilization_props,
         flash_props, auto_exposure_props, focus_props, zoom_props, filter_props, beauty_props, color_effect_props,
-        macro_props, moon_capture_boost_props, features_props, color_management_props, manual_focus_props,
-        preconfig_props, camera_output_capability_props };
+        macro_props, depth_fusion_props, moon_capture_boost_props, features_props, color_management_props,
+        manual_focus_props, preconfig_props, camera_output_capability_props };
     std::vector<napi_property_descriptor> camera_session_props = CameraNapiUtils::GetPropertyDescriptor(descriptors);
     status = napi_define_class(env, CAMERA_SESSION_NAPI_CLASS_NAME, NAPI_AUTO_LENGTH,
                                CameraSessionNapiConstructor, nullptr,
@@ -2879,6 +2886,132 @@ napi_value CameraSessionNapi::EnableMacro(napi_env env, napi_callback_info info)
     return CameraNapiUtils::GetUndefinedValue(env);
 }
 
+napi_value CameraSessionNapi::IsDepthFusionSupported(napi_env env, napi_callback_info info)
+{
+    if (!CameraNapiSecurity::CheckSystemApp(env)) {
+        MEDIA_ERR_LOG("SystemApi GetDepthFusionThreshold is called!");
+        return nullptr;
+    }
+    MEDIA_DEBUG_LOG("CameraSessionNapi::IsDepthFusionSupported is called");
+    CameraSessionNapi* cameraSessionNapi = nullptr;
+    CameraNapiParamParser jsParamParser(env, info, cameraSessionNapi);
+    if (!jsParamParser.AssertStatus(INVALID_ARGUMENT, "parse parameter occur error")) {
+        MEDIA_ERR_LOG("CameraSessionNapi::IsDepthFusionSupported parse parameter occur error");
+        return nullptr;
+    }
+    auto result = CameraNapiUtils::GetUndefinedValue(env);
+    if (cameraSessionNapi->cameraSession_ != nullptr) {
+        bool isSupported = cameraSessionNapi->cameraSession_->IsDepthFusionSupported();
+        napi_get_boolean(env, isSupported, &result);
+        return result;
+    } else {
+        MEDIA_ERR_LOG("CameraSessionNapi::IsDepthFusionSupported call Failed!");
+        CameraNapiUtils::ThrowError(env, INVALID_ARGUMENT, "get native object fail");
+        return nullptr;
+    }
+    return result;
+}
+
+napi_value CameraSessionNapi::GetDepthFusionThreshold(napi_env env, napi_callback_info info)
+{
+    if (!CameraNapiSecurity::CheckSystemApp(env)) {
+        MEDIA_ERR_LOG("SystemApi GetDepthFusionThreshold is called!");
+        return nullptr;
+    }
+    MEDIA_DEBUG_LOG("CameraSessionNapi::GetDepthFusionThreshold is called");
+    CameraSessionNapi* cameraSessionNapi = nullptr;
+    CameraNapiParamParser jsParamParser(env, info, cameraSessionNapi);
+    if (!jsParamParser.AssertStatus(INVALID_ARGUMENT, "parse parameter occur error")) {
+            MEDIA_ERR_LOG("CameraSessionNapi::IsDepthFusionSupported parse parameter occur error");
+            return nullptr;
+    }
+    napi_value result = nullptr;
+    if (cameraSessionNapi->cameraSession_ != nullptr) {
+        std::vector<float> vecDepthFusionThreshold;
+        int32_t retCode = cameraSessionNapi->cameraSession_->GetDepthFusionThreshold(vecDepthFusionThreshold);
+        if (!CameraNapiUtils::CheckError(env, retCode)) {
+            return nullptr;
+        }
+        MEDIA_INFO_LOG("CameraSessionNapi::GetDepthFusionThreshold len = %{public}zu",
+            vecDepthFusionThreshold.size());
+
+        if (!vecDepthFusionThreshold.empty() && napi_create_array(env, &result) == napi_ok) {
+            for (size_t i = 0; i < vecDepthFusionThreshold.size(); i++) {
+                float depthFusion = vecDepthFusionThreshold[i];
+                napi_value value;
+                napi_create_double(env, CameraNapiUtils::FloatToDouble(depthFusion), &value);
+                napi_set_element(env, result, i, value);
+            }
+        } else {
+            MEDIA_ERR_LOG("vecDepthFusionThreshold is empty or failed to create array!");
+        }
+    } else {
+        MEDIA_ERR_LOG("CameraSessionNapi::GetDepthFusionThreshold call Failed!");
+        MEDIA_ERR_LOG("CameraSessionNapi::GetDepthFusionThreshold parse parameter occur error");
+        return nullptr;
+    }
+    return result;
+}
+
+napi_value CameraSessionNapi::IsDepthFusionEnabled(napi_env env, napi_callback_info info)
+{
+    if (!CameraNapiSecurity::CheckSystemApp(env)) {
+        MEDIA_ERR_LOG("SystemApi IsDepthFusionEnabled is called!");
+        return nullptr;
+    }
+    MEDIA_DEBUG_LOG("CameraSessionNapi::IsDepthFusionEnabled is called");
+    CameraSessionNapi* cameraSessionNapi = nullptr;
+    CameraNapiParamParser jsParamParser(env, info, cameraSessionNapi);
+    if (!jsParamParser.AssertStatus(INVALID_ARGUMENT, "parse parameter occur error")) {
+        MEDIA_ERR_LOG("CameraSessionNapi::IsDepthFusionEnabled parse parameter occur error");
+        return nullptr;
+    }
+    auto result = CameraNapiUtils::GetUndefinedValue(env);
+    if (cameraSessionNapi->cameraSession_ != nullptr) {
+        bool isEnabled = cameraSessionNapi->cameraSession_->IsDepthFusionEnabled();
+        napi_get_boolean(env, isEnabled, &result);
+        MEDIA_INFO_LOG("CameraSessionNapi::IsDepthFusionEnabled:%{public}d", isEnabled);
+    } else {
+        MEDIA_ERR_LOG("CameraSessionNapi::IsDepthFusionEnabled get native object fail");
+        CameraNapiUtils::ThrowError(env, INVALID_ARGUMENT, "get native object fail");
+        return nullptr;
+    }
+    return result;
+}
+
+napi_value CameraSessionNapi::EnableDepthFusion(napi_env env, napi_callback_info info)
+{
+    if (!CameraNapiSecurity::CheckSystemApp(env)) {
+        MEDIA_ERR_LOG("SystemApi EnableDepthFusion is called!");
+        return nullptr;
+    }
+    MEDIA_DEBUG_LOG("CameraSessionNapi::EnableDepthFusion is called");
+    bool isEnabledDepthFusion;
+    CameraSessionNapi* cameraSessionNapi = nullptr;
+    CameraNapiParamParser jsParamParser(env, info, cameraSessionNapi, isEnabledDepthFusion);
+    if (!jsParamParser.AssertStatus(INVALID_ARGUMENT, "parse parameter occur error")) {
+        MEDIA_ERR_LOG("CameraSessionNapi::EnabledDepthFusion parse parameter occur error");
+        return nullptr;
+    }
+    
+    if (cameraSessionNapi->cameraSession_ != nullptr) {
+        MEDIA_INFO_LOG("CameraSessionNapi::EnableDepthFusion:%{public}d", isEnabledDepthFusion);
+        cameraSessionNapi->cameraSession_->LockForControl();
+        int32_t retCode = cameraSessionNapi->cameraSession_->EnableDepthFusion(isEnabledDepthFusion);
+        cameraSessionNapi->cameraSession_->UnlockForControl();
+        if (!CameraNapiUtils::CheckError(env, retCode)) {
+            MEDIA_ERR_LOG("CameraSessionNapi::EnableDepthFusion fail %{public}d", retCode);
+            return nullptr;
+        }
+        MEDIA_INFO_LOG("CameraSessionNapi::EnableDepthFusion success");
+    } else {
+        MEDIA_ERR_LOG("CameraSessionNapi::EnableDepthFusion get native object fail");
+        CameraNapiUtils::ThrowError(env, INVALID_ARGUMENT, "get native object fail");
+        return nullptr;
+    }
+    return CameraNapiUtils::GetUndefinedValue(env);
+}
+
 napi_value CameraSessionNapi::IsMoonCaptureBoostSupported(napi_env env, napi_callback_info info)
 {
     if (!CameraNapiSecurity::CheckSystemApp(env)) {
diff --git a/frameworks/native/camera/src/ability/camera_ability.cpp b/frameworks/native/camera/src/ability/camera_ability.cpp
index a4bfe643d..0c46df41f 100644
--- a/frameworks/native/camera/src/ability/camera_ability.cpp
+++ b/frameworks/native/camera/src/ability/camera_ability.cpp
@@ -104,6 +104,16 @@ bool CameraAbility::IsMacroSupported()
     return isMacroSupported_.value_or(false);
 }
 
+bool CameraAbility::IsDepthFusionSupported()
+{
+    return isDepthFusionSupported_.value_or(false);
+}
+
+std::vector<float> CameraAbility::GetDepthFusionThreshold()
+{
+    return getDepthFusionThreshold_.value_or(std::vector<float>{1.0f, 1.0f});
+}
+
 std::vector<PortraitEffect> CameraAbility::GetSupportedPortraitEffects()
 {
     return supportedPortraitEffects_;
@@ -188,6 +198,18 @@ void CameraAbility::DumpCameraAbilityInfo()
     } else {
         MEDIA_DEBUG_LOG("Macro Supported: Not supported");
     }
+
+    if (isDepthFusionSupported_.has_value()) {
+        MEDIA_DEBUG_LOG("Depth Fusion Supported: %{public}d", isDepthFusionSupported_.value());
+    } else {
+        MEDIA_DEBUG_LOG("Depth Fusion Supported: Not supported");
+    }
+
+    if (getDepthFusionThreshold_.has_value()) {
+        logFunc("Depth Fusion Threshold", getDepthFusionThreshold_.value());
+    } else {
+        MEDIA_DEBUG_LOG("Depth Fusion Threshold: Not supported");
+    }
 }
 
 CameraAbilityContainer::~CameraAbilityContainer()
diff --git a/frameworks/native/camera/src/session/capture_session.cpp b/frameworks/native/camera/src/session/capture_session.cpp
index 59a2ca3a3..99f0fd52e 100644
--- a/frameworks/native/camera/src/session/capture_session.cpp
+++ b/frameworks/native/camera/src/session/capture_session.cpp
@@ -3895,6 +3895,105 @@ int32_t CaptureSession::EnableMacro(bool isEnable)
     return CameraErrorCode::SUCCESS;
 }
 
+bool CaptureSession::IsDepthFusionSupported()
+{
+    CAMERA_SYNC_TRACE;
+    MEDIA_DEBUG_LOG("Enter IsDepthFusionSupported");
+    if (!(IsSessionCommited() || IsSessionConfiged())) {
+        MEDIA_ERR_LOG("CaptureSession::IsDepthFusionSupported Session is not Commited");
+        return false;
+    }
+    auto inputDevice = GetInputDevice();
+    if (inputDevice == nullptr) {
+        MEDIA_ERR_LOG("CaptureSession::IsDepthFusionSupported camera device is null");
+        return false;
+        }
+    auto deviceInfo = inputDevice->GetCameraDeviceInfo();
+    if (deviceInfo == nullptr) {
+        MEDIA_ERR_LOG("CaptureSession::IsDepthFusionSupported camera deviceInfo is null");
+        return false;
+    }
+    std::shared_ptr<Camera::CameraMetadata> metadata = deviceInfo->GetMetadata();
+    camera_metadata_item_t item;
+    int ret = Camera::FindCameraMetadataItem(metadata->get(), OHOS_ABILITY_CAPTURE_MACRO_DEPTH_FUSION_SUPPORTED, &item);
+    CHECK_ERROR_RETURN_RET_LOG(ret != CAM_META_SUCCESS || item.count <= 0, false,
+        "CaptureSession::IsDepthFusionSupported Failed with return code %{public}d", ret);
+    auto supportResult = static_cast<bool>(item.data.u8[0]);
+    return supportResult;
+}
+
+std::vector<float> CaptureSession::GetDepthFusionThreshold()
+{
+    std::vector<float> depthFusionThreshold;
+    GetDepthFusionThreshold(depthFusionThreshold);
+    return depthFusionThreshold;
+}
+
+int32_t CaptureSession::GetDepthFusionThreshold(std::vector<float>& depthFusionThreshold)
+{
+    MEDIA_DEBUG_LOG("Enter GetDepthFusionThreshold");
+    depthFusionThreshold.clear();
+    if (!IsSessionCommited()) {
+        MEDIA_ERR_LOG("CaptureSession::GetDepthFusionThreshold Session is not Commited");
+        return CameraErrorCode::SESSION_NOT_CONFIG;
+    }
+    auto inputDevice = GetInputDevice();
+    if (!inputDevice || !inputDevice->GetCameraDeviceInfo()) {
+        MEDIA_ERR_LOG("CaptureSession::GetDepthFusionThreshold camera device is null");
+        return CameraErrorCode::SUCCESS;
+    }
+
+    std::shared_ptr<Camera::CameraMetadata> metadata = GetMetadata();
+    camera_metadata_item_t item;
+    int ret = Camera::FindCameraMetadataItem(metadata->get(),
+        OHOS_ABILITY_CAPTURE_MACRO_DEPTH_FUSION_ZOOM_RANGE, &item);
+    CHECK_ERROR_RETURN_RET_LOG(ret != CAM_META_SUCCESS || item.count == 0, 0,
+        "CaptureSession::GetDepthFusionThreshold Failed with return code %{public}d, item.count = %{public}d",
+        ret, item.count);
+    float minDepthFusionZoom = 0.0;
+    float maxDepthFusionZoom = 0.0;
+    MEDIA_INFO_LOG("Capture marco depth fusion zoom range, min: %{public}f, max: %{public}f",
+        item.data.f[0], item.data.f[1]);
+    minDepthFusionZoom = item.data.f[0];
+    maxDepthFusionZoom = item.data.f[1];
+    depthFusionThreshold = {minDepthFusionZoom, maxDepthFusionZoom};
+    return CameraErrorCode::SUCCESS;
+}
+
+int32_t CaptureSession::EnableDepthFusion(bool isEnable)
+{
+    CAMERA_SYNC_TRACE;
+    MEDIA_DEBUG_LOG("Enter EnableDepthFusion, isEnable:%{public}d", isEnable);
+    if (!IsDepthFusionSupported()) {
+        MEDIA_ERR_LOG("EnableDepthFusion IsDepthFusionSupported is false");
+        return CameraErrorCode::OPERATION_NOT_ALLOWED;
+    }
+    CHECK_ERROR_RETURN_RET_LOG(!IsSessionCommited(), CameraErrorCode::SESSION_NOT_CONFIG,
+        "CaptureSession Failed EnableDepthFusion!, session not commited");
+    CHECK_ERROR_RETURN_RET_LOG(changedMetadata_ == nullptr, CameraErrorCode::SUCCESS,
+        "CaptureSession::EnableDepthFusion Need to call LockForControl() before setting camera properties");
+    bool status = false;
+    int32_t ret;
+    camera_metadata_item_t item;
+    ret = Camera::FindCameraMetadataItem(changedMetadata_->get(), OHOS_CONTROL_CAPTURE_MACRO_DEPTH_FUSION, &item);
+    uint8_t enableValue = static_cast<uint8_t>(isEnable ? 1 : 0);
+    if (ret == CAM_META_ITEM_NOT_FOUND) {
+        status = changedMetadata_->addEntry(OHOS_CONTROL_CAPTURE_MACRO_DEPTH_FUSION, &enableValue, 1);
+    } else if (ret == CAM_META_SUCCESS) {
+        status = changedMetadata_->updateEntry(OHOS_CONTROL_CAPTURE_MACRO_DEPTH_FUSION, &enableValue, 1);
+    }
+    if (!status) {
+        MEDIA_ERR_LOG("CaptureSession::EnableDepthFusion Failed to enable depth fusion");
+    }
+    isDepthFusionEnable_ = isEnable;
+    return CameraErrorCode::SUCCESS;
+}
+
+bool CaptureSession::IsDepthFusionEnabled()
+{
+    return isDepthFusionEnable_;
+}
+
 std::shared_ptr<MoonCaptureBoostFeature> CaptureSession::GetMoonCaptureBoostFeature()
 {
     auto inputDevice = GetInputDevice();
diff --git a/interfaces/inner_api/native/camera/include/ability/camera_ability.h b/interfaces/inner_api/native/camera/include/ability/camera_ability.h
index bfe9165d1..c2e1d7880 100644
--- a/interfaces/inner_api/native/camera/include/ability/camera_ability.h
+++ b/interfaces/inner_api/native/camera/include/ability/camera_ability.h
@@ -46,6 +46,8 @@ public:
     std::vector<ColorEffect> GetSupportedColorEffects();
     std::vector<ColorSpace> GetSupportedColorSpaces();
     bool IsMacroSupported();
+    bool IsDepthFusionSupported();
+    std::vector<float> GetDepthFusionThreshold();
     std::vector<PortraitEffect> GetSupportedPortraitEffects();
     std::vector<float> GetSupportedVirtualApertures();
     std::vector<std::vector<float>> GetSupportedPhysicalApertures();
@@ -73,6 +75,8 @@ public:
 
     std::optional<std::vector<float>> zoomRatioRange_;
     std::optional<bool> isMacroSupported_;
+    std::optional<bool> isDepthFusionSupported_;
+    std::optional<std::vector<float>> getDepthFusionThreshold_;
 };
 
 class CaptureSession;
diff --git a/interfaces/inner_api/native/camera/include/session/capture_session.h b/interfaces/inner_api/native/camera/include/session/capture_session.h
index 7fdd79ac4..8b5be0531 100644
--- a/interfaces/inner_api/native/camera/include/session/capture_session.h
+++ b/interfaces/inner_api/native/camera/include/session/capture_session.h
@@ -1079,6 +1079,36 @@ public:
      */
     int32_t EnableMacro(bool isEnable);
 
+    /**
+     * @brief Check current status is support depth fusion or not.
+     */
+    bool IsDepthFusionSupported();
+
+    /**
+     * @brief Get the depth fusion supported Zoom Ratio range,
+     *
+     * @return Returns vector<float> of depth fusion supported Zoom ratio range.
+     */
+    std::vector<float> GetDepthFusionThreshold();
+
+    /**
+     * @brief Get the depth fusion supported Zoom ratio range.
+     *
+     * @param vector<float> of depth fusion supported Zoom ratio range.
+     * @return Returns errCode.
+     */
+    int32_t GetDepthFusionThreshold(std::vector<float>& depthFusionThreshold);
+
+    /**
+    * @brief Check curernt status is enabled depth fusion.
+    */
+    bool IsDepthFusionEnabled();
+
+    /**
+     * @brief Enable depth fusion.
+     */
+    int32_t EnableDepthFusion(bool isEnable);
+
     /**
     * @brief Check current status is support motion photo.
     */
@@ -1738,6 +1768,7 @@ private:
     std::mutex inputDeviceMutex_;
     sptr<CaptureInput> innerInputDevice_ = nullptr;
     volatile bool isSetMacroEnable_ = false;
+    volatile bool isDepthFusionEnable_ = false;
     volatile bool isSetMoonCaptureBoostEnable_ = false;
     volatile bool isSetTripodDetectionEnable_ = false;
     volatile bool isSetSecureOutput_ = false;
diff --git a/interfaces/kits/js/camera_napi/include/ability/camera_ability_napi.h b/interfaces/kits/js/camera_napi/include/ability/camera_ability_napi.h
index 9e7c6cf2b..6193d935a 100644
--- a/interfaces/kits/js/camera_napi/include/ability/camera_ability_napi.h
+++ b/interfaces/kits/js/camera_napi/include/ability/camera_ability_napi.h
@@ -72,6 +72,9 @@ public:
     static napi_value GetSupportedColorSpaces(napi_env env, napi_callback_info info);
     // MacroQuery
     static napi_value IsMacroSupported(napi_env env, napi_callback_info info);
+    // DepthFusionQuery
+    static napi_value IsDepthFusionSupported(napi_env env, napi_callback_info info);
+    static napi_value GetDepthFusionThreshold(napi_env env, napi_callback_info info);
     // PortraitQuery
     static napi_value GetSupportedPortraitEffects(napi_env env, napi_callback_info info);
     // ApertureQuery
@@ -110,6 +113,7 @@ public:
     static const std::vector<napi_property_descriptor> color_effect_query_props;
     static const std::vector<napi_property_descriptor> color_management_query_props;
     static const std::vector<napi_property_descriptor> macro_query_props;
+    static const std::vector<napi_property_descriptor> depth_fusion_query_props;
     static const std::vector<napi_property_descriptor> portrait_query_props;
     static const std::vector<napi_property_descriptor> aperture_query_props;
     static const std::vector<napi_property_descriptor> stabilization_query_props;
diff --git a/interfaces/kits/js/camera_napi/include/session/camera_session_napi.h b/interfaces/kits/js/camera_napi/include/session/camera_session_napi.h
index 2a58848d4..1b5b8f6ae 100644
--- a/interfaces/kits/js/camera_napi/include/session/camera_session_napi.h
+++ b/interfaces/kits/js/camera_napi/include/session/camera_session_napi.h
@@ -285,6 +285,10 @@ public:
     static napi_value SetFocusDistance(napi_env env, napi_callback_info info);
     static napi_value IsMacroSupported(napi_env env, napi_callback_info info);
     static napi_value EnableMacro(napi_env env, napi_callback_info info);
+    static napi_value IsDepthFusionSupported(napi_env env, napi_callback_info info);
+    static napi_value GetDepthFusionThreshold(napi_env env, napi_callback_info info);
+    static napi_value IsDepthFusionEnabled(napi_env env, napi_callback_info info);
+    static napi_value EnableDepthFusion(napi_env env, napi_callback_info info);
     static napi_value CanPreconfig(napi_env env, napi_callback_info info);
     static napi_value Preconfig(napi_env env, napi_callback_info info);
     static napi_value IsEffectSuggestionSupported(napi_env env, napi_callback_info info);
@@ -382,6 +386,7 @@ public:
     static const std::vector<napi_property_descriptor> beauty_props;
     static const std::vector<napi_property_descriptor> color_effect_props;
     static const std::vector<napi_property_descriptor> macro_props;
+    static const std::vector<napi_property_descriptor> depth_fusion_props;
     static const std::vector<napi_property_descriptor> moon_capture_boost_props;
     static const std::vector<napi_property_descriptor> features_props;
     static const std::vector<napi_property_descriptor> color_management_props;
diff --git a/services/camera_service/src/hcamera_device.cpp b/services/camera_service/src/hcamera_device.cpp
index a23c5cbff..e0a46decd 100644
--- a/services/camera_service/src/hcamera_device.cpp
+++ b/services/camera_service/src/hcamera_device.cpp
@@ -403,10 +403,10 @@ void HCameraDevice::HandlePrivacyAfterCloseDevice()
     MEDIA_DEBUG_LOG("enter handlePrivacyAfterCloseDevice");
     auto cameraPrivacy = GetCameraPrivacy();
     if (cameraPrivacy != nullptr) {
-	if (HCameraDeviceManager::GetInstance()->IsMultiCameraActive(cameraPid_) == false) {
+        if (HCameraDeviceManager::GetInstance()->IsMultiCameraActive(cameraPid_) == false) {
             MEDIA_INFO_LOG("do StopUsingPermissionCallback");
-	    cameraPrivacy->StopUsingPermissionCallback();
-	}
+            cameraPrivacy->StopUsingPermissionCallback();
+        }
         cameraPrivacy->UnregisterPermissionCallback();
     }
 }
-- 
2.45.2.huawei.5

