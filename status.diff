From a8c79423705f6160d03c6355b1d461f71f9996ab Mon Sep 17 00:00:00 2001
From: s00888898 <s00888898@notesmail.huawei.com/>
Date: Wed, 14 May 2025 22:04:02 +0800
Subject: [PATCH] =?UTF-8?q?TicketNo:=20DTS2025040906212=20Description:=20?=
 =?UTF-8?q?=E5=BB=B6=E8=BF=9F=E5=9B=9E=E8=B0=83=20Team:EMUI=20Feature=20or?=
 =?UTF-8?q?=20Bugfix:Bugfix=20Binary=20Source:=20sync=20from=20gitee=20Pri?=
 =?UTF-8?q?vateCode(Yes/No):No?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Change-Id: Icbc69796da4c7b545fb87e19b0cca32f740d5edf
---
 .../src/hcamera_service_unittest.cpp          | 76 +++++++++++++++++++
 .../camera_service/include/hcamera_service.h  |  3 +-
 .../camera_service/src/hcamera_service.cpp    | 27 +++++--
 3 files changed, 99 insertions(+), 7 deletions(-)

diff --git a/frameworks/native/camera/test/unittest/camera_service/hdi_camera_test/src/hcamera_service_unittest.cpp b/frameworks/native/camera/test/unittest/camera_service/hdi_camera_test/src/hcamera_service_unittest.cpp
index b6bbcf8ec..e07623437 100644
--- a/frameworks/native/camera/test/unittest/camera_service/hdi_camera_test/src/hcamera_service_unittest.cpp
+++ b/frameworks/native/camera/test/unittest/camera_service/hdi_camera_test/src/hcamera_service_unittest.cpp
@@ -2038,5 +2038,81 @@ HWTEST_F(HCameraServiceUnit, HCamera_service_unittest_056, TestSize.Level0)
     device->Release();
     device->Close();
 }
+
+/*
+ * Feature: CameraService
+ * Function: Test OnCameraStatus in class HCameraService
+ * SubFunction: NA
+ * FunctionPoints: NA
+ * EnvConditions: NA
+ * CaseDescription: Test OnCameraStatus with different cameraServiceCallbacks_
+ */
+HWTEST_F(HCameraServiceUnit, HCamera_service_unittest_057, TestSize.Level0)
+{
+    std::vector<string> cameraIds;
+    cameraService_->GetCameraIds(cameraIds);
+    ASSERT_NE(cameraIds.size(), 0);
+    cameraService_->SetServiceStatus(CameraServiceStatus::SERVICE_READY);
+    sptr<ICameraDeviceService> device = nullptr;
+    cameraService_->CreateCameraDevice(cameraIds[0], device);
+    ASSERT_NE(device, nullptr);
+    device->Open();
+
+    cameraService_->cameraServiceCallbacks_ = {};
+    cameraService_->cameraStatusCallbacks_ = {};
+    cameraService_->freezedPidList_.insert(IPCSkeleton::GetCallingPid());
+    cameraService_->OnCameraStatus(cameraIds[0], CameraStatus::CAMERA_STATUS_APPEAR, CallbackInvoker::APPLICATION);
+    EXPECT_TRUE(cameraService_->cameraStatusCallbacks_.empty());
+    EXPECT_EQ(cameraService_->UnSetCameraCallback(IPCSkeleton::GetCallingPid()), CAMERA_OK);
+
+    sptr<ICameraServiceCallbackTest> callback = new ICameraServiceCallbackTest();
+    cameraService_->cameraServiceCallbacks_ = {{1, callback}, {2, nullptr}};
+    cameraService_->OnCameraStatus(cameraIds[0], CameraStatus::CAMERA_STATUS_APPEAR, CallbackInvoker::APPLICATION);
+    EXPECT_EQ(cameraService_->cameraStatusCallbacks_.size(), 1);
+
+    if (callback) {
+        callback = nullptr;
+    }
+    device->Release();
+    device->Close();
+}
+
+/*
+ * Feature: CameraService
+ * Function: Test OnCameraStatus in class HCameraService
+ * SubFunction: NA
+ * FunctionPoints: NA
+ * EnvConditions: NA
+ * CaseDescription: Test OnCameraStatus with different cameraServiceCallbacks_
+ */
+HWTEST_F(HCameraServiceUnit, HCamera_service_unittest_058, TestSize.Level0)
+{
+    std::vector<string> cameraIds;
+    cameraService_->GetCameraIds(cameraIds);
+    ASSERT_NE(cameraIds.size(), 0);
+    cameraService_->SetServiceStatus(CameraServiceStatus::SERVICE_READY);
+    sptr<ICameraDeviceService> device = nullptr;
+    cameraService_->CreateCameraDevice(cameraIds[0], device);
+    ASSERT_NE(device, nullptr);
+    device->Open();
+
+    cameraService_->cameraServiceCallbacks_ = {};
+    cameraService_->cameraStatusCallbacks_ = {};
+    cameraService_->freezedPidList_.insert(IPCSkeleton::GetCallingPid());
+    cameraService_->OnCameraStatus(cameraIds[0], CameraStatus::CAMERA_STATUS_DISAPPEAR, CallbackInvoker::APPLICATION);
+    EXPECT_TRUE(cameraService_->cameraStatusCallbacks_.empty());
+    EXPECT_EQ(cameraService_->UnSetCameraCallback(IPCSkeleton::GetCallingPid()), CAMERA_OK);
+
+    sptr<ICameraServiceCallbackTest> callback = new ICameraServiceCallbackTest();
+    cameraService_->cameraServiceCallbacks_ = {{1, callback}, {2, nullptr}};
+    cameraService_->OnCameraStatus(cameraIds[0], CameraStatus::CAMERA_STATUS_DISAPPEAR, CallbackInvoker::APPLICATION);
+    EXPECT_EQ(cameraService_->cameraStatusCallbacks_.size(), 1);
+
+    if (callback) {
+        callback = nullptr;
+    }
+    device->Release();
+    device->Close();
+}
 }
 }
\ No newline at end of file
diff --git a/services/camera_service/include/hcamera_service.h b/services/camera_service/include/hcamera_service.h
index 079d5586a..83cab3945 100644
--- a/services/camera_service/include/hcamera_service.h
+++ b/services/camera_service/include/hcamera_service.h
@@ -91,6 +91,7 @@ public:
 
     explicit HCameraService(int32_t systemAbilityId, bool runOnCreate = true);
     ~HCameraService() override;
+    void CreateAndSaveTask(const string& cameraId, CameraStatus status, uint32_t pid);
     int32_t GetCameras(vector<string>& cameraIds,
         vector<shared_ptr<OHOS::Camera::CameraMetadata>>& cameraAbilityList) override;
     int32_t GetCameraIds(std::vector<string>& cameraIds) override;
@@ -307,7 +308,7 @@ private:
     std::vector<CameraRotateStrategyInfo> cameraRotateStrategyInfos_;
     std::mutex freezedPidListMutex_;
     std::set<int32_t> freezedPidList_;
-    std::map<uint32_t, std::function<void()>> delayCbtaskMap;
+    std::map<uint32_t, std::map<string, std::function<void()>>> delayCbtaskMap_;
     std::map<uint32_t, std::function<void()>> delayFoldStatusCbTaskMap;
 };
 } // namespace CameraStandard
diff --git a/services/camera_service/src/hcamera_service.cpp b/services/camera_service/src/hcamera_service.cpp
index e6471241a..463821512 100644
--- a/services/camera_service/src/hcamera_service.cpp
+++ b/services/camera_service/src/hcamera_service.cpp
@@ -751,6 +751,19 @@ bool HCameraService::ShouldSkipStatusUpdates(pid_t pid)
     return true;
 }
 
+void HCameraService::CreateAndSaveTask(const string& cameraId, CameraStatus status, uint32_t pid)
+{
+    auto thisPtr = sptr<HCameraService>(this);
+    CHECK_ERROR_RETURN(!(status == CAMERA_STATUS_APPEAR || status == CAMERA_STATUS_DISAPPEAR));
+    auto task = [cameraId, status, pid, thisPtr]() {
+        auto itr = thisPtr->cameraServiceCallbacks_.find(pid);
+        CHECK_ERROR_RETURN(itr == thisPtr->cameraServiceCallbacks_.end() || !itr->second);
+        MEDIA_INFO_LOG("trigger callback due to unfreeze pid: %{public}d", pid);
+        itr->second->OnCameraStatusChanged(cameraId, status);
+    };
+    delayCbtaskMap_[pid][cameraId] = task;
+}
+
 void HCameraService::OnCameraStatus(const string& cameraId, CameraStatus status, CallbackInvoker invoker)
 {
     lock_guard<mutex> lock(cameraCbMutex_);
@@ -768,6 +781,7 @@ void HCameraService::OnCameraStatus(const string& cameraId, CameraStatus status,
         }
         uint32_t pid = it.first;
         if (ShouldSkipStatusUpdates(pid)) {
+            CreateAndSaveTask(cameraId, status, pid);
             continue;
         }
         it.second->OnCameraStatusChanged(cameraId, status, bundleName);
@@ -2141,13 +2155,14 @@ int32_t HCameraService::ProxyForFreeze(const std::set<int32_t>& pidList, bool is
 
     {
         std::lock_guard<std::mutex> lock(cameraCbMutex_);
-        for (auto pid : pidList) {
-            auto it = delayCbtaskMap.find(pid);
-            if (it != delayCbtaskMap.end()) {
-                it->second();
-                delayCbtaskMap.erase(it);
+        std::for_each(pidList.begin(), pidList.end(), [this](auto pid) {
+            auto pidIt = delayCbtaskMap_.find(pid);
+            CHECK_ERROR_RETURN(pidIt == delayCbtaskMap_.end());
+            for (const auto &[cameraId, taskCallback] : pidIt->second) {
+                CHECK_EXECUTE(taskCallback, taskCallback());
             }
-        }
+            delayCbtaskMap_.erase(pidIt);
+        });
     }
     return CAMERA_OK;
 }
-- 
2.45.2.huawei.8

