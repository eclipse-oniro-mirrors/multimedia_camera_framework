diff --git a/services/camera_service/include/hstream_capture.h b/services/camera_service/include/hstream_capture.h
index bcbbdf571..c5ed12813 100644
--- a/services/camera_service/include/hstream_capture.h
+++ b/services/camera_service/include/hstream_capture.h
@@ -64,7 +64,7 @@ public:
     HStreamCapture(sptr<OHOS::IBufferProducer> producer, int32_t format, int32_t width, int32_t height);
     ~HStreamCapture();
 
-    int32_t LinkInput(sptr<OHOS::HDI::Camera::V1_0::IStreamOperator> streamOperator,
+    int32_t LinkInput(wptr<OHOS::HDI::Camera::V1_0::IStreamOperator> streamOperator,
         std::shared_ptr<OHOS::Camera::CameraMetadata> cameraAbility) override;
     void SetStreamInfo(StreamInfo_V1_1 &streamInfo) override;
     int32_t SetThumbnail(bool isEnabled, const sptr<OHOS::IBufferProducer> &producer) override;
@@ -164,6 +164,7 @@ private:
     bool mSwitchToOfflinePhoto_ = false;
     int32_t mlastCaptureId = 0;
     wptr<HStreamOperator> hStreamOperator_;
+    sptr<OHOS::HDI::Camera::V1_0::IStreamOperator> streamOperatorOffline_ = nullptr;
 };
 } // namespace CameraStandard
 } // namespace OHOS
diff --git a/services/camera_service/include/hstream_common.h b/services/camera_service/include/hstream_common.h
index d13676eb1..adaf10da4 100644
--- a/services/camera_service/include/hstream_common.h
+++ b/services/camera_service/include/hstream_common.h
@@ -45,7 +45,7 @@ public:
     explicit HStreamCommon(
         StreamType streamType, sptr<OHOS::IBufferProducer> producer, int32_t format, int32_t width, int32_t height);
     virtual ~HStreamCommon();
-    virtual int32_t LinkInput(sptr<OHOS::HDI::Camera::V1_0::IStreamOperator> streamOperator,
+    virtual int32_t LinkInput(wptr<OHOS::HDI::Camera::V1_0::IStreamOperator> streamOperator,
         std::shared_ptr<OHOS::Camera::CameraMetadata> cameraAbility);
     virtual int32_t UnlinkInput();
     virtual void SetStreamInfo(StreamInfo_V1_1& streamInfo) = 0;
@@ -97,10 +97,10 @@ protected:
     inline sptr<OHOS::HDI::Camera::V1_0::IStreamOperator> GetStreamOperator()
     {
         std::lock_guard<std::mutex> lock(streamOperatorLock_);
-        return streamOperator_;
+        return streamOperator_.promote();
     }
 
-    inline void SetStreamOperator(sptr<OHOS::HDI::Camera::V1_0::IStreamOperator> streamOperator)
+    inline void SetStreamOperator(wptr<OHOS::HDI::Camera::V1_0::IStreamOperator> streamOperator)
     {
         std::lock_guard<std::mutex> lock(streamOperatorLock_);
         streamOperator_ = streamOperator;
@@ -111,7 +111,7 @@ protected:
     uint32_t callerToken_;
 
     std::mutex streamOperatorLock_;
-    sptr<OHOS::HDI::Camera::V1_0::IStreamOperator> streamOperator_ = nullptr;
+    wptr<OHOS::HDI::Camera::V1_0::IStreamOperator> streamOperator_ = nullptr;
 
     int32_t captureIdForConfirmCapture_ = CAPTURE_ID_UNSET;
 
diff --git a/services/camera_service/include/hstream_depth_data.h b/services/camera_service/include/hstream_depth_data.h
index ee810ad39..5595e285e 100644
--- a/services/camera_service/include/hstream_depth_data.h
+++ b/services/camera_service/include/hstream_depth_data.h
@@ -41,7 +41,7 @@ public:
         sptr<OHOS::IBufferProducer> producer, int32_t format, int32_t width, int32_t height);
     ~HStreamDepthData();
 
-    int32_t LinkInput(sptr<OHOS::HDI::Camera::V1_0::IStreamOperator> streamOperator,
+    int32_t LinkInput(wptr<OHOS::HDI::Camera::V1_0::IStreamOperator> streamOperator,
         std::shared_ptr<OHOS::Camera::CameraMetadata> cameraAbility) override;
     void SetStreamInfo(StreamInfo_V1_1& streamInfo) override;
     int32_t ReleaseStream(bool isDelay) override;
diff --git a/services/camera_service/include/hstream_metadata.h b/services/camera_service/include/hstream_metadata.h
index 478fe7932..c3f34231b 100644
--- a/services/camera_service/include/hstream_metadata.h
+++ b/services/camera_service/include/hstream_metadata.h
@@ -32,7 +32,7 @@ public:
     HStreamMetadata(sptr<OHOS::IBufferProducer> producer, int32_t format, std::vector<int32_t> metadataTypes);
     ~HStreamMetadata();
 
-    int32_t LinkInput(sptr<OHOS::HDI::Camera::V1_0::IStreamOperator> streamOperator,
+    int32_t LinkInput(wptr<OHOS::HDI::Camera::V1_0::IStreamOperator> streamOperator,
         std::shared_ptr<OHOS::Camera::CameraMetadata> cameraAbility) override;
     void SetStreamInfo(StreamInfo_V1_1& streamInfo) override;
     int32_t ReleaseStream(bool isDelay) override;
diff --git a/services/camera_service/include/hstream_repeat.h b/services/camera_service/include/hstream_repeat.h
index 63b3c13ee..571025e7a 100644
--- a/services/camera_service/include/hstream_repeat.h
+++ b/services/camera_service/include/hstream_repeat.h
@@ -50,7 +50,7 @@ public:
         sptr<OHOS::IBufferProducer> producer, int32_t format, int32_t width, int32_t height, RepeatStreamType type);
     ~HStreamRepeat();
 
-    int32_t LinkInput(sptr<OHOS::HDI::Camera::V1_0::IStreamOperator> streamOperator,
+    int32_t LinkInput(wptr<OHOS::HDI::Camera::V1_0::IStreamOperator> streamOperator,
         std::shared_ptr<OHOS::Camera::CameraMetadata> cameraAbility) override;
     void SetStreamInfo(StreamInfo_V1_1& streamInfo) override;
     int32_t ReleaseStream(bool isDelay) override;
diff --git a/services/camera_service/src/hcamera_device.cpp b/services/camera_service/src/hcamera_device.cpp
index df98285c8..1ebb8a3c3 100644
--- a/services/camera_service/src/hcamera_device.cpp
+++ b/services/camera_service/src/hcamera_device.cpp
@@ -93,6 +93,7 @@ const std::vector<std::tuple<uint32_t, std::string, std::string>> HCameraDevice:
     {OHOS_CONTROL_MANUAL_EXPOSURE_TIME, "OHOS_CONTROL_MANUAL_EXPOSURE_TIME", DFX_UB_NOT_REPORT},
     {OHOS_CONTROL_CAMERA_USED_AS_POSITION, "OHOS_CONTROL_CAMERA_USED_AS_POSITION", DFX_UB_NOT_REPORT},
     {OHOS_CONTROL_CHANGETO_OFFLINE_STREAM_OPEATOR, "OHOS_CONTROL_CHANGETO_OFFLINE_STREAM_OPEATOR", DFX_UB_NOT_REPORT},
+    {OHOS_CONTROL_ROTATE_ANGLE, "OHOS_CONTROL_ROTATE_ANGLE", DFX_UB_NOT_REPORT},
 };
 
 const std::unordered_map<DeviceProtectionStatus, CamServiceError> g_deviceProtectionToServiceError_ = {
diff --git a/services/camera_service/src/hstream_capture.cpp b/services/camera_service/src/hstream_capture.cpp
index dd334d898..53c69ec8d 100644
--- a/services/camera_service/src/hstream_capture.cpp
+++ b/services/camera_service/src/hstream_capture.cpp
@@ -80,7 +80,7 @@ HStreamCapture::~HStreamCapture()
         format_, width_, height_, GetFwkStreamId());
 }
 
-int32_t HStreamCapture::LinkInput(sptr<HDI::Camera::V1_0::IStreamOperator> streamOperator,
+int32_t HStreamCapture::LinkInput(wptr<HDI::Camera::V1_0::IStreamOperator> streamOperator,
     std::shared_ptr<OHOS::Camera::CameraMetadata> cameraAbility)
 {
     MEDIA_INFO_LOG("HStreamCapture::LinkInput streamId:%{public}d", GetFwkStreamId());
@@ -854,6 +854,7 @@ int32_t HStreamCapture::ReleaseStream(bool isDelay)
     auto hStreamOperatorSptr_ = hStreamOperator_.promote();
     if (hStreamOperatorSptr_ && mSwitchToOfflinePhoto_) {
         hStreamOperatorSptr_->Release();
+        streamOperatorOffline_ = nullptr;
     }
     mSwitchToOfflinePhoto_ = false;
     return errorCode;
@@ -1001,6 +1002,7 @@ bool HStreamCapture::IsHasEnableOfflinePhoto()
 void HStreamCapture::SwitchToOffline()
 {
     mSwitchToOfflinePhoto_ = true;
+    streamOperatorOffline_ = GetStreamOperator();
 }
 
 bool HStreamCapture::IsHasSwitchToOffline()
diff --git a/services/camera_service/src/hstream_common.cpp b/services/camera_service/src/hstream_common.cpp
index 01b9c6825..b6ecfa8e1 100644
--- a/services/camera_service/src/hstream_common.cpp
+++ b/services/camera_service/src/hstream_common.cpp
@@ -93,6 +93,7 @@ HStreamCommon::~HStreamCommon()
 {
     MEDIA_DEBUG_LOG("Enter Into HStreamCommon::~HStreamCommon streamId is:%{public}d, streamType is:%{public}d",
         fwkStreamId_, streamType_);
+    streamOperator_ = nullptr;
 }
 
 void HStreamCommon::SetColorSpace(ColorSpace colorSpace)
@@ -105,7 +106,7 @@ void HStreamCommon::SetColorSpace(ColorSpace colorSpace)
     }
 }
 
-int32_t HStreamCommon::LinkInput(sptr<OHOS::HDI::Camera::V1_0::IStreamOperator> streamOperator,
+int32_t HStreamCommon::LinkInput(wptr<OHOS::HDI::Camera::V1_0::IStreamOperator> streamOperator,
     std::shared_ptr<OHOS::Camera::CameraMetadata> cameraAbility)
 {
     if (streamOperator == nullptr || cameraAbility == nullptr) {
diff --git a/services/camera_service/src/hstream_depth_data.cpp b/services/camera_service/src/hstream_depth_data.cpp
index 7de6449f8..c1e7517d8 100644
--- a/services/camera_service/src/hstream_depth_data.cpp
+++ b/services/camera_service/src/hstream_depth_data.cpp
@@ -48,7 +48,7 @@ HStreamDepthData::~HStreamDepthData()
         format_, width_, height_, GetFwkStreamId(), GetHdiStreamId());
 }
 
-int32_t HStreamDepthData::LinkInput(sptr<OHOS::HDI::Camera::V1_0::IStreamOperator> streamOperator,
+int32_t HStreamDepthData::LinkInput(wptr<OHOS::HDI::Camera::V1_0::IStreamOperator> streamOperator,
     std::shared_ptr<OHOS::Camera::CameraMetadata> cameraAbility)
 {
     MEDIA_INFO_LOG("HStreamDepthData::LinkInput streamId:%{public}d", GetFwkStreamId());
diff --git a/services/camera_service/src/hstream_metadata.cpp b/services/camera_service/src/hstream_metadata.cpp
index feb8de9eb..1aa617b59 100644
--- a/services/camera_service/src/hstream_metadata.cpp
+++ b/services/camera_service/src/hstream_metadata.cpp
@@ -52,7 +52,7 @@ HStreamMetadata::HStreamMetadata(sptr<OHOS::IBufferProducer> producer,
 HStreamMetadata::~HStreamMetadata()
 {}
 
-int32_t HStreamMetadata::LinkInput(sptr<OHOS::HDI::Camera::V1_0::IStreamOperator> streamOperator,
+int32_t HStreamMetadata::LinkInput(wptr<OHOS::HDI::Camera::V1_0::IStreamOperator> streamOperator,
     std::shared_ptr<OHOS::Camera::CameraMetadata> cameraAbility)
 {
     if (streamOperator == nullptr || cameraAbility == nullptr) {
diff --git a/services/camera_service/src/hstream_repeat.cpp b/services/camera_service/src/hstream_repeat.cpp
index 5c364884f..0c0cfcbed 100644
--- a/services/camera_service/src/hstream_repeat.cpp
+++ b/services/camera_service/src/hstream_repeat.cpp
@@ -56,7 +56,7 @@ HStreamRepeat::~HStreamRepeat()
 #endif
 }
 
-int32_t HStreamRepeat::LinkInput(sptr<OHOS::HDI::Camera::V1_0::IStreamOperator> streamOperator,
+int32_t HStreamRepeat::LinkInput(wptr<OHOS::HDI::Camera::V1_0::IStreamOperator> streamOperator,
     std::shared_ptr<OHOS::Camera::CameraMetadata> cameraAbility)
 {
     MEDIA_INFO_LOG(
@@ -502,7 +502,6 @@ int32_t HStreamRepeat::AddDeferredSurface(const sptr<OHOS::IBufferProducer>& pro
     } else {
         SetStreamTransform();
     }
-
     auto streamOperator = GetStreamOperator();
     CHECK_ERROR_RETURN_RET_LOG(streamOperator == nullptr, CAMERA_INVALID_STATE,
         "HStreamRepeat::CreateAndHandleDeferredStreams(), streamOperator_ == null");
@@ -596,7 +595,6 @@ int32_t HStreamRepeat::SetFrameRate(int32_t minFrameRate, int32_t maxFrameRate)
         CHECK_ERROR_PRINT_LOG(!status, "HStreamRepeat::SetFrameRate Failed to set frame range");
         OHOS::Camera::MetadataUtils::ConvertMetadataToVec(dynamicSetting, repeatSettings);
     }
-
     auto streamOperator = GetStreamOperator();
 
     CamRetCode rc = HDI::Camera::V1_0::NO_ERROR;
