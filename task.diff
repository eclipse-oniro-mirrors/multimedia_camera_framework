From c419a0fee1109e96aa9c54225e0d87b664dc227a Mon Sep 17 00:00:00 2001
From: s00888898 <s00888898@notesmail.huawei.com/>
Date: Fri, 27 Jun 2025 16:12:41 +0800
Subject: [PATCH] TicketNo:na Description:na Team: Feature or Bugfix: Binary
 Source: PrivateCode(Yes/No):

Change-Id: I0291d2c91d0f173843450e6f09448450456751bd
---
 .../native/camera/src/ability/camera_ability_builder.cpp | 4 +++-
 frameworks/native/camera/src/session/capture_session.cpp | 9 +++++----
 .../camera/include/ability/camera_ability_builder.h      | 2 ++
 3 files changed, 10 insertions(+), 5 deletions(-)

diff --git a/frameworks/native/camera/src/ability/camera_ability_builder.cpp b/frameworks/native/camera/src/ability/camera_ability_builder.cpp
index f3c2e58e1c..59968c5c82 100644
--- a/frameworks/native/camera/src/ability/camera_ability_builder.cpp
+++ b/frameworks/native/camera/src/ability/camera_ability_builder.cpp
@@ -26,6 +26,7 @@ std::vector<sptr<CameraAbility>> CameraAbilityBuilder::GetAbility(int32_t modeNa
     const std::set<int32_t>& specIds, sptr<CaptureSession> session, bool isForApp)
 {
     AvailableConfig availableConfig;
+    sceneMode_ = static_cast<SceneMode>(modeName);
     CameraAbilityParseUtil::GetAvailableConfiguration(modeName, metadata, availableConfig);
     std::vector<sptr<CameraAbility>> abilities;
     MEDIA_INFO_LOG("enter CameraAbilityBuilder::GetAbility");
@@ -119,7 +120,8 @@ std::vector<float> CameraAbilityBuilder::GetValidZoomRatioRange(const std::vecto
 
 bool CameraAbilityBuilder::CanAddColorSpace(ColorSpace colorSpace)
 {
-    return !(colorSpace == ColorSpace::BT2020_HLG && !CameraSecurity::CheckSystemApp());
+    return CameraSecurity::CheckSystemApp() ||
+        !(colorSpace == ColorSpace::BT2020_HLG && sceneMode_ == SceneMode::CAPTURE);
 }
 
 std::vector<ColorSpace> CameraAbilityBuilder::GetValidColorSpaces(const std::vector<int32_t>& data)
diff --git a/frameworks/native/camera/src/session/capture_session.cpp b/frameworks/native/camera/src/session/capture_session.cpp
index a1656a6fbb..b191ff86e9 100644
--- a/frameworks/native/camera/src/session/capture_session.cpp
+++ b/frameworks/native/camera/src/session/capture_session.cpp
@@ -3634,15 +3634,15 @@ ColorSpaceInfo CaptureSession::GetSupportedColorSpaceInfo()
     int ret = Camera::FindCameraMetadataItem(metadata->get(), OHOS_ABILITY_AVAILABLE_COLOR_SPACES, &item);
     CHECK_ERROR_RETURN_RET_LOG(ret != CAM_META_SUCCESS, colorSpaceInfo,
         "CaptureSession::GetSupportedColorSpaceInfo Failed, return code %{public}d", ret);
-
     std::shared_ptr<ColorSpaceInfoParse> colorSpaceParse = std::make_shared<ColorSpaceInfoParse>();
     colorSpaceParse->getColorSpaceInfo(item.data.i32, item.count, colorSpaceInfo); // 解析tag中带的色彩空间信息
     return colorSpaceInfo;
 }
 
-bool CheckColorSpaceForSystemApp(ColorSpace colorSpace)
+bool CheckColorSpaceForSystemApp(ColorSpace colorSpace, SceneMode sceneMode)
 {
-    return CameraSecurity::CheckSystemApp() || colorSpace != ColorSpace::BT2020_HLG;
+    return CameraSecurity::CheckSystemApp() ||
+        !(colorSpace == ColorSpace::BT2020_HLG && sceneMode == SceneMode::CAPTURE);
 }
 
 std::vector<ColorSpace> CaptureSession::GetSupportedColorSpaces()
@@ -3674,7 +3674,8 @@ std::vector<ColorSpace> CaptureSession::GetSupportedColorSpaces()
         supportedColorSpaces.reserve(colorSpaces.size());
         for (uint32_t j = 0; j < colorSpaces.size(); j++) {
             auto itr = g_metaColorSpaceMap_.find(static_cast<CM_ColorSpaceType_V2_1>(colorSpaces[j]));
-            bool isFindColorSpace = itr != g_metaColorSpaceMap_.end() && CheckColorSpaceForSystemApp(itr->second);
+            bool isFindColorSpace = 
+                itr != g_metaColorSpaceMap_.end() && CheckColorSpaceForSystemApp(itr->second, GetMode());
             if (isFindColorSpace) {
                 supportedColorSpaces.emplace_back(itr->second);
             }
diff --git a/interfaces/inner_api/native/camera/include/ability/camera_ability_builder.h b/interfaces/inner_api/native/camera/include/ability/camera_ability_builder.h
index 6fdeb1cdf6..9be4ce8127 100644
--- a/interfaces/inner_api/native/camera/include/ability/camera_ability_builder.h
+++ b/interfaces/inner_api/native/camera/include/ability/camera_ability_builder.h
@@ -29,6 +29,7 @@
 #include "ability/camera_ability.h"
 #include "ability/camera_ability_parse_util.h"
 #include "session/capture_session.h"
+#include "capture_scene_const.h"
 
 namespace OHOS {
 namespace CameraStandard {
@@ -72,6 +73,7 @@ private:
 
     std::map<uint32_t, std::map<int32_t, MultiTypeArray>> cacheTagDataMap_;
     std::set<uint32_t> cachedTagSet_;
+    SceneMode sceneMode_;
 };
 } // namespace CameraStandard
 } // namespace OHOS
-- 
2.45.2.huawei.10

